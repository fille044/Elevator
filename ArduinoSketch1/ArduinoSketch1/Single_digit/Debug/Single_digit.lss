
Single_digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000d66  00000dfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800120  00800120  00000e1a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000802f  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ad9  00000000  00000000  0000919b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b4e  00000000  00000000  0000ac74  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  0000c7c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c8b  00000000  00000000  0000cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f37  00000000  00000000  0000ec2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00011b62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_18>
  4c:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	8a 03       	fmulsu	r16, r18

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e6 e6       	ldi	r30, 0x66	; 102
  d8:	fd e0       	ldi	r31, 0x0D	; 13
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a0 32       	cpi	r26, 0x20	; 32
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a0 e2       	ldi	r26, 0x20	; 32
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a8 3c       	cpi	r26, 0xC8	; 200
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 ab 06 	call	0xd56	; 0xd56 <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 b8 03 	call	0x770	; 0x770 <main>
 110:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z11light_it_upv>:
#define button_hiss_B 5
#define foto_0 11
#define foto_1 A1
#define foto_2 A2

void light_it_up(void){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	static int i = 0;

	//Clear LEDs
	digitalWrite(led_G,0);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	88 e0       	ldi	r24, 0x08	; 8
 120:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
	digitalWrite(led_R,0);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	89 e0       	ldi	r24, 0x09	; 9
 128:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
	digitalWrite(led_B,0);
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
	// Keep only one LED alive
	if (i == 0){
 134:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 138:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 13c:	89 2b       	or	r24, r25
 13e:	21 f4       	brne	.+8      	; 0x148 <_Z11light_it_upv+0x30>
 		digitalWrite(led_G,1);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	88 e0       	ldi	r24, 0x08	; 8
 144:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
	}
	if (i == 1){
 148:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 14c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	21 f4       	brne	.+8      	; 0x15c <_Z11light_it_upv+0x44>
 		digitalWrite(led_R,1);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	89 e0       	ldi	r24, 0x09	; 9
 158:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
	}
	if (i == 2){
 15c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 160:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 164:	02 97       	sbiw	r24, 0x02	; 2
 166:	21 f4       	brne	.+8      	; 0x170 <_Z11light_it_upv+0x58>
 		digitalWrite(led_B,1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
	}

	// All combinations for where you and the elevator are
	// 3s delay for one floor, 6s delay for two floors, 1s delay for pick up

	if ((digitalRead(button_G) == 0 || digitalRead(button_hiss_G)==0) && i == 2){
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 176:	89 2b       	or	r24, r25
 178:	39 f4       	brne	.+14     	; 0x188 <_Z11light_it_upv+0x70>
 17a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 17e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 182:	02 97       	sbiw	r24, 0x02	; 2
 184:	59 f5       	brne	.+86     	; 0x1dc <_Z11light_it_upv+0xc4>
 186:	06 c0       	rjmp	.+12     	; 0x194 <_Z11light_it_upv+0x7c>
 188:	83 e0       	ldi	r24, 0x03	; 3
 18a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 18e:	89 2b       	or	r24, r25
 190:	a1 f3       	breq	.-24     	; 0x17a <_Z11light_it_upv+0x62>
 192:	24 c0       	rjmp	.+72     	; 0x1dc <_Z11light_it_upv+0xc4>
 		i = 0;
 194:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x1>
 198:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 		digitalWrite(led_G,1);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	88 e0       	ldi	r24, 0x08	; 8
 1a0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 1a4:	c4 e6       	ldi	r28, 0x64	; 100
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 		for (int jx = 0; jx <100; jx++){
 			if ((digitalRead(button_R) == 0 || digitalRead(button_hiss_R)==0)){
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 1ae:	89 2b       	or	r24, r25
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <_Z11light_it_upv+0x9c>
 1b2:	a4 c0       	rjmp	.+328    	; 0x2fc <_Z11light_it_upv+0x1e4>
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 1ba:	89 2b       	or	r24, r25
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <_Z11light_it_upv+0xa8>
 1be:	9e c0       	rjmp	.+316    	; 0x2fc <_Z11light_it_upv+0x1e4>
 				digitalWrite(led_R,1);
 				delay(1000);
 				digitalWrite(led_B,0);
 			}
 			delay(30);
 1c0:	6e e1       	ldi	r22, 0x1E	; 30
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
 1cc:	21 97       	sbiw	r28, 0x01	; 1
	// 3s delay for one floor, 6s delay for two floors, 1s delay for pick up

	if ((digitalRead(button_G) == 0 || digitalRead(button_hiss_G)==0) && i == 2){
 		i = 0;
 		digitalWrite(led_G,1);
 		for (int jx = 0; jx <100; jx++){
 1ce:	61 f7       	brne	.-40     	; 0x1a8 <_Z11light_it_upv+0x90>
 				delay(1000);
 				digitalWrite(led_B,0);
 			}
 			delay(30);
 		}
 		delay(3000);
 1d0:	68 eb       	ldi	r22, 0xB8	; 184
 1d2:	7b e0       	ldi	r23, 0x0B	; 11
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
	}
	if ((digitalRead(button_G)==0 || digitalRead(button_hiss_G)==0) && i == 1){
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 1e2:	89 2b       	or	r24, r25
 1e4:	39 f4       	brne	.+14     	; 0x1f4 <_Z11light_it_upv+0xdc>
 1e6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1ea:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	31 f4       	brne	.+12     	; 0x1fe <_Z11light_it_upv+0xe6>
 1f2:	93 c0       	rjmp	.+294    	; 0x31a <_Z11light_it_upv+0x202>
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 1fa:	89 2b       	or	r24, r25
 1fc:	a1 f3       	breq	.-24     	; 0x1e6 <_Z11light_it_upv+0xce>
 		i = 0;
 		digitalWrite(led_G,1);
 		delay(3000);
	}
	if ((digitalRead(button_R)==0 || digitalRead(button_hiss_R)==0) && i == 0){
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 204:	89 2b       	or	r24, r25
 206:	41 f4       	brne	.+16     	; 0x218 <_Z11light_it_upv+0x100>
 208:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 20c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 210:	89 2b       	or	r24, r25
 212:	09 f4       	brne	.+2      	; 0x216 <_Z11light_it_upv+0xfe>
 214:	91 c0       	rjmp	.+290    	; 0x338 <_Z11light_it_upv+0x220>
 216:	05 c0       	rjmp	.+10     	; 0x222 <_Z11light_it_upv+0x10a>
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 21e:	89 2b       	or	r24, r25
 220:	99 f3       	breq	.-26     	; 0x208 <_Z11light_it_upv+0xf0>
 		//i = 1;
 		digitalWrite(led_R,1);
 		delay(3000);
	}
	if ((digitalRead(button_R)==0 || digitalRead(button_hiss_R)==0) && i == 2){
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 228:	89 2b       	or	r24, r25
 22a:	39 f4       	brne	.+14     	; 0x23a <_Z11light_it_upv+0x122>
 22c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 230:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 234:	02 97       	sbiw	r24, 0x02	; 2
 236:	31 f4       	brne	.+12     	; 0x244 <_Z11light_it_upv+0x12c>
 238:	8a c0       	rjmp	.+276    	; 0x34e <_Z11light_it_upv+0x236>
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 240:	89 2b       	or	r24, r25
 242:	a1 f3       	breq	.-24     	; 0x22c <_Z11light_it_upv+0x114>
 		//i = 1;
 		digitalWrite(led_R,1);
 		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 0){
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 24a:	89 2b       	or	r24, r25
 24c:	39 f4       	brne	.+14     	; 0x25c <_Z11light_it_upv+0x144>
 24e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 252:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 256:	89 2b       	or	r24, r25
 258:	39 f0       	breq	.+14     	; 0x268 <_Z11light_it_upv+0x150>
 25a:	2c c0       	rjmp	.+88     	; 0x2b4 <_Z11light_it_upv+0x19c>
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 262:	89 2b       	or	r24, r25
 264:	a1 f3       	breq	.-24     	; 0x24e <_Z11light_it_upv+0x136>
 266:	26 c0       	rjmp	.+76     	; 0x2b4 <_Z11light_it_upv+0x19c>
 		i = 2;
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 270:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 		digitalWrite(led_B,1);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 27c:	c4 e6       	ldi	r28, 0x64	; 100
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 		for (int jx = 0; jx <100; jx++){
 			if ((digitalRead(button_R) == 0 || digitalRead(button_hiss_R)==0)){
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 286:	89 2b       	or	r24, r25
 288:	09 f4       	brne	.+2      	; 0x28c <_Z11light_it_upv+0x174>
 28a:	6c c0       	rjmp	.+216    	; 0x364 <_Z11light_it_upv+0x24c>
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 292:	89 2b       	or	r24, r25
 294:	09 f4       	brne	.+2      	; 0x298 <_Z11light_it_upv+0x180>
 296:	66 c0       	rjmp	.+204    	; 0x364 <_Z11light_it_upv+0x24c>
 				digitalWrite(led_R,1);
 				delay(1000);
 				digitalWrite(led_G,0);
 			}
 			delay(30);
 298:	6e e1       	ldi	r22, 0x1E	; 30
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
 2a4:	21 97       	sbiw	r28, 0x01	; 1
 		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 0){
 		i = 2;
 		digitalWrite(led_B,1);
 		for (int jx = 0; jx <100; jx++){
 2a6:	61 f7       	brne	.-40     	; 0x280 <_Z11light_it_upv+0x168>
 				delay(1000);
 				digitalWrite(led_G,0);
 			}
 			delay(30);
 		}
 		delay(3000);
 2a8:	68 eb       	ldi	r22, 0xB8	; 184
 2aa:	7b e0       	ldi	r23, 0x0B	; 11
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 1){
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 2ba:	89 2b       	or	r24, r25
 2bc:	c9 f4       	brne	.+50     	; 0x2f0 <_Z11light_it_upv+0x1d8>
 2be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 2c2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	09 f0       	breq	.+2      	; 0x2cc <_Z11light_it_upv+0x1b4>
 2ca:	5b c0       	rjmp	.+182    	; 0x382 <_Z11light_it_upv+0x26a>
 		i = 2;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 2d4:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 		digitalWrite(led_B,1);
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 		delay(3000);
 2e0:	68 eb       	ldi	r22, 0xB8	; 184
 2e2:	7b e0       	ldi	r23, 0x0B	; 11
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 1){
 		i = 2;
 		digitalWrite(led_B,1);
 		delay(3000);
 2ec:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <delay>
 			}
 			delay(30);
 		}
 		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 1){
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <digitalRead>
 2f6:	89 2b       	or	r24, r25
 2f8:	11 f3       	breq	.-60     	; 0x2be <_Z11light_it_upv+0x1a6>
 2fa:	43 c0       	rjmp	.+134    	; 0x382 <_Z11light_it_upv+0x26a>
	if ((digitalRead(button_G) == 0 || digitalRead(button_hiss_G)==0) && i == 2){
 		i = 0;
 		digitalWrite(led_G,1);
 		for (int jx = 0; jx <100; jx++){
 			if ((digitalRead(button_R) == 0 || digitalRead(button_hiss_R)==0)){
 				digitalWrite(led_R,1);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	89 e0       	ldi	r24, 0x09	; 9
 300:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 				delay(1000);
 304:	68 ee       	ldi	r22, 0xE8	; 232
 306:	73 e0       	ldi	r23, 0x03	; 3
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
 				digitalWrite(led_B,0);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 318:	53 cf       	rjmp	.-346    	; 0x1c0 <_Z11light_it_upv+0xa8>
 			delay(30);
 		}
 		delay(3000);
	}
	if ((digitalRead(button_G)==0 || digitalRead(button_hiss_G)==0) && i == 1){
 		i = 0;
 31a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x1>
 31e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 		digitalWrite(led_G,1);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	88 e0       	ldi	r24, 0x08	; 8
 326:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 		delay(3000);
 32a:	68 eb       	ldi	r22, 0xB8	; 184
 32c:	7b e0       	ldi	r23, 0x0B	; 11
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
 336:	63 cf       	rjmp	.-314    	; 0x1fe <_Z11light_it_upv+0xe6>
	}
	if ((digitalRead(button_R)==0 || digitalRead(button_hiss_R)==0) && i == 0){
 		//i = 1;
 		digitalWrite(led_R,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	89 e0       	ldi	r24, 0x09	; 9
 33c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 		delay(3000);
 340:	68 eb       	ldi	r22, 0xB8	; 184
 342:	7b e0       	ldi	r23, 0x0B	; 11
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
 34c:	6a cf       	rjmp	.-300    	; 0x222 <_Z11light_it_upv+0x10a>
	}
	if ((digitalRead(button_R)==0 || digitalRead(button_hiss_R)==0) && i == 2){
 		//i = 1;
 		digitalWrite(led_R,1);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	89 e0       	ldi	r24, 0x09	; 9
 352:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 		delay(3000);
 356:	68 eb       	ldi	r22, 0xB8	; 184
 358:	7b e0       	ldi	r23, 0x0B	; 11
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
 362:	70 cf       	rjmp	.-288    	; 0x244 <_Z11light_it_upv+0x12c>
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 0){
 		i = 2;
 		digitalWrite(led_B,1);
 		for (int jx = 0; jx <100; jx++){
 			if ((digitalRead(button_R) == 0 || digitalRead(button_hiss_R)==0)){
 				digitalWrite(led_R,1);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	89 e0       	ldi	r24, 0x09	; 9
 368:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 				delay(1000);
 36c:	68 ee       	ldi	r22, 0xE8	; 232
 36e:	73 e0       	ldi	r23, 0x03	; 3
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 36 05 	call	0xa6c	; 0xa6c <delay>
 				digitalWrite(led_G,0);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	88 e0       	ldi	r24, 0x08	; 8
 37c:	0e 94 2f 06 	call	0xc5e	; 0xc5e <digitalWrite>
 380:	8b cf       	rjmp	.-234    	; 0x298 <_Z11light_it_upv+0x180>
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 1){
 		i = 2;
 		digitalWrite(led_B,1);
 		delay(3000);
	}
}
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <setup>:
#define foto_0 A0
#define foto_1 A1
#define foto_2 A2

void setup() {
	pinMode(led_G,OUTPUT);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	88 e0       	ldi	r24, 0x08	; 8
 38c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
	pinMode(led_R,OUTPUT);
 390:	61 e0       	ldi	r22, 0x01	; 1
 392:	89 e0       	ldi	r24, 0x09	; 9
 394:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
	pinMode(led_B,OUTPUT);
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	8a e0       	ldi	r24, 0x0A	; 10
 39c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
	pinMode(button_G, INPUT);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
	pinMode(button_R, INPUT);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
	pinMode(button_B, INPUT);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
	pinMode(button_hiss_G, INPUT);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
	pinMode(button_hiss_R, INPUT);
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	84 e0       	ldi	r24, 0x04	; 4
 3c4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
	pinMode(button_hiss_B, INPUT);
 3c8:	60 e0       	ldi	r22, 0x00	; 0
 3ca:	85 e0       	ldi	r24, 0x05	; 5
 3cc:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 3d0:	26 e0       	ldi	r18, 0x06	; 6
 3d2:	40 e8       	ldi	r20, 0x80	; 128
 3d4:	55 e2       	ldi	r21, 0x25	; 37
 3d6:	60 e0       	ldi	r22, 0x00	; 0
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	82 e2       	ldi	r24, 0x22	; 34
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0c 94 c3 02 	jmp	0x586	; 0x586 <_ZN14HardwareSerial5beginEmh>

000003e2 <loop>:
	Serial.begin(9600);
}

void loop() {
	light_it_up();
 3e2:	0e 94 8c 00 	call	0x118	; 0x118 <_Z11light_it_upv>
	int value = analogRead(foto_0);
 3e6:	8e e0       	ldi	r24, 0x0E	; 14
 3e8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <analogRead>
	Serial.println(value);
 3ec:	4a e0       	ldi	r20, 0x0A	; 10
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	bc 01       	movw	r22, r24
 3f2:	82 e2       	ldi	r24, 0x22	; 34
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0c 94 b0 04 	jmp	0x960	; 0x960 <_ZN5Print7printlnEii>

000003fa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3fa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3fc:	91 8d       	ldd	r25, Z+25	; 0x19
 3fe:	22 8d       	ldd	r18, Z+26	; 0x1a
 400:	89 2f       	mov	r24, r25
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	80 5c       	subi	r24, 0xC0	; 192
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	82 1b       	sub	r24, r18
 40a:	91 09       	sbc	r25, r1
}
 40c:	8f 73       	andi	r24, 0x3F	; 63
 40e:	99 27       	eor	r25, r25
 410:	08 95       	ret

00000412 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 412:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 414:	91 8d       	ldd	r25, Z+25	; 0x19
 416:	82 8d       	ldd	r24, Z+26	; 0x1a
 418:	98 17       	cp	r25, r24
 41a:	31 f0       	breq	.+12     	; 0x428 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 41c:	82 8d       	ldd	r24, Z+26	; 0x1a
 41e:	e8 0f       	add	r30, r24
 420:	f1 1d       	adc	r31, r1
 422:	85 8d       	ldd	r24, Z+29	; 0x1d
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 42c:	08 95       	ret

0000042e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 42e:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 430:	91 8d       	ldd	r25, Z+25	; 0x19
 432:	82 8d       	ldd	r24, Z+26	; 0x1a
 434:	98 17       	cp	r25, r24
 436:	61 f0       	breq	.+24     	; 0x450 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 438:	82 8d       	ldd	r24, Z+26	; 0x1a
 43a:	df 01       	movw	r26, r30
 43c:	a8 0f       	add	r26, r24
 43e:	b1 1d       	adc	r27, r1
 440:	5d 96       	adiw	r26, 0x1d	; 29
 442:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 444:	92 8d       	ldd	r25, Z+26	; 0x1a
 446:	9f 5f       	subi	r25, 0xFF	; 255
 448:	9f 73       	andi	r25, 0x3F	; 63
 44a:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 454:	08 95       	ret

00000456 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	93 e0       	ldi	r25, 0x03	; 3
 45a:	89 2b       	or	r24, r25
 45c:	49 f0       	breq	.+18     	; 0x470 <_Z14serialEventRunv+0x1a>
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	89 2b       	or	r24, r25
 464:	29 f0       	breq	.+10     	; 0x470 <_Z14serialEventRunv+0x1a>
 466:	0e 94 80 03 	call	0x700	; 0x700 <_Z17Serial0_availablev>
 46a:	81 11       	cpse	r24, r1
 46c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 470:	08 95       	ret

00000472 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 472:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 474:	84 8d       	ldd	r24, Z+28	; 0x1c
 476:	df 01       	movw	r26, r30
 478:	a8 0f       	add	r26, r24
 47a:	b1 1d       	adc	r27, r1
 47c:	a3 5a       	subi	r26, 0xA3	; 163
 47e:	bf 4f       	sbci	r27, 0xFF	; 255
 480:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 482:	84 8d       	ldd	r24, Z+28	; 0x1c
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	01 96       	adiw	r24, 0x01	; 1
 488:	8f 73       	andi	r24, 0x3F	; 63
 48a:	99 27       	eor	r25, r25
 48c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 48e:	a6 89       	ldd	r26, Z+22	; 0x16
 490:	b7 89       	ldd	r27, Z+23	; 0x17
 492:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 494:	a0 89       	ldd	r26, Z+16	; 0x10
 496:	b1 89       	ldd	r27, Z+17	; 0x11
 498:	8c 91       	ld	r24, X
 49a:	80 64       	ori	r24, 0x40	; 64
 49c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 49e:	93 8d       	ldd	r25, Z+27	; 0x1b
 4a0:	84 8d       	ldd	r24, Z+28	; 0x1c
 4a2:	98 13       	cpse	r25, r24
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 4a6:	02 88       	ldd	r0, Z+18	; 0x12
 4a8:	f3 89       	ldd	r31, Z+19	; 0x13
 4aa:	e0 2d       	mov	r30, r0
 4ac:	80 81       	ld	r24, Z
 4ae:	8f 7d       	andi	r24, 0xDF	; 223
 4b0:	80 83       	st	Z, r24
 4b2:	08 95       	ret

000004b4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4ba:	88 8d       	ldd	r24, Y+24	; 0x18
 4bc:	88 23       	and	r24, r24
 4be:	c9 f0       	breq	.+50     	; 0x4f2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4c0:	ea 89       	ldd	r30, Y+18	; 0x12
 4c2:	fb 89       	ldd	r31, Y+19	; 0x13
 4c4:	80 81       	ld	r24, Z
 4c6:	85 fd       	sbrc	r24, 5
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <_ZN14HardwareSerial5flushEv+0x20>
 4ca:	a8 89       	ldd	r26, Y+16	; 0x10
 4cc:	b9 89       	ldd	r27, Y+17	; 0x11
 4ce:	8c 91       	ld	r24, X
 4d0:	86 fd       	sbrc	r24, 6
 4d2:	0f c0       	rjmp	.+30     	; 0x4f2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	07 fc       	sbrc	r0, 7
 4d8:	f5 cf       	rjmp	.-22     	; 0x4c4 <_ZN14HardwareSerial5flushEv+0x10>
 4da:	80 81       	ld	r24, Z
 4dc:	85 ff       	sbrs	r24, 5
 4de:	f2 cf       	rjmp	.-28     	; 0x4c4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4e0:	a8 89       	ldd	r26, Y+16	; 0x10
 4e2:	b9 89       	ldd	r27, Y+17	; 0x11
 4e4:	8c 91       	ld	r24, X
 4e6:	85 ff       	sbrs	r24, 5
 4e8:	ed cf       	rjmp	.-38     	; 0x4c4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4ea:	ce 01       	movw	r24, r28
 4ec:	0e 94 39 02 	call	0x472	; 0x472 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4f0:	e7 cf       	rjmp	.-50     	; 0x4c0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 4f8:	ef 92       	push	r14
 4fa:	ff 92       	push	r15
 4fc:	0f 93       	push	r16
 4fe:	1f 93       	push	r17
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	ec 01       	movw	r28, r24
  _written = true;
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 50a:	9b 8d       	ldd	r25, Y+27	; 0x1b
 50c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 50e:	98 13       	cpse	r25, r24
 510:	05 c0       	rjmp	.+10     	; 0x51c <_ZN14HardwareSerial5writeEh+0x24>
 512:	e8 89       	ldd	r30, Y+16	; 0x10
 514:	f9 89       	ldd	r31, Y+17	; 0x11
 516:	80 81       	ld	r24, Z
 518:	85 fd       	sbrc	r24, 5
 51a:	24 c0       	rjmp	.+72     	; 0x564 <_ZN14HardwareSerial5writeEh+0x6c>
 51c:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 51e:	0b 8d       	ldd	r16, Y+27	; 0x1b
 520:	10 e0       	ldi	r17, 0x00	; 0
 522:	0f 5f       	subi	r16, 0xFF	; 255
 524:	1f 4f       	sbci	r17, 0xFF	; 255
 526:	0f 73       	andi	r16, 0x3F	; 63
 528:	11 27       	eor	r17, r17
 52a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 52c:	8c 8d       	ldd	r24, Y+28	; 0x1c
 52e:	e8 12       	cpse	r14, r24
 530:	0c c0       	rjmp	.+24     	; 0x54a <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	07 fc       	sbrc	r0, 7
 536:	fa cf       	rjmp	.-12     	; 0x52c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 538:	e8 89       	ldd	r30, Y+16	; 0x10
 53a:	f9 89       	ldd	r31, Y+17	; 0x11
 53c:	80 81       	ld	r24, Z
 53e:	85 ff       	sbrs	r24, 5
 540:	f5 cf       	rjmp	.-22     	; 0x52c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 542:	ce 01       	movw	r24, r28
 544:	0e 94 39 02 	call	0x472	; 0x472 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 548:	f1 cf       	rjmp	.-30     	; 0x52c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 54a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 54c:	fe 01       	movw	r30, r28
 54e:	e8 0f       	add	r30, r24
 550:	f1 1d       	adc	r31, r1
 552:	e3 5a       	subi	r30, 0xA3	; 163
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 558:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 55a:	ea 89       	ldd	r30, Y+18	; 0x12
 55c:	fb 89       	ldd	r31, Y+19	; 0x13
 55e:	80 81       	ld	r24, Z
 560:	80 62       	ori	r24, 0x20	; 32
 562:	07 c0       	rjmp	.+14     	; 0x572 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 564:	ee 89       	ldd	r30, Y+22	; 0x16
 566:	ff 89       	ldd	r31, Y+23	; 0x17
 568:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 56a:	e8 89       	ldd	r30, Y+16	; 0x10
 56c:	f9 89       	ldd	r31, Y+17	; 0x11
 56e:	80 81       	ld	r24, Z
 570:	80 64       	ori	r24, 0x40	; 64
 572:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	df 91       	pop	r29
 57a:	cf 91       	pop	r28
 57c:	1f 91       	pop	r17
 57e:	0f 91       	pop	r16
 580:	ff 90       	pop	r15
 582:	ef 90       	pop	r14
 584:	08 95       	ret

00000586 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 586:	cf 92       	push	r12
 588:	df 92       	push	r13
 58a:	ef 92       	push	r14
 58c:	ff 92       	push	r15
 58e:	1f 93       	push	r17
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	ec 01       	movw	r28, r24
 596:	6a 01       	movw	r12, r20
 598:	7b 01       	movw	r14, r22
 59a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 59c:	e8 89       	ldd	r30, Y+16	; 0x10
 59e:	f9 89       	ldd	r31, Y+17	; 0x11
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5a4:	41 15       	cp	r20, r1
 5a6:	51 4e       	sbci	r21, 0xE1	; 225
 5a8:	61 05       	cpc	r22, r1
 5aa:	71 05       	cpc	r23, r1
 5ac:	b1 f0       	breq	.+44     	; 0x5da <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	79 e0       	ldi	r23, 0x09	; 9
 5b2:	8d e3       	ldi	r24, 0x3D	; 61
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	a7 01       	movw	r20, r14
 5b8:	96 01       	movw	r18, r12
 5ba:	0e 94 89 06 	call	0xd12	; 0xd12 <__udivmodsi4>
 5be:	da 01       	movw	r26, r20
 5c0:	c9 01       	movw	r24, r18
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	a1 09       	sbc	r26, r1
 5c6:	b1 09       	sbc	r27, r1
 5c8:	b6 95       	lsr	r27
 5ca:	a7 95       	ror	r26
 5cc:	97 95       	ror	r25
 5ce:	87 95       	ror	r24
 5d0:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5d2:	41 15       	cp	r20, r1
 5d4:	80 e1       	ldi	r24, 0x10	; 16
 5d6:	58 07       	cpc	r21, r24
 5d8:	a8 f0       	brcs	.+42     	; 0x604 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 5da:	e8 89       	ldd	r30, Y+16	; 0x10
 5dc:	f9 89       	ldd	r31, Y+17	; 0x11
 5de:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 5e0:	60 e8       	ldi	r22, 0x80	; 128
 5e2:	74 e8       	ldi	r23, 0x84	; 132
 5e4:	8e e1       	ldi	r24, 0x1E	; 30
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	a7 01       	movw	r20, r14
 5ea:	96 01       	movw	r18, r12
 5ec:	0e 94 89 06 	call	0xd12	; 0xd12 <__udivmodsi4>
 5f0:	ba 01       	movw	r22, r20
 5f2:	a9 01       	movw	r20, r18
 5f4:	41 50       	subi	r20, 0x01	; 1
 5f6:	51 09       	sbc	r21, r1
 5f8:	61 09       	sbc	r22, r1
 5fa:	71 09       	sbc	r23, r1
 5fc:	76 95       	lsr	r23
 5fe:	67 95       	ror	r22
 600:	57 95       	ror	r21
 602:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 604:	ec 85       	ldd	r30, Y+12	; 0x0c
 606:	fd 85       	ldd	r31, Y+13	; 0x0d
 608:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 60a:	ee 85       	ldd	r30, Y+14	; 0x0e
 60c:	ff 85       	ldd	r31, Y+15	; 0x0f
 60e:	40 83       	st	Z, r20

  _written = false;
 610:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 612:	ec 89       	ldd	r30, Y+20	; 0x14
 614:	fd 89       	ldd	r31, Y+21	; 0x15
 616:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 618:	ea 89       	ldd	r30, Y+18	; 0x12
 61a:	fb 89       	ldd	r31, Y+19	; 0x13
 61c:	80 81       	ld	r24, Z
 61e:	80 61       	ori	r24, 0x10	; 16
 620:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 622:	ea 89       	ldd	r30, Y+18	; 0x12
 624:	fb 89       	ldd	r31, Y+19	; 0x13
 626:	80 81       	ld	r24, Z
 628:	88 60       	ori	r24, 0x08	; 8
 62a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 62c:	ea 89       	ldd	r30, Y+18	; 0x12
 62e:	fb 89       	ldd	r31, Y+19	; 0x13
 630:	80 81       	ld	r24, Z
 632:	80 68       	ori	r24, 0x80	; 128
 634:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 636:	ea 89       	ldd	r30, Y+18	; 0x12
 638:	fb 89       	ldd	r31, Y+19	; 0x13
 63a:	80 81       	ld	r24, Z
 63c:	8f 7d       	andi	r24, 0xDF	; 223
 63e:	80 83       	st	Z, r24
}
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	1f 91       	pop	r17
 646:	ff 90       	pop	r15
 648:	ef 90       	pop	r14
 64a:	df 90       	pop	r13
 64c:	cf 90       	pop	r12
 64e:	08 95       	ret

00000650 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	2f 93       	push	r18
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	ef 93       	push	r30
 662:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 664:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Serial+0x10>
 668:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Serial+0x11>
 66c:	80 81       	ld	r24, Z
 66e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <Serial+0x16>
 672:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <Serial+0x17>
 676:	82 fd       	sbrc	r24, 2
 678:	12 c0       	rjmp	.+36     	; 0x69e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 67a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 67c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Serial+0x19>
 680:	8f 5f       	subi	r24, 0xFF	; 255
 682:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 684:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <Serial+0x1a>
 688:	82 17       	cp	r24, r18
 68a:	51 f0       	breq	.+20     	; 0x6a0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 68c:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Serial+0x19>
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	ee 5d       	subi	r30, 0xDE	; 222
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 698:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Serial+0x19>
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 69e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 6a0:	ff 91       	pop	r31
 6a2:	ef 91       	pop	r30
 6a4:	9f 91       	pop	r25
 6a6:	8f 91       	pop	r24
 6a8:	2f 91       	pop	r18
 6aa:	0f 90       	pop	r0
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	0f 90       	pop	r0
 6b0:	1f 90       	pop	r1
 6b2:	18 95       	reti

000006b4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6b4:	1f 92       	push	r1
 6b6:	0f 92       	push	r0
 6b8:	0f b6       	in	r0, 0x3f	; 63
 6ba:	0f 92       	push	r0
 6bc:	11 24       	eor	r1, r1
 6be:	2f 93       	push	r18
 6c0:	3f 93       	push	r19
 6c2:	4f 93       	push	r20
 6c4:	5f 93       	push	r21
 6c6:	6f 93       	push	r22
 6c8:	7f 93       	push	r23
 6ca:	8f 93       	push	r24
 6cc:	9f 93       	push	r25
 6ce:	af 93       	push	r26
 6d0:	bf 93       	push	r27
 6d2:	ef 93       	push	r30
 6d4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 6d6:	82 e2       	ldi	r24, 0x22	; 34
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	0e 94 39 02 	call	0x472	; 0x472 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 6de:	ff 91       	pop	r31
 6e0:	ef 91       	pop	r30
 6e2:	bf 91       	pop	r27
 6e4:	af 91       	pop	r26
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	7f 91       	pop	r23
 6ec:	6f 91       	pop	r22
 6ee:	5f 91       	pop	r21
 6f0:	4f 91       	pop	r20
 6f2:	3f 91       	pop	r19
 6f4:	2f 91       	pop	r18
 6f6:	0f 90       	pop	r0
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	0f 90       	pop	r0
 6fc:	1f 90       	pop	r1
 6fe:	18 95       	reti

00000700 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 700:	82 e2       	ldi	r24, 0x22	; 34
 702:	91 e0       	ldi	r25, 0x01	; 1
 704:	0e 94 fd 01 	call	0x3fa	; 0x3fa <_ZN14HardwareSerial9availableEv>
 708:	21 e0       	ldi	r18, 0x01	; 1
 70a:	89 2b       	or	r24, r25
 70c:	09 f4       	brne	.+2      	; 0x710 <_Z17Serial0_availablev+0x10>
 70e:	20 e0       	ldi	r18, 0x00	; 0
}
 710:	82 2f       	mov	r24, r18
 712:	08 95       	ret

00000714 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 714:	e2 e2       	ldi	r30, 0x22	; 34
 716:	f1 e0       	ldi	r31, 0x01	; 1
 718:	13 82       	std	Z+3, r1	; 0x03
 71a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 71c:	88 ee       	ldi	r24, 0xE8	; 232
 71e:	93 e0       	ldi	r25, 0x03	; 3
 720:	a0 e0       	ldi	r26, 0x00	; 0
 722:	b0 e0       	ldi	r27, 0x00	; 0
 724:	84 83       	std	Z+4, r24	; 0x04
 726:	95 83       	std	Z+5, r25	; 0x05
 728:	a6 83       	std	Z+6, r26	; 0x06
 72a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 72c:	85 e0       	ldi	r24, 0x05	; 5
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	91 83       	std	Z+1, r25	; 0x01
 732:	80 83       	st	Z, r24
 734:	85 ec       	ldi	r24, 0xC5	; 197
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	95 87       	std	Z+13, r25	; 0x0d
 73a:	84 87       	std	Z+12, r24	; 0x0c
 73c:	84 ec       	ldi	r24, 0xC4	; 196
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	97 87       	std	Z+15, r25	; 0x0f
 742:	86 87       	std	Z+14, r24	; 0x0e
 744:	80 ec       	ldi	r24, 0xC0	; 192
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	91 8b       	std	Z+17, r25	; 0x11
 74a:	80 8b       	std	Z+16, r24	; 0x10
 74c:	81 ec       	ldi	r24, 0xC1	; 193
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	93 8b       	std	Z+19, r25	; 0x13
 752:	82 8b       	std	Z+18, r24	; 0x12
 754:	82 ec       	ldi	r24, 0xC2	; 194
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	95 8b       	std	Z+21, r25	; 0x15
 75a:	84 8b       	std	Z+20, r24	; 0x14
 75c:	86 ec       	ldi	r24, 0xC6	; 198
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	97 8b       	std	Z+23, r25	; 0x17
 762:	86 8b       	std	Z+22, r24	; 0x16
 764:	11 8e       	std	Z+25, r1	; 0x19
 766:	12 8e       	std	Z+26, r1	; 0x1a
 768:	13 8e       	std	Z+27, r1	; 0x1b
 76a:	14 8e       	std	Z+28, r1	; 0x1c
 76c:	08 95       	ret

0000076e <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 76e:	08 95       	ret

00000770 <main>:

int main(void)
{
	init();
 770:	0e 94 72 05 	call	0xae4	; 0xae4 <init>

	initVariant();
 774:	0e 94 b7 03 	call	0x76e	; 0x76e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 778:	0e 94 c4 01 	call	0x388	; 0x388 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 77c:	cb e2       	ldi	r28, 0x2B	; 43
 77e:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 780:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <loop>
		if (serialEventRun) serialEventRun();
 784:	20 97       	sbiw	r28, 0x00	; 0
 786:	e1 f3       	breq	.-8      	; 0x780 <main+0x10>
 788:	0e 94 2b 02 	call	0x456	; 0x456 <_Z14serialEventRunv>
 78c:	f9 cf       	rjmp	.-14     	; 0x780 <main+0x10>

0000078e <_ZN5Print5writeEPKhj>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 78e:	cf 92       	push	r12
 790:	df 92       	push	r13
 792:	ef 92       	push	r14
 794:	ff 92       	push	r15
 796:	0f 93       	push	r16
 798:	1f 93       	push	r17
 79a:	cf 93       	push	r28
 79c:	df 93       	push	r29
 79e:	6c 01       	movw	r12, r24
 7a0:	7a 01       	movw	r14, r20
 7a2:	8b 01       	movw	r16, r22
 7a4:	c0 e0       	ldi	r28, 0x00	; 0
 7a6:	d0 e0       	ldi	r29, 0x00	; 0
 7a8:	ce 15       	cp	r28, r14
 7aa:	df 05       	cpc	r29, r15
 7ac:	89 f0       	breq	.+34     	; 0x7d0 <_ZN5Print5writeEPKhj+0x42>
 7ae:	d8 01       	movw	r26, r16
 7b0:	6d 91       	ld	r22, X+
 7b2:	8d 01       	movw	r16, r26
 7b4:	d6 01       	movw	r26, r12
 7b6:	ed 91       	ld	r30, X+
 7b8:	fc 91       	ld	r31, X
 7ba:	01 90       	ld	r0, Z+
 7bc:	f0 81       	ld	r31, Z
 7be:	e0 2d       	mov	r30, r0
 7c0:	c6 01       	movw	r24, r12
 7c2:	09 95       	icall
 7c4:	89 2b       	or	r24, r25
 7c6:	11 f4       	brne	.+4      	; 0x7cc <_ZN5Print5writeEPKhj+0x3e>
 7c8:	7e 01       	movw	r14, r28
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <_ZN5Print5writeEPKhj+0x42>
 7cc:	21 96       	adiw	r28, 0x01	; 1
 7ce:	ec cf       	rjmp	.-40     	; 0x7a8 <_ZN5Print5writeEPKhj+0x1a>
 7d0:	c7 01       	movw	r24, r14
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	1f 91       	pop	r17
 7d8:	0f 91       	pop	r16
 7da:	ff 90       	pop	r15
 7dc:	ef 90       	pop	r14
 7de:	df 90       	pop	r13
 7e0:	cf 90       	pop	r12
 7e2:	08 95       	ret

000007e4 <_ZN5Print5writeEPKc>:
 7e4:	61 15       	cp	r22, r1
 7e6:	71 05       	cpc	r23, r1
 7e8:	79 f0       	breq	.+30     	; 0x808 <_ZN5Print5writeEPKc+0x24>
 7ea:	fb 01       	movw	r30, r22
 7ec:	01 90       	ld	r0, Z+
 7ee:	00 20       	and	r0, r0
 7f0:	e9 f7       	brne	.-6      	; 0x7ec <_ZN5Print5writeEPKc+0x8>
 7f2:	31 97       	sbiw	r30, 0x01	; 1
 7f4:	af 01       	movw	r20, r30
 7f6:	46 1b       	sub	r20, r22
 7f8:	57 0b       	sbc	r21, r23
 7fa:	dc 01       	movw	r26, r24
 7fc:	ed 91       	ld	r30, X+
 7fe:	fc 91       	ld	r31, X
 800:	02 80       	ldd	r0, Z+2	; 0x02
 802:	f3 81       	ldd	r31, Z+3	; 0x03
 804:	e0 2d       	mov	r30, r0
 806:	09 94       	ijmp
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	08 95       	ret

0000080e <_ZN5Print5printEc>:
 80e:	dc 01       	movw	r26, r24
 810:	ed 91       	ld	r30, X+
 812:	fc 91       	ld	r31, X
 814:	01 90       	ld	r0, Z+
 816:	f0 81       	ld	r31, Z
 818:	e0 2d       	mov	r30, r0
 81a:	09 94       	ijmp

0000081c <_ZN5Print7printlnEv>:
 81c:	61 e1       	ldi	r22, 0x11	; 17
 81e:	71 e0       	ldi	r23, 0x01	; 1
 820:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <_ZN5Print5writeEPKc>

00000824 <_ZN5Print11printNumberEmh>:
 824:	8f 92       	push	r8
 826:	9f 92       	push	r9
 828:	af 92       	push	r10
 82a:	bf 92       	push	r11
 82c:	cf 92       	push	r12
 82e:	df 92       	push	r13
 830:	ef 92       	push	r14
 832:	ff 92       	push	r15
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	a1 97       	sbiw	r28, 0x21	; 33
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	f8 94       	cli
 846:	de bf       	out	0x3e, r29	; 62
 848:	0f be       	out	0x3f, r0	; 63
 84a:	cd bf       	out	0x3d, r28	; 61
 84c:	7c 01       	movw	r14, r24
 84e:	d4 2e       	mov	r13, r20
 850:	c5 2e       	mov	r12, r21
 852:	db 01       	movw	r26, r22
 854:	19 a2       	std	Y+33, r1	; 0x21
 856:	22 30       	cpi	r18, 0x02	; 2
 858:	08 f4       	brcc	.+2      	; 0x85c <_ZN5Print11printNumberEmh+0x38>
 85a:	2a e0       	ldi	r18, 0x0A	; 10
 85c:	8e 01       	movw	r16, r28
 85e:	0f 5d       	subi	r16, 0xDF	; 223
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	82 2e       	mov	r8, r18
 864:	91 2c       	mov	r9, r1
 866:	a1 2c       	mov	r10, r1
 868:	b1 2c       	mov	r11, r1
 86a:	6d 2d       	mov	r22, r13
 86c:	7c 2d       	mov	r23, r12
 86e:	cd 01       	movw	r24, r26
 870:	a5 01       	movw	r20, r10
 872:	94 01       	movw	r18, r8
 874:	0e 94 89 06 	call	0xd12	; 0xd12 <__udivmodsi4>
 878:	d2 2e       	mov	r13, r18
 87a:	c3 2e       	mov	r12, r19
 87c:	da 01       	movw	r26, r20
 87e:	01 50       	subi	r16, 0x01	; 1
 880:	11 09       	sbc	r17, r1
 882:	6a 30       	cpi	r22, 0x0A	; 10
 884:	71 05       	cpc	r23, r1
 886:	81 05       	cpc	r24, r1
 888:	91 05       	cpc	r25, r1
 88a:	10 f4       	brcc	.+4      	; 0x890 <_ZN5Print11printNumberEmh+0x6c>
 88c:	60 5d       	subi	r22, 0xD0	; 208
 88e:	01 c0       	rjmp	.+2      	; 0x892 <_ZN5Print11printNumberEmh+0x6e>
 890:	69 5c       	subi	r22, 0xC9	; 201
 892:	f8 01       	movw	r30, r16
 894:	60 83       	st	Z, r22
 896:	23 2b       	or	r18, r19
 898:	24 2b       	or	r18, r20
 89a:	25 2b       	or	r18, r21
 89c:	31 f7       	brne	.-52     	; 0x86a <_ZN5Print11printNumberEmh+0x46>
 89e:	b8 01       	movw	r22, r16
 8a0:	c7 01       	movw	r24, r14
 8a2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <_ZN5Print5writeEPKc>
 8a6:	a1 96       	adiw	r28, 0x21	; 33
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	f8 94       	cli
 8ac:	de bf       	out	0x3e, r29	; 62
 8ae:	0f be       	out	0x3f, r0	; 63
 8b0:	cd bf       	out	0x3d, r28	; 61
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	ff 90       	pop	r15
 8bc:	ef 90       	pop	r14
 8be:	df 90       	pop	r13
 8c0:	cf 90       	pop	r12
 8c2:	bf 90       	pop	r11
 8c4:	af 90       	pop	r10
 8c6:	9f 90       	pop	r9
 8c8:	8f 90       	pop	r8
 8ca:	08 95       	ret

000008cc <_ZN5Print5printEli>:
 8cc:	cf 92       	push	r12
 8ce:	df 92       	push	r13
 8d0:	ef 92       	push	r14
 8d2:	ff 92       	push	r15
 8d4:	0f 93       	push	r16
 8d6:	1f 93       	push	r17
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	ec 01       	movw	r28, r24
 8de:	6a 01       	movw	r12, r20
 8e0:	7b 01       	movw	r14, r22
 8e2:	21 15       	cp	r18, r1
 8e4:	31 05       	cpc	r19, r1
 8e6:	79 f4       	brne	.+30     	; 0x906 <__stack+0x7>
 8e8:	e8 81       	ld	r30, Y
 8ea:	f9 81       	ldd	r31, Y+1	; 0x01
 8ec:	01 90       	ld	r0, Z+
 8ee:	f0 81       	ld	r31, Z
 8f0:	e0 2d       	mov	r30, r0
 8f2:	64 2f       	mov	r22, r20
 8f4:	df 91       	pop	r29
 8f6:	cf 91       	pop	r28
 8f8:	1f 91       	pop	r17
 8fa:	0f 91       	pop	r16
 8fc:	ff 90       	pop	r15
 8fe:	ef 90       	pop	r14
 900:	df 90       	pop	r13
 902:	cf 90       	pop	r12
 904:	09 94       	ijmp
 906:	2a 30       	cpi	r18, 0x0A	; 10
 908:	31 05       	cpc	r19, r1
 90a:	e9 f4       	brne	.+58     	; 0x946 <__stack+0x47>
 90c:	77 ff       	sbrs	r23, 7
 90e:	1a c0       	rjmp	.+52     	; 0x944 <__stack+0x45>
 910:	6d e2       	ldi	r22, 0x2D	; 45
 912:	0e 94 07 04 	call	0x80e	; 0x80e <_ZN5Print5printEc>
 916:	8c 01       	movw	r16, r24
 918:	44 27       	eor	r20, r20
 91a:	55 27       	eor	r21, r21
 91c:	ba 01       	movw	r22, r20
 91e:	4c 19       	sub	r20, r12
 920:	5d 09       	sbc	r21, r13
 922:	6e 09       	sbc	r22, r14
 924:	7f 09       	sbc	r23, r15
 926:	2a e0       	ldi	r18, 0x0A	; 10
 928:	ce 01       	movw	r24, r28
 92a:	0e 94 12 04 	call	0x824	; 0x824 <_ZN5Print11printNumberEmh>
 92e:	80 0f       	add	r24, r16
 930:	91 1f       	adc	r25, r17
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	1f 91       	pop	r17
 938:	0f 91       	pop	r16
 93a:	ff 90       	pop	r15
 93c:	ef 90       	pop	r14
 93e:	df 90       	pop	r13
 940:	cf 90       	pop	r12
 942:	08 95       	ret
 944:	2a e0       	ldi	r18, 0x0A	; 10
 946:	b7 01       	movw	r22, r14
 948:	a6 01       	movw	r20, r12
 94a:	ce 01       	movw	r24, r28
 94c:	df 91       	pop	r29
 94e:	cf 91       	pop	r28
 950:	1f 91       	pop	r17
 952:	0f 91       	pop	r16
 954:	ff 90       	pop	r15
 956:	ef 90       	pop	r14
 958:	df 90       	pop	r13
 95a:	cf 90       	pop	r12
 95c:	0c 94 12 04 	jmp	0x824	; 0x824 <_ZN5Print11printNumberEmh>

00000960 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 960:	0f 93       	push	r16
 962:	1f 93       	push	r17
 964:	cf 93       	push	r28
 966:	df 93       	push	r29
 968:	ec 01       	movw	r28, r24
 96a:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 96c:	ab 01       	movw	r20, r22
 96e:	77 0f       	add	r23, r23
 970:	66 0b       	sbc	r22, r22
 972:	77 0b       	sbc	r23, r23
 974:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN5Print5printEli>
 978:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 97a:	ce 01       	movw	r24, r28
 97c:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN5Print7printlnEv>
  return n;
}
 980:	80 0f       	add	r24, r16
 982:	91 1f       	adc	r25, r17
 984:	df 91       	pop	r29
 986:	cf 91       	pop	r28
 988:	1f 91       	pop	r17
 98a:	0f 91       	pop	r16
 98c:	08 95       	ret

0000098e <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 98e:	1f 92       	push	r1
 990:	0f 92       	push	r0
 992:	0f b6       	in	r0, 0x3f	; 63
 994:	0f 92       	push	r0
 996:	11 24       	eor	r1, r1
 998:	2f 93       	push	r18
 99a:	3f 93       	push	r19
 99c:	8f 93       	push	r24
 99e:	9f 93       	push	r25
 9a0:	af 93       	push	r26
 9a2:	bf 93       	push	r27
 9a4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <timer0_millis>
 9a8:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <timer0_millis+0x1>
 9ac:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <timer0_millis+0x2>
 9b0:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <timer0_millis+0x3>
 9b4:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <timer0_fract>
 9b8:	23 e0       	ldi	r18, 0x03	; 3
 9ba:	23 0f       	add	r18, r19
 9bc:	2d 37       	cpi	r18, 0x7D	; 125
 9be:	20 f4       	brcc	.+8      	; 0x9c8 <__vector_16+0x3a>
 9c0:	01 96       	adiw	r24, 0x01	; 1
 9c2:	a1 1d       	adc	r26, r1
 9c4:	b1 1d       	adc	r27, r1
 9c6:	05 c0       	rjmp	.+10     	; 0x9d2 <__vector_16+0x44>
 9c8:	26 e8       	ldi	r18, 0x86	; 134
 9ca:	23 0f       	add	r18, r19
 9cc:	02 96       	adiw	r24, 0x02	; 2
 9ce:	a1 1d       	adc	r26, r1
 9d0:	b1 1d       	adc	r27, r1
 9d2:	20 93 bf 01 	sts	0x01BF, r18	; 0x8001bf <timer0_fract>
 9d6:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <timer0_millis>
 9da:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <timer0_millis+0x1>
 9de:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <timer0_millis+0x2>
 9e2:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <timer0_millis+0x3>
 9e6:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <timer0_overflow_count>
 9ea:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x1>
 9ee:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <timer0_overflow_count+0x2>
 9f2:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <timer0_overflow_count+0x3>
 9f6:	01 96       	adiw	r24, 0x01	; 1
 9f8:	a1 1d       	adc	r26, r1
 9fa:	b1 1d       	adc	r27, r1
 9fc:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <timer0_overflow_count>
 a00:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <timer0_overflow_count+0x1>
 a04:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <timer0_overflow_count+0x2>
 a08:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <timer0_overflow_count+0x3>
 a0c:	bf 91       	pop	r27
 a0e:	af 91       	pop	r26
 a10:	9f 91       	pop	r25
 a12:	8f 91       	pop	r24
 a14:	3f 91       	pop	r19
 a16:	2f 91       	pop	r18
 a18:	0f 90       	pop	r0
 a1a:	0f be       	out	0x3f, r0	; 63
 a1c:	0f 90       	pop	r0
 a1e:	1f 90       	pop	r1
 a20:	18 95       	reti

00000a22 <micros>:
 a22:	3f b7       	in	r19, 0x3f	; 63
 a24:	f8 94       	cli
 a26:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <timer0_overflow_count>
 a2a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x1>
 a2e:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <timer0_overflow_count+0x2>
 a32:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <timer0_overflow_count+0x3>
 a36:	26 b5       	in	r18, 0x26	; 38
 a38:	a8 9b       	sbis	0x15, 0	; 21
 a3a:	05 c0       	rjmp	.+10     	; 0xa46 <micros+0x24>
 a3c:	2f 3f       	cpi	r18, 0xFF	; 255
 a3e:	19 f0       	breq	.+6      	; 0xa46 <micros+0x24>
 a40:	01 96       	adiw	r24, 0x01	; 1
 a42:	a1 1d       	adc	r26, r1
 a44:	b1 1d       	adc	r27, r1
 a46:	3f bf       	out	0x3f, r19	; 63
 a48:	ba 2f       	mov	r27, r26
 a4a:	a9 2f       	mov	r26, r25
 a4c:	98 2f       	mov	r25, r24
 a4e:	88 27       	eor	r24, r24
 a50:	82 0f       	add	r24, r18
 a52:	91 1d       	adc	r25, r1
 a54:	a1 1d       	adc	r26, r1
 a56:	b1 1d       	adc	r27, r1
 a58:	bc 01       	movw	r22, r24
 a5a:	cd 01       	movw	r24, r26
 a5c:	42 e0       	ldi	r20, 0x02	; 2
 a5e:	66 0f       	add	r22, r22
 a60:	77 1f       	adc	r23, r23
 a62:	88 1f       	adc	r24, r24
 a64:	99 1f       	adc	r25, r25
 a66:	4a 95       	dec	r20
 a68:	d1 f7       	brne	.-12     	; 0xa5e <micros+0x3c>
 a6a:	08 95       	ret

00000a6c <delay>:
 a6c:	8f 92       	push	r8
 a6e:	9f 92       	push	r9
 a70:	af 92       	push	r10
 a72:	bf 92       	push	r11
 a74:	cf 92       	push	r12
 a76:	df 92       	push	r13
 a78:	ef 92       	push	r14
 a7a:	ff 92       	push	r15
 a7c:	6b 01       	movw	r12, r22
 a7e:	7c 01       	movw	r14, r24
 a80:	0e 94 11 05 	call	0xa22	; 0xa22 <micros>
 a84:	4b 01       	movw	r8, r22
 a86:	5c 01       	movw	r10, r24
 a88:	c1 14       	cp	r12, r1
 a8a:	d1 04       	cpc	r13, r1
 a8c:	e1 04       	cpc	r14, r1
 a8e:	f1 04       	cpc	r15, r1
 a90:	01 f1       	breq	.+64     	; 0xad2 <delay+0x66>
 a92:	0e 94 88 06 	call	0xd10	; 0xd10 <yield>
 a96:	0e 94 11 05 	call	0xa22	; 0xa22 <micros>
 a9a:	dc 01       	movw	r26, r24
 a9c:	cb 01       	movw	r24, r22
 a9e:	88 19       	sub	r24, r8
 aa0:	99 09       	sbc	r25, r9
 aa2:	aa 09       	sbc	r26, r10
 aa4:	bb 09       	sbc	r27, r11
 aa6:	88 3e       	cpi	r24, 0xE8	; 232
 aa8:	93 40       	sbci	r25, 0x03	; 3
 aaa:	a1 05       	cpc	r26, r1
 aac:	b1 05       	cpc	r27, r1
 aae:	60 f3       	brcs	.-40     	; 0xa88 <delay+0x1c>
 ab0:	21 e0       	ldi	r18, 0x01	; 1
 ab2:	c2 1a       	sub	r12, r18
 ab4:	d1 08       	sbc	r13, r1
 ab6:	e1 08       	sbc	r14, r1
 ab8:	f1 08       	sbc	r15, r1
 aba:	88 ee       	ldi	r24, 0xE8	; 232
 abc:	88 0e       	add	r8, r24
 abe:	83 e0       	ldi	r24, 0x03	; 3
 ac0:	98 1e       	adc	r9, r24
 ac2:	a1 1c       	adc	r10, r1
 ac4:	b1 1c       	adc	r11, r1
 ac6:	c1 14       	cp	r12, r1
 ac8:	d1 04       	cpc	r13, r1
 aca:	e1 04       	cpc	r14, r1
 acc:	f1 04       	cpc	r15, r1
 ace:	19 f7       	brne	.-58     	; 0xa96 <delay+0x2a>
 ad0:	db cf       	rjmp	.-74     	; 0xa88 <delay+0x1c>
 ad2:	ff 90       	pop	r15
 ad4:	ef 90       	pop	r14
 ad6:	df 90       	pop	r13
 ad8:	cf 90       	pop	r12
 ada:	bf 90       	pop	r11
 adc:	af 90       	pop	r10
 ade:	9f 90       	pop	r9
 ae0:	8f 90       	pop	r8
 ae2:	08 95       	ret

00000ae4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 ae4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 ae6:	84 b5       	in	r24, 0x24	; 36
 ae8:	82 60       	ori	r24, 0x02	; 2
 aea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 aec:	84 b5       	in	r24, 0x24	; 36
 aee:	81 60       	ori	r24, 0x01	; 1
 af0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 af2:	85 b5       	in	r24, 0x25	; 37
 af4:	82 60       	ori	r24, 0x02	; 2
 af6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 af8:	85 b5       	in	r24, 0x25	; 37
 afa:	81 60       	ori	r24, 0x01	; 1
 afc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 afe:	ee e6       	ldi	r30, 0x6E	; 110
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	80 81       	ld	r24, Z
 b04:	81 60       	ori	r24, 0x01	; 1
 b06:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 b08:	e1 e8       	ldi	r30, 0x81	; 129
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 b0e:	80 81       	ld	r24, Z
 b10:	82 60       	ori	r24, 0x02	; 2
 b12:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 b14:	80 81       	ld	r24, Z
 b16:	81 60       	ori	r24, 0x01	; 1
 b18:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 b1a:	e0 e8       	ldi	r30, 0x80	; 128
 b1c:	f0 e0       	ldi	r31, 0x00	; 0
 b1e:	80 81       	ld	r24, Z
 b20:	81 60       	ori	r24, 0x01	; 1
 b22:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 b24:	e1 eb       	ldi	r30, 0xB1	; 177
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	84 60       	ori	r24, 0x04	; 4
 b2c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 b2e:	e0 eb       	ldi	r30, 0xB0	; 176
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	80 81       	ld	r24, Z
 b34:	81 60       	ori	r24, 0x01	; 1
 b36:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 b38:	ea e7       	ldi	r30, 0x7A	; 122
 b3a:	f0 e0       	ldi	r31, 0x00	; 0
 b3c:	80 81       	ld	r24, Z
 b3e:	84 60       	ori	r24, 0x04	; 4
 b40:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 b42:	80 81       	ld	r24, Z
 b44:	82 60       	ori	r24, 0x02	; 2
 b46:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 b48:	80 81       	ld	r24, Z
 b4a:	81 60       	ori	r24, 0x01	; 1
 b4c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 b4e:	80 81       	ld	r24, Z
 b50:	80 68       	ori	r24, 0x80	; 128
 b52:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 b54:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 b58:	08 95       	ret

00000b5a <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 b5a:	8e 30       	cpi	r24, 0x0E	; 14
 b5c:	08 f0       	brcs	.+2      	; 0xb60 <analogRead+0x6>
 b5e:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 b60:	87 70       	andi	r24, 0x07	; 7
 b62:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b66:	90 e4       	ldi	r25, 0x40	; 64
 b68:	29 9f       	mul	r18, r25
 b6a:	90 01       	movw	r18, r0
 b6c:	11 24       	eor	r1, r1
 b6e:	82 2b       	or	r24, r18
 b70:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 b74:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 b78:	80 64       	ori	r24, 0x40	; 64
 b7a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 b7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 b82:	86 fd       	sbrc	r24, 6
 b84:	fc cf       	rjmp	.-8      	; 0xb7e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 b86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 b8a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 b8e:	90 e0       	ldi	r25, 0x00	; 0
}
 b90:	92 2b       	or	r25, r18
 b92:	08 95       	ret

00000b94 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 b94:	83 30       	cpi	r24, 0x03	; 3
 b96:	81 f0       	breq	.+32     	; 0xbb8 <turnOffPWM+0x24>
 b98:	28 f4       	brcc	.+10     	; 0xba4 <turnOffPWM+0x10>
 b9a:	81 30       	cpi	r24, 0x01	; 1
 b9c:	99 f0       	breq	.+38     	; 0xbc4 <turnOffPWM+0x30>
 b9e:	82 30       	cpi	r24, 0x02	; 2
 ba0:	a1 f0       	breq	.+40     	; 0xbca <turnOffPWM+0x36>
 ba2:	08 95       	ret
 ba4:	87 30       	cpi	r24, 0x07	; 7
 ba6:	a9 f0       	breq	.+42     	; 0xbd2 <turnOffPWM+0x3e>
 ba8:	88 30       	cpi	r24, 0x08	; 8
 baa:	b9 f0       	breq	.+46     	; 0xbda <turnOffPWM+0x46>
 bac:	84 30       	cpi	r24, 0x04	; 4
 bae:	d1 f4       	brne	.+52     	; 0xbe4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 bb0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 bb4:	8f 7d       	andi	r24, 0xDF	; 223
 bb6:	03 c0       	rjmp	.+6      	; 0xbbe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 bb8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 bbc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 bbe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 bc2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 bc4:	84 b5       	in	r24, 0x24	; 36
 bc6:	8f 77       	andi	r24, 0x7F	; 127
 bc8:	02 c0       	rjmp	.+4      	; 0xbce <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 bca:	84 b5       	in	r24, 0x24	; 36
 bcc:	8f 7d       	andi	r24, 0xDF	; 223
 bce:	84 bd       	out	0x24, r24	; 36
 bd0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 bd2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 bd6:	8f 77       	andi	r24, 0x7F	; 127
 bd8:	03 c0       	rjmp	.+6      	; 0xbe0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 bda:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 bde:	8f 7d       	andi	r24, 0xDF	; 223
 be0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 be4:	08 95       	ret

00000be6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 be6:	cf 93       	push	r28
 be8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	fc 01       	movw	r30, r24
 bee:	e4 58       	subi	r30, 0x84	; 132
 bf0:	ff 4f       	sbci	r31, 0xFF	; 255
 bf2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 bf4:	fc 01       	movw	r30, r24
 bf6:	e0 57       	subi	r30, 0x70	; 112
 bf8:	ff 4f       	sbci	r31, 0xFF	; 255
 bfa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 bfc:	88 23       	and	r24, r24
 bfe:	61 f1       	breq	.+88     	; 0xc58 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	88 0f       	add	r24, r24
 c04:	99 1f       	adc	r25, r25
 c06:	fc 01       	movw	r30, r24
 c08:	e8 54       	subi	r30, 0x48	; 72
 c0a:	ff 4f       	sbci	r31, 0xFF	; 255
 c0c:	c5 91       	lpm	r28, Z+
 c0e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 c10:	fc 01       	movw	r30, r24
 c12:	e2 55       	subi	r30, 0x52	; 82
 c14:	ff 4f       	sbci	r31, 0xFF	; 255
 c16:	a5 91       	lpm	r26, Z+
 c18:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 c1a:	61 11       	cpse	r22, r1
 c1c:	09 c0       	rjmp	.+18     	; 0xc30 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 c1e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 c20:	f8 94       	cli
		*reg &= ~bit;
 c22:	88 81       	ld	r24, Y
 c24:	20 95       	com	r18
 c26:	82 23       	and	r24, r18
 c28:	88 83       	st	Y, r24
		*out &= ~bit;
 c2a:	ec 91       	ld	r30, X
 c2c:	2e 23       	and	r18, r30
 c2e:	0b c0       	rjmp	.+22     	; 0xc46 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 c30:	62 30       	cpi	r22, 0x02	; 2
 c32:	61 f4       	brne	.+24     	; 0xc4c <pinMode+0x66>
		uint8_t oldSREG = SREG;
 c34:	9f b7       	in	r25, 0x3f	; 63
                cli();
 c36:	f8 94       	cli
		*reg &= ~bit;
 c38:	38 81       	ld	r19, Y
 c3a:	82 2f       	mov	r24, r18
 c3c:	80 95       	com	r24
 c3e:	83 23       	and	r24, r19
 c40:	88 83       	st	Y, r24
		*out |= bit;
 c42:	ec 91       	ld	r30, X
 c44:	2e 2b       	or	r18, r30
 c46:	2c 93       	st	X, r18
		SREG = oldSREG;
 c48:	9f bf       	out	0x3f, r25	; 63
 c4a:	06 c0       	rjmp	.+12     	; 0xc58 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 c4c:	8f b7       	in	r24, 0x3f	; 63
                cli();
 c4e:	f8 94       	cli
		*reg |= bit;
 c50:	e8 81       	ld	r30, Y
 c52:	2e 2b       	or	r18, r30
 c54:	28 83       	st	Y, r18
		SREG = oldSREG;
 c56:	8f bf       	out	0x3f, r24	; 63
	}
}
 c58:	df 91       	pop	r29
 c5a:	cf 91       	pop	r28
 c5c:	08 95       	ret

00000c5e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 c5e:	1f 93       	push	r17
 c60:	cf 93       	push	r28
 c62:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 c64:	28 2f       	mov	r18, r24
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	f9 01       	movw	r30, r18
 c6a:	e8 59       	subi	r30, 0x98	; 152
 c6c:	ff 4f       	sbci	r31, 0xFF	; 255
 c6e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 c70:	f9 01       	movw	r30, r18
 c72:	e4 58       	subi	r30, 0x84	; 132
 c74:	ff 4f       	sbci	r31, 0xFF	; 255
 c76:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 c78:	f9 01       	movw	r30, r18
 c7a:	e0 57       	subi	r30, 0x70	; 112
 c7c:	ff 4f       	sbci	r31, 0xFF	; 255
 c7e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 c80:	cc 23       	and	r28, r28
 c82:	c9 f0       	breq	.+50     	; 0xcb6 <digitalWrite+0x58>
 c84:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 c86:	81 11       	cpse	r24, r1
 c88:	0e 94 ca 05 	call	0xb94	; 0xb94 <turnOffPWM>

	out = portOutputRegister(port);
 c8c:	ec 2f       	mov	r30, r28
 c8e:	f0 e0       	ldi	r31, 0x00	; 0
 c90:	ee 0f       	add	r30, r30
 c92:	ff 1f       	adc	r31, r31
 c94:	e2 55       	subi	r30, 0x52	; 82
 c96:	ff 4f       	sbci	r31, 0xFF	; 255
 c98:	a5 91       	lpm	r26, Z+
 c9a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 c9c:	8f b7       	in	r24, 0x3f	; 63
	cli();
 c9e:	f8 94       	cli

	if (val == LOW) {
 ca0:	11 11       	cpse	r17, r1
 ca2:	05 c0       	rjmp	.+10     	; 0xcae <digitalWrite+0x50>
		*out &= ~bit;
 ca4:	9c 91       	ld	r25, X
 ca6:	ed 2f       	mov	r30, r29
 ca8:	e0 95       	com	r30
 caa:	e9 23       	and	r30, r25
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <digitalWrite+0x54>
	} else {
		*out |= bit;
 cae:	ec 91       	ld	r30, X
 cb0:	ed 2b       	or	r30, r29
 cb2:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 cb4:	8f bf       	out	0x3f, r24	; 63
}
 cb6:	df 91       	pop	r29
 cb8:	cf 91       	pop	r28
 cba:	1f 91       	pop	r17
 cbc:	08 95       	ret

00000cbe <digitalRead>:

int digitalRead(uint8_t pin)
{
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 cc2:	28 2f       	mov	r18, r24
 cc4:	30 e0       	ldi	r19, 0x00	; 0
 cc6:	f9 01       	movw	r30, r18
 cc8:	e8 59       	subi	r30, 0x98	; 152
 cca:	ff 4f       	sbci	r31, 0xFF	; 255
 ccc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 cce:	f9 01       	movw	r30, r18
 cd0:	e4 58       	subi	r30, 0x84	; 132
 cd2:	ff 4f       	sbci	r31, 0xFF	; 255
 cd4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 cd6:	f9 01       	movw	r30, r18
 cd8:	e0 57       	subi	r30, 0x70	; 112
 cda:	ff 4f       	sbci	r31, 0xFF	; 255
 cdc:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 cde:	cc 23       	and	r28, r28
 ce0:	91 f0       	breq	.+36     	; 0xd06 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 ce2:	81 11       	cpse	r24, r1
 ce4:	0e 94 ca 05 	call	0xb94	; 0xb94 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 ce8:	ec 2f       	mov	r30, r28
 cea:	f0 e0       	ldi	r31, 0x00	; 0
 cec:	ee 0f       	add	r30, r30
 cee:	ff 1f       	adc	r31, r31
 cf0:	ec 55       	subi	r30, 0x5C	; 92
 cf2:	ff 4f       	sbci	r31, 0xFF	; 255
 cf4:	a5 91       	lpm	r26, Z+
 cf6:	b4 91       	lpm	r27, Z
 cf8:	ec 91       	ld	r30, X
 cfa:	ed 23       	and	r30, r29
 cfc:	81 e0       	ldi	r24, 0x01	; 1
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	21 f4       	brne	.+8      	; 0xd0a <digitalRead+0x4c>
 d02:	80 e0       	ldi	r24, 0x00	; 0
 d04:	02 c0       	rjmp	.+4      	; 0xd0a <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 d06:	80 e0       	ldi	r24, 0x00	; 0
 d08:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 d0a:	df 91       	pop	r29
 d0c:	cf 91       	pop	r28
 d0e:	08 95       	ret

00000d10 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 d10:	08 95       	ret

00000d12 <__udivmodsi4>:
 d12:	a1 e2       	ldi	r26, 0x21	; 33
 d14:	1a 2e       	mov	r1, r26
 d16:	aa 1b       	sub	r26, r26
 d18:	bb 1b       	sub	r27, r27
 d1a:	fd 01       	movw	r30, r26
 d1c:	0d c0       	rjmp	.+26     	; 0xd38 <__udivmodsi4_ep>

00000d1e <__udivmodsi4_loop>:
 d1e:	aa 1f       	adc	r26, r26
 d20:	bb 1f       	adc	r27, r27
 d22:	ee 1f       	adc	r30, r30
 d24:	ff 1f       	adc	r31, r31
 d26:	a2 17       	cp	r26, r18
 d28:	b3 07       	cpc	r27, r19
 d2a:	e4 07       	cpc	r30, r20
 d2c:	f5 07       	cpc	r31, r21
 d2e:	20 f0       	brcs	.+8      	; 0xd38 <__udivmodsi4_ep>
 d30:	a2 1b       	sub	r26, r18
 d32:	b3 0b       	sbc	r27, r19
 d34:	e4 0b       	sbc	r30, r20
 d36:	f5 0b       	sbc	r31, r21

00000d38 <__udivmodsi4_ep>:
 d38:	66 1f       	adc	r22, r22
 d3a:	77 1f       	adc	r23, r23
 d3c:	88 1f       	adc	r24, r24
 d3e:	99 1f       	adc	r25, r25
 d40:	1a 94       	dec	r1
 d42:	69 f7       	brne	.-38     	; 0xd1e <__udivmodsi4_loop>
 d44:	60 95       	com	r22
 d46:	70 95       	com	r23
 d48:	80 95       	com	r24
 d4a:	90 95       	com	r25
 d4c:	9b 01       	movw	r18, r22
 d4e:	ac 01       	movw	r20, r24
 d50:	bd 01       	movw	r22, r26
 d52:	cf 01       	movw	r24, r30
 d54:	08 95       	ret

00000d56 <__tablejump2__>:
 d56:	ee 0f       	add	r30, r30
 d58:	ff 1f       	adc	r31, r31
 d5a:	05 90       	lpm	r0, Z+
 d5c:	f4 91       	lpm	r31, Z
 d5e:	e0 2d       	mov	r30, r0
 d60:	09 94       	ijmp

00000d62 <_exit>:
 d62:	f8 94       	cli

00000d64 <__stop_program>:
 d64:	ff cf       	rjmp	.-2      	; 0xd64 <__stop_program>
