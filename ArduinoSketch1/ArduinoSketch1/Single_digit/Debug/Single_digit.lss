
Single_digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000086e  00000902  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000086e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a6  00800110  00800110  00000912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000077a4  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017aa  00000000  00000000  00008398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001665  00000000  00000000  00009b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000734  00000000  00000000  0000b1a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bf2  00000000  00000000  0000b8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d3a  00000000  00000000  0000d4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000260  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 ca 02 	jmp	0x594	; 0x594 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 00 02 	jmp	0x400	; 0x400 <__vector_18>
  4c:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	62 02       	muls	r22, r18

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ee e6       	ldi	r30, 0x6E	; 110
  d8:	f8 e0       	ldi	r31, 0x08	; 8
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a0 e1       	ldi	r26, 0x10	; 16
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a6 3b       	cpi	r26, 0xB6	; 182
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 2f 04 	call	0x85e	; 0x85e <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 90 02 	call	0x520	; 0x520 <main>
 110:	0c 94 35 04 	jmp	0x86a	; 0x86a <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <setup>:
#define button_Y 0
#define button_R 1
#define button_B 2

void setup() {
	pinMode(led_Y,OUTPUT);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pinMode>
	pinMode(button_Y, INPUT);	
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pinMode>
	pinMode(led_R,OUTPUT);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	89 e0       	ldi	r24, 0x09	; 9
 12c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pinMode>
	pinMode(button_R, INPUT);	
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pinMode>
	pinMode(led_B,OUTPUT);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pinMode>
	pinMode(button_B, INPUT);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 78 03 	call	0x6f0	; 0x6f0 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 148:	26 e0       	ldi	r18, 0x06	; 6
 14a:	40 e8       	ldi	r20, 0x80	; 128
 14c:	55 e2       	ldi	r21, 0x25	; 37
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0c 94 9b 01 	jmp	0x336	; 0x336 <_ZN14HardwareSerial5beginEmh>

0000015a <loop>:
	Serial.begin(9600);

}

void loop() {
	digitalWrite(led_Y,0);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	0e 94 b4 03 	call	0x768	; 0x768 <digitalWrite>
	digitalWrite(led_R,0);
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	89 e0       	ldi	r24, 0x09	; 9
 166:	0e 94 b4 03 	call	0x768	; 0x768 <digitalWrite>
	digitalWrite(led_B,0);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	8a e0       	ldi	r24, 0x0A	; 10
 16e:	0e 94 b4 03 	call	0x768	; 0x768 <digitalWrite>

	if (digitalRead(button_Y) == 0){
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalRead>
 178:	89 2b       	or	r24, r25
 17a:	21 f4       	brne	.+8      	; 0x184 <loop+0x2a>
		digitalWrite(led_Y,1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	0e 94 b4 03 	call	0x768	; 0x768 <digitalWrite>
	}
	if (digitalRead(button_R) == 0){
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalRead>
 18a:	89 2b       	or	r24, r25
 18c:	21 f4       	brne	.+8      	; 0x196 <loop+0x3c>
		digitalWrite(led_R,1);
 18e:	61 e0       	ldi	r22, 0x01	; 1
 190:	89 e0       	ldi	r24, 0x09	; 9
 192:	0e 94 b4 03 	call	0x768	; 0x768 <digitalWrite>
	}	
	if (digitalRead(button_B) == 0){
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <digitalRead>
 19c:	89 2b       	or	r24, r25
 19e:	21 f4       	brne	.+8      	; 0x1a8 <loop+0x4e>
		digitalWrite(led_B,1);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	8a e0       	ldi	r24, 0x0A	; 10
 1a4:	0c 94 b4 03 	jmp	0x768	; 0x768 <digitalWrite>
 1a8:	08 95       	ret

000001aa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 1aa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 1ac:	91 8d       	ldd	r25, Z+25	; 0x19
 1ae:	22 8d       	ldd	r18, Z+26	; 0x1a
 1b0:	89 2f       	mov	r24, r25
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	80 5c       	subi	r24, 0xC0	; 192
 1b6:	9f 4f       	sbci	r25, 0xFF	; 255
 1b8:	82 1b       	sub	r24, r18
 1ba:	91 09       	sbc	r25, r1
}
 1bc:	8f 73       	andi	r24, 0x3F	; 63
 1be:	99 27       	eor	r25, r25
 1c0:	08 95       	ret

000001c2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 1c2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 1c4:	91 8d       	ldd	r25, Z+25	; 0x19
 1c6:	82 8d       	ldd	r24, Z+26	; 0x1a
 1c8:	98 17       	cp	r25, r24
 1ca:	31 f0       	breq	.+12     	; 0x1d8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 1cc:	82 8d       	ldd	r24, Z+26	; 0x1a
 1ce:	e8 0f       	add	r30, r24
 1d0:	f1 1d       	adc	r31, r1
 1d2:	85 8d       	ldd	r24, Z+29	; 0x1d
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 1dc:	08 95       	ret

000001de <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 1de:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 1e0:	91 8d       	ldd	r25, Z+25	; 0x19
 1e2:	82 8d       	ldd	r24, Z+26	; 0x1a
 1e4:	98 17       	cp	r25, r24
 1e6:	61 f0       	breq	.+24     	; 0x200 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 1e8:	82 8d       	ldd	r24, Z+26	; 0x1a
 1ea:	df 01       	movw	r26, r30
 1ec:	a8 0f       	add	r26, r24
 1ee:	b1 1d       	adc	r27, r1
 1f0:	5d 96       	adiw	r26, 0x1d	; 29
 1f2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 1f4:	92 8d       	ldd	r25, Z+26	; 0x1a
 1f6:	9f 5f       	subi	r25, 0xFF	; 255
 1f8:	9f 73       	andi	r25, 0x3F	; 63
 1fa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 204:	08 95       	ret

00000206 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 206:	88 e5       	ldi	r24, 0x58	; 88
 208:	92 e0       	ldi	r25, 0x02	; 2
 20a:	89 2b       	or	r24, r25
 20c:	49 f0       	breq	.+18     	; 0x220 <_Z14serialEventRunv+0x1a>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	89 2b       	or	r24, r25
 214:	29 f0       	breq	.+10     	; 0x220 <_Z14serialEventRunv+0x1a>
 216:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_Z17Serial0_availablev>
 21a:	81 11       	cpse	r24, r1
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 220:	08 95       	ret

00000222 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 222:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 224:	84 8d       	ldd	r24, Z+28	; 0x1c
 226:	df 01       	movw	r26, r30
 228:	a8 0f       	add	r26, r24
 22a:	b1 1d       	adc	r27, r1
 22c:	a3 5a       	subi	r26, 0xA3	; 163
 22e:	bf 4f       	sbci	r27, 0xFF	; 255
 230:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 232:	84 8d       	ldd	r24, Z+28	; 0x1c
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	8f 73       	andi	r24, 0x3F	; 63
 23a:	99 27       	eor	r25, r25
 23c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 23e:	a6 89       	ldd	r26, Z+22	; 0x16
 240:	b7 89       	ldd	r27, Z+23	; 0x17
 242:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 244:	a0 89       	ldd	r26, Z+16	; 0x10
 246:	b1 89       	ldd	r27, Z+17	; 0x11
 248:	8c 91       	ld	r24, X
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 24e:	93 8d       	ldd	r25, Z+27	; 0x1b
 250:	84 8d       	ldd	r24, Z+28	; 0x1c
 252:	98 13       	cpse	r25, r24
 254:	06 c0       	rjmp	.+12     	; 0x262 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 256:	02 88       	ldd	r0, Z+18	; 0x12
 258:	f3 89       	ldd	r31, Z+19	; 0x13
 25a:	e0 2d       	mov	r30, r0
 25c:	80 81       	ld	r24, Z
 25e:	8f 7d       	andi	r24, 0xDF	; 223
 260:	80 83       	st	Z, r24
 262:	08 95       	ret

00000264 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 26a:	88 8d       	ldd	r24, Y+24	; 0x18
 26c:	88 23       	and	r24, r24
 26e:	c9 f0       	breq	.+50     	; 0x2a2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 270:	ea 89       	ldd	r30, Y+18	; 0x12
 272:	fb 89       	ldd	r31, Y+19	; 0x13
 274:	80 81       	ld	r24, Z
 276:	85 fd       	sbrc	r24, 5
 278:	05 c0       	rjmp	.+10     	; 0x284 <_ZN14HardwareSerial5flushEv+0x20>
 27a:	a8 89       	ldd	r26, Y+16	; 0x10
 27c:	b9 89       	ldd	r27, Y+17	; 0x11
 27e:	8c 91       	ld	r24, X
 280:	86 fd       	sbrc	r24, 6
 282:	0f c0       	rjmp	.+30     	; 0x2a2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	07 fc       	sbrc	r0, 7
 288:	f5 cf       	rjmp	.-22     	; 0x274 <_ZN14HardwareSerial5flushEv+0x10>
 28a:	80 81       	ld	r24, Z
 28c:	85 ff       	sbrs	r24, 5
 28e:	f2 cf       	rjmp	.-28     	; 0x274 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 290:	a8 89       	ldd	r26, Y+16	; 0x10
 292:	b9 89       	ldd	r27, Y+17	; 0x11
 294:	8c 91       	ld	r24, X
 296:	85 ff       	sbrs	r24, 5
 298:	ed cf       	rjmp	.-38     	; 0x274 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 29a:	ce 01       	movw	r24, r28
 29c:	0e 94 11 01 	call	0x222	; 0x222 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2a0:	e7 cf       	rjmp	.-50     	; 0x270 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
  _written = true;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 2ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
 2bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2be:	98 13       	cpse	r25, r24
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <_ZN14HardwareSerial5writeEh+0x24>
 2c2:	e8 89       	ldd	r30, Y+16	; 0x10
 2c4:	f9 89       	ldd	r31, Y+17	; 0x11
 2c6:	80 81       	ld	r24, Z
 2c8:	85 fd       	sbrc	r24, 5
 2ca:	24 c0       	rjmp	.+72     	; 0x314 <_ZN14HardwareSerial5writeEh+0x6c>
 2cc:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 2ce:	0b 8d       	ldd	r16, Y+27	; 0x1b
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
 2d6:	0f 73       	andi	r16, 0x3F	; 63
 2d8:	11 27       	eor	r17, r17
 2da:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 2dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 2de:	e8 12       	cpse	r14, r24
 2e0:	0c c0       	rjmp	.+24     	; 0x2fa <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	07 fc       	sbrc	r0, 7
 2e6:	fa cf       	rjmp	.-12     	; 0x2dc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 2e8:	e8 89       	ldd	r30, Y+16	; 0x10
 2ea:	f9 89       	ldd	r31, Y+17	; 0x11
 2ec:	80 81       	ld	r24, Z
 2ee:	85 ff       	sbrs	r24, 5
 2f0:	f5 cf       	rjmp	.-22     	; 0x2dc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 2f2:	ce 01       	movw	r24, r28
 2f4:	0e 94 11 01 	call	0x222	; 0x222 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 2f8:	f1 cf       	rjmp	.-30     	; 0x2dc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 2fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2fc:	fe 01       	movw	r30, r28
 2fe:	e8 0f       	add	r30, r24
 300:	f1 1d       	adc	r31, r1
 302:	e3 5a       	subi	r30, 0xA3	; 163
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 308:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 30a:	ea 89       	ldd	r30, Y+18	; 0x12
 30c:	fb 89       	ldd	r31, Y+19	; 0x13
 30e:	80 81       	ld	r24, Z
 310:	80 62       	ori	r24, 0x20	; 32
 312:	07 c0       	rjmp	.+14     	; 0x322 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 314:	ee 89       	ldd	r30, Y+22	; 0x16
 316:	ff 89       	ldd	r31, Y+23	; 0x17
 318:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 31a:	e8 89       	ldd	r30, Y+16	; 0x10
 31c:	f9 89       	ldd	r31, Y+17	; 0x11
 31e:	80 81       	ld	r24, Z
 320:	80 64       	ori	r24, 0x40	; 64
 322:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	08 95       	ret

00000336 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 336:	cf 92       	push	r12
 338:	df 92       	push	r13
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
 346:	6a 01       	movw	r12, r20
 348:	7b 01       	movw	r14, r22
 34a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 34c:	e8 89       	ldd	r30, Y+16	; 0x10
 34e:	f9 89       	ldd	r31, Y+17	; 0x11
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 354:	41 15       	cp	r20, r1
 356:	51 4e       	sbci	r21, 0xE1	; 225
 358:	61 05       	cpc	r22, r1
 35a:	71 05       	cpc	r23, r1
 35c:	b1 f0       	breq	.+44     	; 0x38a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	79 e0       	ldi	r23, 0x09	; 9
 362:	8d e3       	ldi	r24, 0x3D	; 61
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	a7 01       	movw	r20, r14
 368:	96 01       	movw	r18, r12
 36a:	0e 94 0d 04 	call	0x81a	; 0x81a <__udivmodsi4>
 36e:	da 01       	movw	r26, r20
 370:	c9 01       	movw	r24, r18
 372:	01 97       	sbiw	r24, 0x01	; 1
 374:	a1 09       	sbc	r26, r1
 376:	b1 09       	sbc	r27, r1
 378:	b6 95       	lsr	r27
 37a:	a7 95       	ror	r26
 37c:	97 95       	ror	r25
 37e:	87 95       	ror	r24
 380:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 382:	41 15       	cp	r20, r1
 384:	80 e1       	ldi	r24, 0x10	; 16
 386:	58 07       	cpc	r21, r24
 388:	a8 f0       	brcs	.+42     	; 0x3b4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 38a:	e8 89       	ldd	r30, Y+16	; 0x10
 38c:	f9 89       	ldd	r31, Y+17	; 0x11
 38e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 390:	60 e8       	ldi	r22, 0x80	; 128
 392:	74 e8       	ldi	r23, 0x84	; 132
 394:	8e e1       	ldi	r24, 0x1E	; 30
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	a7 01       	movw	r20, r14
 39a:	96 01       	movw	r18, r12
 39c:	0e 94 0d 04 	call	0x81a	; 0x81a <__udivmodsi4>
 3a0:	ba 01       	movw	r22, r20
 3a2:	a9 01       	movw	r20, r18
 3a4:	41 50       	subi	r20, 0x01	; 1
 3a6:	51 09       	sbc	r21, r1
 3a8:	61 09       	sbc	r22, r1
 3aa:	71 09       	sbc	r23, r1
 3ac:	76 95       	lsr	r23
 3ae:	67 95       	ror	r22
 3b0:	57 95       	ror	r21
 3b2:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 3b4:	ec 85       	ldd	r30, Y+12	; 0x0c
 3b6:	fd 85       	ldd	r31, Y+13	; 0x0d
 3b8:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 3ba:	ee 85       	ldd	r30, Y+14	; 0x0e
 3bc:	ff 85       	ldd	r31, Y+15	; 0x0f
 3be:	40 83       	st	Z, r20

  _written = false;
 3c0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 3c2:	ec 89       	ldd	r30, Y+20	; 0x14
 3c4:	fd 89       	ldd	r31, Y+21	; 0x15
 3c6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 3c8:	ea 89       	ldd	r30, Y+18	; 0x12
 3ca:	fb 89       	ldd	r31, Y+19	; 0x13
 3cc:	80 81       	ld	r24, Z
 3ce:	80 61       	ori	r24, 0x10	; 16
 3d0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 3d2:	ea 89       	ldd	r30, Y+18	; 0x12
 3d4:	fb 89       	ldd	r31, Y+19	; 0x13
 3d6:	80 81       	ld	r24, Z
 3d8:	88 60       	ori	r24, 0x08	; 8
 3da:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 3dc:	ea 89       	ldd	r30, Y+18	; 0x12
 3de:	fb 89       	ldd	r31, Y+19	; 0x13
 3e0:	80 81       	ld	r24, Z
 3e2:	80 68       	ori	r24, 0x80	; 128
 3e4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 3e6:	ea 89       	ldd	r30, Y+18	; 0x12
 3e8:	fb 89       	ldd	r31, Y+19	; 0x13
 3ea:	80 81       	ld	r24, Z
 3ec:	8f 7d       	andi	r24, 0xDF	; 223
 3ee:	80 83       	st	Z, r24
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	08 95       	ret

00000400 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 400:	1f 92       	push	r1
 402:	0f 92       	push	r0
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	0f 92       	push	r0
 408:	11 24       	eor	r1, r1
 40a:	2f 93       	push	r18
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 414:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end+0x10>
 418:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__data_end+0x11>
 41c:	80 81       	ld	r24, Z
 41e:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__data_end+0x16>
 422:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <__data_end+0x17>
 426:	82 fd       	sbrc	r24, 2
 428:	12 c0       	rjmp	.+36     	; 0x44e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 42a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 42c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <__data_end+0x19>
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 434:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <__data_end+0x1a>
 438:	82 17       	cp	r24, r18
 43a:	51 f0       	breq	.+20     	; 0x450 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 43c:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <__data_end+0x19>
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	e0 5f       	subi	r30, 0xF0	; 240
 444:	fe 4f       	sbci	r31, 0xFE	; 254
 446:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 448:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__data_end+0x19>
 44c:	01 c0       	rjmp	.+2      	; 0x450 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 44e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 450:	ff 91       	pop	r31
 452:	ef 91       	pop	r30
 454:	9f 91       	pop	r25
 456:	8f 91       	pop	r24
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	3f 93       	push	r19
 472:	4f 93       	push	r20
 474:	5f 93       	push	r21
 476:	6f 93       	push	r22
 478:	7f 93       	push	r23
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
 47e:	af 93       	push	r26
 480:	bf 93       	push	r27
 482:	ef 93       	push	r30
 484:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 486:	80 e1       	ldi	r24, 0x10	; 16
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 11 01 	call	0x222	; 0x222 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 48e:	ff 91       	pop	r31
 490:	ef 91       	pop	r30
 492:	bf 91       	pop	r27
 494:	af 91       	pop	r26
 496:	9f 91       	pop	r25
 498:	8f 91       	pop	r24
 49a:	7f 91       	pop	r23
 49c:	6f 91       	pop	r22
 49e:	5f 91       	pop	r21
 4a0:	4f 91       	pop	r20
 4a2:	3f 91       	pop	r19
 4a4:	2f 91       	pop	r18
 4a6:	0f 90       	pop	r0
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 4b0:	80 e1       	ldi	r24, 0x10	; 16
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN14HardwareSerial9availableEv>
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	89 2b       	or	r24, r25
 4bc:	09 f4       	brne	.+2      	; 0x4c0 <_Z17Serial0_availablev+0x10>
 4be:	20 e0       	ldi	r18, 0x00	; 0
}
 4c0:	82 2f       	mov	r24, r18
 4c2:	08 95       	ret

000004c4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 4c4:	e0 e1       	ldi	r30, 0x10	; 16
 4c6:	f1 e0       	ldi	r31, 0x01	; 1
 4c8:	13 82       	std	Z+3, r1	; 0x03
 4ca:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 4cc:	88 ee       	ldi	r24, 0xE8	; 232
 4ce:	93 e0       	ldi	r25, 0x03	; 3
 4d0:	a0 e0       	ldi	r26, 0x00	; 0
 4d2:	b0 e0       	ldi	r27, 0x00	; 0
 4d4:	84 83       	std	Z+4, r24	; 0x04
 4d6:	95 83       	std	Z+5, r25	; 0x05
 4d8:	a6 83       	std	Z+6, r26	; 0x06
 4da:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	91 e0       	ldi	r25, 0x01	; 1
 4e0:	91 83       	std	Z+1, r25	; 0x01
 4e2:	80 83       	st	Z, r24
 4e4:	85 ec       	ldi	r24, 0xC5	; 197
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	95 87       	std	Z+13, r25	; 0x0d
 4ea:	84 87       	std	Z+12, r24	; 0x0c
 4ec:	84 ec       	ldi	r24, 0xC4	; 196
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	97 87       	std	Z+15, r25	; 0x0f
 4f2:	86 87       	std	Z+14, r24	; 0x0e
 4f4:	80 ec       	ldi	r24, 0xC0	; 192
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	91 8b       	std	Z+17, r25	; 0x11
 4fa:	80 8b       	std	Z+16, r24	; 0x10
 4fc:	81 ec       	ldi	r24, 0xC1	; 193
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	93 8b       	std	Z+19, r25	; 0x13
 502:	82 8b       	std	Z+18, r24	; 0x12
 504:	82 ec       	ldi	r24, 0xC2	; 194
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	95 8b       	std	Z+21, r25	; 0x15
 50a:	84 8b       	std	Z+20, r24	; 0x14
 50c:	86 ec       	ldi	r24, 0xC6	; 198
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	97 8b       	std	Z+23, r25	; 0x17
 512:	86 8b       	std	Z+22, r24	; 0x16
 514:	11 8e       	std	Z+25, r1	; 0x19
 516:	12 8e       	std	Z+26, r1	; 0x1a
 518:	13 8e       	std	Z+27, r1	; 0x1b
 51a:	14 8e       	std	Z+28, r1	; 0x1c
 51c:	08 95       	ret

0000051e <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 51e:	08 95       	ret

00000520 <main>:

int main(void)
{
	init();
 520:	0e 94 14 03 	call	0x628	; 0x628 <init>

	initVariant();
 524:	0e 94 8f 02 	call	0x51e	; 0x51e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 528:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 52c:	c3 e0       	ldi	r28, 0x03	; 3
 52e:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 530:	0e 94 ad 00 	call	0x15a	; 0x15a <loop>
		if (serialEventRun) serialEventRun();
 534:	20 97       	sbiw	r28, 0x00	; 0
 536:	e1 f3       	breq	.-8      	; 0x530 <main+0x10>
 538:	0e 94 03 01 	call	0x206	; 0x206 <_Z14serialEventRunv>
 53c:	f9 cf       	rjmp	.-14     	; 0x530 <main+0x10>

0000053e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 53e:	cf 92       	push	r12
 540:	df 92       	push	r13
 542:	ef 92       	push	r14
 544:	ff 92       	push	r15
 546:	0f 93       	push	r16
 548:	1f 93       	push	r17
 54a:	cf 93       	push	r28
 54c:	df 93       	push	r29
 54e:	6c 01       	movw	r12, r24
 550:	7a 01       	movw	r14, r20
 552:	8b 01       	movw	r16, r22
  size_t n = 0;
 554:	c0 e0       	ldi	r28, 0x00	; 0
 556:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 558:	ce 15       	cp	r28, r14
 55a:	df 05       	cpc	r29, r15
 55c:	89 f0       	breq	.+34     	; 0x580 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 55e:	d8 01       	movw	r26, r16
 560:	6d 91       	ld	r22, X+
 562:	8d 01       	movw	r16, r26
 564:	d6 01       	movw	r26, r12
 566:	ed 91       	ld	r30, X+
 568:	fc 91       	ld	r31, X
 56a:	01 90       	ld	r0, Z+
 56c:	f0 81       	ld	r31, Z
 56e:	e0 2d       	mov	r30, r0
 570:	c6 01       	movw	r24, r12
 572:	09 95       	icall
 574:	89 2b       	or	r24, r25
 576:	11 f4       	brne	.+4      	; 0x57c <_ZN5Print5writeEPKhj+0x3e>
 578:	7e 01       	movw	r14, r28
 57a:	02 c0       	rjmp	.+4      	; 0x580 <_ZN5Print5writeEPKhj+0x42>
 57c:	21 96       	adiw	r28, 0x01	; 1
 57e:	ec cf       	rjmp	.-40     	; 0x558 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 580:	c7 01       	movw	r24, r14
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	ff 90       	pop	r15
 58c:	ef 90       	pop	r14
 58e:	df 90       	pop	r13
 590:	cf 90       	pop	r12
 592:	08 95       	ret

00000594 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 594:	1f 92       	push	r1
 596:	0f 92       	push	r0
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	0f 92       	push	r0
 59c:	11 24       	eor	r1, r1
 59e:	2f 93       	push	r18
 5a0:	3f 93       	push	r19
 5a2:	8f 93       	push	r24
 5a4:	9f 93       	push	r25
 5a6:	af 93       	push	r26
 5a8:	bf 93       	push	r27
 5aa:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <timer0_millis>
 5ae:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <timer0_millis+0x1>
 5b2:	a0 91 b0 01 	lds	r26, 0x01B0	; 0x8001b0 <timer0_millis+0x2>
 5b6:	b0 91 b1 01 	lds	r27, 0x01B1	; 0x8001b1 <timer0_millis+0x3>
 5ba:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <timer0_fract>
 5be:	23 e0       	ldi	r18, 0x03	; 3
 5c0:	23 0f       	add	r18, r19
 5c2:	2d 37       	cpi	r18, 0x7D	; 125
 5c4:	20 f4       	brcc	.+8      	; 0x5ce <__vector_16+0x3a>
 5c6:	01 96       	adiw	r24, 0x01	; 1
 5c8:	a1 1d       	adc	r26, r1
 5ca:	b1 1d       	adc	r27, r1
 5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <__vector_16+0x44>
 5ce:	26 e8       	ldi	r18, 0x86	; 134
 5d0:	23 0f       	add	r18, r19
 5d2:	02 96       	adiw	r24, 0x02	; 2
 5d4:	a1 1d       	adc	r26, r1
 5d6:	b1 1d       	adc	r27, r1
 5d8:	20 93 ad 01 	sts	0x01AD, r18	; 0x8001ad <timer0_fract>
 5dc:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <timer0_millis>
 5e0:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <timer0_millis+0x1>
 5e4:	a0 93 b0 01 	sts	0x01B0, r26	; 0x8001b0 <timer0_millis+0x2>
 5e8:	b0 93 b1 01 	sts	0x01B1, r27	; 0x8001b1 <timer0_millis+0x3>
 5ec:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <timer0_overflow_count>
 5f0:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <timer0_overflow_count+0x1>
 5f4:	a0 91 b4 01 	lds	r26, 0x01B4	; 0x8001b4 <timer0_overflow_count+0x2>
 5f8:	b0 91 b5 01 	lds	r27, 0x01B5	; 0x8001b5 <timer0_overflow_count+0x3>
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	a1 1d       	adc	r26, r1
 600:	b1 1d       	adc	r27, r1
 602:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <timer0_overflow_count>
 606:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <timer0_overflow_count+0x1>
 60a:	a0 93 b4 01 	sts	0x01B4, r26	; 0x8001b4 <timer0_overflow_count+0x2>
 60e:	b0 93 b5 01 	sts	0x01B5, r27	; 0x8001b5 <timer0_overflow_count+0x3>
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 628:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 62a:	84 b5       	in	r24, 0x24	; 36
 62c:	82 60       	ori	r24, 0x02	; 2
 62e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 630:	84 b5       	in	r24, 0x24	; 36
 632:	81 60       	ori	r24, 0x01	; 1
 634:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 636:	85 b5       	in	r24, 0x25	; 37
 638:	82 60       	ori	r24, 0x02	; 2
 63a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 63c:	85 b5       	in	r24, 0x25	; 37
 63e:	81 60       	ori	r24, 0x01	; 1
 640:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 642:	ee e6       	ldi	r30, 0x6E	; 110
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	81 60       	ori	r24, 0x01	; 1
 64a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 64c:	e1 e8       	ldi	r30, 0x81	; 129
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 652:	80 81       	ld	r24, Z
 654:	82 60       	ori	r24, 0x02	; 2
 656:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 658:	80 81       	ld	r24, Z
 65a:	81 60       	ori	r24, 0x01	; 1
 65c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 65e:	e0 e8       	ldi	r30, 0x80	; 128
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	81 60       	ori	r24, 0x01	; 1
 666:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 668:	e1 eb       	ldi	r30, 0xB1	; 177
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	80 81       	ld	r24, Z
 66e:	84 60       	ori	r24, 0x04	; 4
 670:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 672:	e0 eb       	ldi	r30, 0xB0	; 176
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	81 60       	ori	r24, 0x01	; 1
 67a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 67c:	ea e7       	ldi	r30, 0x7A	; 122
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	84 60       	ori	r24, 0x04	; 4
 684:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 686:	80 81       	ld	r24, Z
 688:	82 60       	ori	r24, 0x02	; 2
 68a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 68c:	80 81       	ld	r24, Z
 68e:	81 60       	ori	r24, 0x01	; 1
 690:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 692:	80 81       	ld	r24, Z
 694:	80 68       	ori	r24, 0x80	; 128
 696:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 698:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 69c:	08 95       	ret

0000069e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 69e:	83 30       	cpi	r24, 0x03	; 3
 6a0:	81 f0       	breq	.+32     	; 0x6c2 <turnOffPWM+0x24>
 6a2:	28 f4       	brcc	.+10     	; 0x6ae <turnOffPWM+0x10>
 6a4:	81 30       	cpi	r24, 0x01	; 1
 6a6:	99 f0       	breq	.+38     	; 0x6ce <turnOffPWM+0x30>
 6a8:	82 30       	cpi	r24, 0x02	; 2
 6aa:	a1 f0       	breq	.+40     	; 0x6d4 <turnOffPWM+0x36>
 6ac:	08 95       	ret
 6ae:	87 30       	cpi	r24, 0x07	; 7
 6b0:	a9 f0       	breq	.+42     	; 0x6dc <turnOffPWM+0x3e>
 6b2:	88 30       	cpi	r24, 0x08	; 8
 6b4:	b9 f0       	breq	.+46     	; 0x6e4 <turnOffPWM+0x46>
 6b6:	84 30       	cpi	r24, 0x04	; 4
 6b8:	d1 f4       	brne	.+52     	; 0x6ee <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 6ba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 6be:	8f 7d       	andi	r24, 0xDF	; 223
 6c0:	03 c0       	rjmp	.+6      	; 0x6c8 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 6c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 6c6:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 6c8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 6cc:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 6ce:	84 b5       	in	r24, 0x24	; 36
 6d0:	8f 77       	andi	r24, 0x7F	; 127
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 6d4:	84 b5       	in	r24, 0x24	; 36
 6d6:	8f 7d       	andi	r24, 0xDF	; 223
 6d8:	84 bd       	out	0x24, r24	; 36
 6da:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 6dc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 6e0:	8f 77       	andi	r24, 0x7F	; 127
 6e2:	03 c0       	rjmp	.+6      	; 0x6ea <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 6e4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 6e8:	8f 7d       	andi	r24, 0xDF	; 223
 6ea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 6ee:	08 95       	ret

000006f0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	fc 01       	movw	r30, r24
 6f8:	e4 58       	subi	r30, 0x84	; 132
 6fa:	ff 4f       	sbci	r31, 0xFF	; 255
 6fc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 6fe:	fc 01       	movw	r30, r24
 700:	e0 57       	subi	r30, 0x70	; 112
 702:	ff 4f       	sbci	r31, 0xFF	; 255
 704:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 706:	88 23       	and	r24, r24
 708:	61 f1       	breq	.+88     	; 0x762 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	fc 01       	movw	r30, r24
 712:	e8 54       	subi	r30, 0x48	; 72
 714:	ff 4f       	sbci	r31, 0xFF	; 255
 716:	c5 91       	lpm	r28, Z+
 718:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 71a:	fc 01       	movw	r30, r24
 71c:	e2 55       	subi	r30, 0x52	; 82
 71e:	ff 4f       	sbci	r31, 0xFF	; 255
 720:	a5 91       	lpm	r26, Z+
 722:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 724:	61 11       	cpse	r22, r1
 726:	09 c0       	rjmp	.+18     	; 0x73a <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 728:	9f b7       	in	r25, 0x3f	; 63
                cli();
 72a:	f8 94       	cli
		*reg &= ~bit;
 72c:	88 81       	ld	r24, Y
 72e:	20 95       	com	r18
 730:	82 23       	and	r24, r18
 732:	88 83       	st	Y, r24
		*out &= ~bit;
 734:	ec 91       	ld	r30, X
 736:	2e 23       	and	r18, r30
 738:	0b c0       	rjmp	.+22     	; 0x750 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 73a:	62 30       	cpi	r22, 0x02	; 2
 73c:	61 f4       	brne	.+24     	; 0x756 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 73e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 740:	f8 94       	cli
		*reg &= ~bit;
 742:	38 81       	ld	r19, Y
 744:	82 2f       	mov	r24, r18
 746:	80 95       	com	r24
 748:	83 23       	and	r24, r19
 74a:	88 83       	st	Y, r24
		*out |= bit;
 74c:	ec 91       	ld	r30, X
 74e:	2e 2b       	or	r18, r30
 750:	2c 93       	st	X, r18
		SREG = oldSREG;
 752:	9f bf       	out	0x3f, r25	; 63
 754:	06 c0       	rjmp	.+12     	; 0x762 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 756:	8f b7       	in	r24, 0x3f	; 63
                cli();
 758:	f8 94       	cli
		*reg |= bit;
 75a:	e8 81       	ld	r30, Y
 75c:	2e 2b       	or	r18, r30
 75e:	28 83       	st	Y, r18
		SREG = oldSREG;
 760:	8f bf       	out	0x3f, r24	; 63
	}
}
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	08 95       	ret

00000768 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 768:	1f 93       	push	r17
 76a:	cf 93       	push	r28
 76c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 76e:	28 2f       	mov	r18, r24
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	f9 01       	movw	r30, r18
 774:	e8 59       	subi	r30, 0x98	; 152
 776:	ff 4f       	sbci	r31, 0xFF	; 255
 778:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 77a:	f9 01       	movw	r30, r18
 77c:	e4 58       	subi	r30, 0x84	; 132
 77e:	ff 4f       	sbci	r31, 0xFF	; 255
 780:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 782:	f9 01       	movw	r30, r18
 784:	e0 57       	subi	r30, 0x70	; 112
 786:	ff 4f       	sbci	r31, 0xFF	; 255
 788:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 78a:	cc 23       	and	r28, r28
 78c:	c9 f0       	breq	.+50     	; 0x7c0 <digitalWrite+0x58>
 78e:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 790:	81 11       	cpse	r24, r1
 792:	0e 94 4f 03 	call	0x69e	; 0x69e <turnOffPWM>

	out = portOutputRegister(port);
 796:	ec 2f       	mov	r30, r28
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	ee 0f       	add	r30, r30
 79c:	ff 1f       	adc	r31, r31
 79e:	e2 55       	subi	r30, 0x52	; 82
 7a0:	ff 4f       	sbci	r31, 0xFF	; 255
 7a2:	a5 91       	lpm	r26, Z+
 7a4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 7a6:	8f b7       	in	r24, 0x3f	; 63
	cli();
 7a8:	f8 94       	cli

	if (val == LOW) {
 7aa:	11 11       	cpse	r17, r1
 7ac:	05 c0       	rjmp	.+10     	; 0x7b8 <digitalWrite+0x50>
		*out &= ~bit;
 7ae:	9c 91       	ld	r25, X
 7b0:	ed 2f       	mov	r30, r29
 7b2:	e0 95       	com	r30
 7b4:	e9 23       	and	r30, r25
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <digitalWrite+0x54>
	} else {
		*out |= bit;
 7b8:	ec 91       	ld	r30, X
 7ba:	ed 2b       	or	r30, r29
 7bc:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 7be:	8f bf       	out	0x3f, r24	; 63
}
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	08 95       	ret

000007c8 <digitalRead>:

int digitalRead(uint8_t pin)
{
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 7cc:	28 2f       	mov	r18, r24
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	f9 01       	movw	r30, r18
 7d2:	e8 59       	subi	r30, 0x98	; 152
 7d4:	ff 4f       	sbci	r31, 0xFF	; 255
 7d6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 7d8:	f9 01       	movw	r30, r18
 7da:	e4 58       	subi	r30, 0x84	; 132
 7dc:	ff 4f       	sbci	r31, 0xFF	; 255
 7de:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 7e0:	f9 01       	movw	r30, r18
 7e2:	e0 57       	subi	r30, 0x70	; 112
 7e4:	ff 4f       	sbci	r31, 0xFF	; 255
 7e6:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 7e8:	cc 23       	and	r28, r28
 7ea:	91 f0       	breq	.+36     	; 0x810 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 7ec:	81 11       	cpse	r24, r1
 7ee:	0e 94 4f 03 	call	0x69e	; 0x69e <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 7f2:	ec 2f       	mov	r30, r28
 7f4:	f0 e0       	ldi	r31, 0x00	; 0
 7f6:	ee 0f       	add	r30, r30
 7f8:	ff 1f       	adc	r31, r31
 7fa:	ec 55       	subi	r30, 0x5C	; 92
 7fc:	ff 4f       	sbci	r31, 0xFF	; 255
 7fe:	a5 91       	lpm	r26, Z+
 800:	b4 91       	lpm	r27, Z
 802:	ec 91       	ld	r30, X
 804:	ed 23       	and	r30, r29
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	21 f4       	brne	.+8      	; 0x814 <digitalRead+0x4c>
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	02 c0       	rjmp	.+4      	; 0x814 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 814:	df 91       	pop	r29
 816:	cf 91       	pop	r28
 818:	08 95       	ret

0000081a <__udivmodsi4>:
 81a:	a1 e2       	ldi	r26, 0x21	; 33
 81c:	1a 2e       	mov	r1, r26
 81e:	aa 1b       	sub	r26, r26
 820:	bb 1b       	sub	r27, r27
 822:	fd 01       	movw	r30, r26
 824:	0d c0       	rjmp	.+26     	; 0x840 <__udivmodsi4_ep>

00000826 <__udivmodsi4_loop>:
 826:	aa 1f       	adc	r26, r26
 828:	bb 1f       	adc	r27, r27
 82a:	ee 1f       	adc	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	a2 17       	cp	r26, r18
 830:	b3 07       	cpc	r27, r19
 832:	e4 07       	cpc	r30, r20
 834:	f5 07       	cpc	r31, r21
 836:	20 f0       	brcs	.+8      	; 0x840 <__udivmodsi4_ep>
 838:	a2 1b       	sub	r26, r18
 83a:	b3 0b       	sbc	r27, r19
 83c:	e4 0b       	sbc	r30, r20
 83e:	f5 0b       	sbc	r31, r21

00000840 <__udivmodsi4_ep>:
 840:	66 1f       	adc	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	1a 94       	dec	r1
 84a:	69 f7       	brne	.-38     	; 0x826 <__udivmodsi4_loop>
 84c:	60 95       	com	r22
 84e:	70 95       	com	r23
 850:	80 95       	com	r24
 852:	90 95       	com	r25
 854:	9b 01       	movw	r18, r22
 856:	ac 01       	movw	r20, r24
 858:	bd 01       	movw	r22, r26
 85a:	cf 01       	movw	r24, r30
 85c:	08 95       	ret

0000085e <__tablejump2__>:
 85e:	ee 0f       	add	r30, r30
 860:	ff 1f       	adc	r31, r31
 862:	05 90       	lpm	r0, Z+
 864:	f4 91       	lpm	r31, Z
 866:	e0 2d       	mov	r30, r0
 868:	09 94       	ijmp

0000086a <_exit>:
 86a:	f8 94       	cli

0000086c <__stop_program>:
 86c:	ff cf       	rjmp	.-2      	; 0x86c <__stop_program>
