
Single_digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000b04  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800110  00800110  00000ba8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007ac5  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000183d  00000000  00000000  0000896d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e8  00000000  00000000  0000a1aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000764  00000000  00000000  0000b994  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bfc  00000000  00000000  0000c0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002df1  00000000  00000000  0000dcf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  00010ae5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__vector_18>
  4c:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	4b 03       	fmul	r20, r19

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e4 e0       	ldi	r30, 0x04	; 4
  d8:	fb e0       	ldi	r31, 0x0B	; 11
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a0 e1       	ldi	r26, 0x10	; 16
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a8 3b       	cpi	r26, 0xB8	; 184
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <main>
 110:	0c 94 80 05 	jmp	0xb00	; 0xb00 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <setup>:
#define button_Y 0
#define button_R 1
#define button_B 2

void setup() {
	pinMode(led_Y,OUTPUT);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	0e 94 c2 04 	call	0x984	; 0x984 <pinMode>
	pinMode(button_Y, INPUT);	
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 c2 04 	call	0x984	; 0x984 <pinMode>
	pinMode(led_R,OUTPUT);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	89 e0       	ldi	r24, 0x09	; 9
 12c:	0e 94 c2 04 	call	0x984	; 0x984 <pinMode>
	pinMode(button_R, INPUT);	
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 c2 04 	call	0x984	; 0x984 <pinMode>
	pinMode(led_B,OUTPUT);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	0e 94 c2 04 	call	0x984	; 0x984 <pinMode>
	pinMode(button_B, INPUT);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 c2 04 	call	0x984	; 0x984 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 148:	26 e0       	ldi	r18, 0x06	; 6
 14a:	40 e8       	ldi	r20, 0x80	; 128
 14c:	55 e2       	ldi	r21, 0x25	; 37
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	82 e1       	ldi	r24, 0x12	; 18
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0c 94 84 02 	jmp	0x508	; 0x508 <_ZN14HardwareSerial5beginEmh>

0000015a <loop>:
	Serial.begin(9600);
}

void loop() {
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
	static int i = 0;
	//Clear LEDs
	digitalWrite(led_Y,0);
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
	digitalWrite(led_R,0);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	89 e0       	ldi	r24, 0x09	; 9
 16a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
	digitalWrite(led_B,0);
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
	// Keep the LED alive
	if (i == 0){
 176:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 17a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 17e:	89 2b       	or	r24, r25
 180:	21 f4       	brne	.+8      	; 0x18a <loop+0x30>
		digitalWrite(led_Y,1);
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	88 e0       	ldi	r24, 0x08	; 8
 186:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
	}
	if (i == 1){
 18a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 18e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	21 f4       	brne	.+8      	; 0x19e <loop+0x44>
		digitalWrite(led_R,1);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	89 e0       	ldi	r24, 0x09	; 9
 19a:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
	}	
	if (i == 2){
 19e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1a2:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1a6:	02 97       	sbiw	r24, 0x02	; 2
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <loop+0x58>
		digitalWrite(led_B,1);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
	}
	
	// All combinations for where you and the elevetor are
	// 3s delay for one floor, 6s delay for two floors
	if (digitalRead(button_Y) == 0 && i == 2){
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	0e 94 2e 05 	call	0xa5c	; 0xa5c <digitalRead>
 1b8:	89 2b       	or	r24, r25
 1ba:	89 f5       	brne	.+98     	; 0x21e <loop+0xc4>
 1bc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1c0:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1c4:	02 97       	sbiw	r24, 0x02	; 2
 1c6:	59 f5       	brne	.+86     	; 0x21e <loop+0xc4>
		i = 0;
 1c8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 1cc:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		digitalWrite(led_Y,1);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
 1d8:	c4 e6       	ldi	r28, 0x64	; 100
 1da:	d0 e0       	ldi	r29, 0x00	; 0
		for (int jx = 0; jx <100; jx++){
			if (digitalRead(button_R) == 0){
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	0e 94 2e 05 	call	0xa5c	; 0xa5c <digitalRead>
 1e2:	89 2b       	or	r24, r25
 1e4:	71 f4       	brne	.+28     	; 0x202 <loop+0xa8>
				digitalWrite(led_R,1);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	89 e0       	ldi	r24, 0x09	; 9
 1ea:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
				delay(1000);
 1ee:	68 ee       	ldi	r22, 0xE8	; 232
 1f0:	73 e0       	ldi	r23, 0x03	; 3
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 22 04 	call	0x844	; 0x844 <delay>
				digitalWrite(led_B,0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
			}
			delay(30);
 202:	6e e1       	ldi	r22, 0x1E	; 30
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 22 04 	call	0x844	; 0x844 <delay>
 20e:	21 97       	sbiw	r28, 0x01	; 1
	// All combinations for where you and the elevetor are
	// 3s delay for one floor, 6s delay for two floors
	if (digitalRead(button_Y) == 0 && i == 2){
		i = 0;
		digitalWrite(led_Y,1);
		for (int jx = 0; jx <100; jx++){
 210:	29 f7       	brne	.-54     	; 0x1dc <loop+0x82>
				delay(1000);
				digitalWrite(led_B,0);
			}
			delay(30);
		}
		delay(3000);
 212:	68 eb       	ldi	r22, 0xB8	; 184
 214:	7b e0       	ldi	r23, 0x0B	; 11
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 22 04 	call	0x844	; 0x844 <delay>
	}
	if (digitalRead(button_Y) == 0 && i == 1){
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 2e 05 	call	0xa5c	; 0xa5c <digitalRead>
 224:	89 2b       	or	r24, r25
 226:	39 f4       	brne	.+14     	; 0x236 <loop+0xdc>
 228:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 22c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	09 f4       	brne	.+2      	; 0x236 <loop+0xdc>
 234:	6f c0       	rjmp	.+222    	; 0x314 <loop+0x1ba>
		i = 0;
		digitalWrite(led_Y,1);
		delay(3000);
	}
	if (digitalRead(button_R) == 0 && i == 0){
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 2e 05 	call	0xa5c	; 0xa5c <digitalRead>
 23c:	89 2b       	or	r24, r25
 23e:	39 f4       	brne	.+14     	; 0x24e <loop+0xf4>
 240:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 244:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 248:	89 2b       	or	r24, r25
 24a:	09 f4       	brne	.+2      	; 0x24e <loop+0xf4>
 24c:	72 c0       	rjmp	.+228    	; 0x332 <loop+0x1d8>
		i = 1;
		digitalWrite(led_R,1);
		delay(3000);
	}
	if (digitalRead(button_R) == 0 && i == 2){
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 2e 05 	call	0xa5c	; 0xa5c <digitalRead>
 254:	89 2b       	or	r24, r25
 256:	39 f4       	brne	.+14     	; 0x266 <loop+0x10c>
 258:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 25c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 260:	02 97       	sbiw	r24, 0x02	; 2
 262:	09 f4       	brne	.+2      	; 0x266 <loop+0x10c>
 264:	77 c0       	rjmp	.+238    	; 0x354 <loop+0x1fa>
		i = 1;
		digitalWrite(led_R,1);
		delay(3000);
	}
	if (digitalRead(button_B) == 0 && i == 0){
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	0e 94 2e 05 	call	0xa5c	; 0xa5c <digitalRead>
 26c:	89 2b       	or	r24, r25
 26e:	99 f5       	brne	.+102    	; 0x2d6 <loop+0x17c>
 270:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 274:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 278:	89 2b       	or	r24, r25
 27a:	69 f5       	brne	.+90     	; 0x2d6 <loop+0x17c>
		i = 2;
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 284:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		digitalWrite(led_B,1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	8a e0       	ldi	r24, 0x0A	; 10
 28c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
 290:	c4 e6       	ldi	r28, 0x64	; 100
 292:	d0 e0       	ldi	r29, 0x00	; 0
		for (int jx = 0; jx <100; jx++){
			if (digitalRead(button_R) == 0){
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 2e 05 	call	0xa5c	; 0xa5c <digitalRead>
 29a:	89 2b       	or	r24, r25
 29c:	71 f4       	brne	.+28     	; 0x2ba <loop+0x160>
				digitalWrite(led_R,1);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	89 e0       	ldi	r24, 0x09	; 9
 2a2:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
				delay(1000);
 2a6:	68 ee       	ldi	r22, 0xE8	; 232
 2a8:	73 e0       	ldi	r23, 0x03	; 3
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 22 04 	call	0x844	; 0x844 <delay>
				digitalWrite(led_Y,0);
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	88 e0       	ldi	r24, 0x08	; 8
 2b6:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
			}
			delay(30);
 2ba:	6e e1       	ldi	r22, 0x1E	; 30
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 22 04 	call	0x844	; 0x844 <delay>
 2c6:	21 97       	sbiw	r28, 0x01	; 1
		delay(3000);
	}
	if (digitalRead(button_B) == 0 && i == 0){
		i = 2;
		digitalWrite(led_B,1);
		for (int jx = 0; jx <100; jx++){
 2c8:	29 f7       	brne	.-54     	; 0x294 <loop+0x13a>
				delay(1000);
				digitalWrite(led_Y,0);
			}
			delay(30);
		}
		delay(3000);
 2ca:	68 eb       	ldi	r22, 0xB8	; 184
 2cc:	7b e0       	ldi	r23, 0x0B	; 11
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 22 04 	call	0x844	; 0x844 <delay>
	}
	if (digitalRead(button_B) == 0 && i == 1){
 2d6:	82 e0       	ldi	r24, 0x02	; 2
 2d8:	0e 94 2e 05 	call	0xa5c	; 0xa5c <digitalRead>
 2dc:	89 2b       	or	r24, r25
 2de:	09 f0       	breq	.+2      	; 0x2e2 <loop+0x188>
 2e0:	4a c0       	rjmp	.+148    	; 0x376 <loop+0x21c>
 2e2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2e6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <loop+0x196>
 2ee:	43 c0       	rjmp	.+134    	; 0x376 <loop+0x21c>
		i = 2;
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 2f8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		digitalWrite(led_B,1);
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
		delay(3000);
 304:	68 eb       	ldi	r22, 0xB8	; 184
 306:	7b e0       	ldi	r23, 0x0B	; 11
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
	}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
		delay(3000);
	}
	if (digitalRead(button_B) == 0 && i == 1){
		i = 2;
		digitalWrite(led_B,1);
		delay(3000);
 310:	0c 94 22 04 	jmp	0x844	; 0x844 <delay>
			delay(30);
		}
		delay(3000);
	}
	if (digitalRead(button_Y) == 0 && i == 1){
		i = 0;
 314:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 318:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		digitalWrite(led_Y,1);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	88 e0       	ldi	r24, 0x08	; 8
 320:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
		delay(3000);
 324:	68 eb       	ldi	r22, 0xB8	; 184
 326:	7b e0       	ldi	r23, 0x0B	; 11
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 22 04 	call	0x844	; 0x844 <delay>
 330:	82 cf       	rjmp	.-252    	; 0x236 <loop+0xdc>
	}
	if (digitalRead(button_R) == 0 && i == 0){
		i = 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 33a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		digitalWrite(led_R,1);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	89 e0       	ldi	r24, 0x09	; 9
 342:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
		delay(3000);
 346:	68 eb       	ldi	r22, 0xB8	; 184
 348:	7b e0       	ldi	r23, 0x0B	; 11
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 22 04 	call	0x844	; 0x844 <delay>
 352:	7d cf       	rjmp	.-262    	; 0x24e <loop+0xf4>
	}
	if (digitalRead(button_R) == 0 && i == 2){
		i = 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 35c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		digitalWrite(led_R,1);
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	89 e0       	ldi	r24, 0x09	; 9
 364:	0e 94 fe 04 	call	0x9fc	; 0x9fc <digitalWrite>
		delay(3000);
 368:	68 eb       	ldi	r22, 0xB8	; 184
 36a:	7b e0       	ldi	r23, 0x0B	; 11
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 22 04 	call	0x844	; 0x844 <delay>
 374:	78 cf       	rjmp	.-272    	; 0x266 <loop+0x10c>
	if (digitalRead(button_B) == 0 && i == 1){
		i = 2;
		digitalWrite(led_B,1);
		delay(3000);
	}
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

0000037c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 37c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 37e:	91 8d       	ldd	r25, Z+25	; 0x19
 380:	22 8d       	ldd	r18, Z+26	; 0x1a
 382:	89 2f       	mov	r24, r25
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	80 5c       	subi	r24, 0xC0	; 192
 388:	9f 4f       	sbci	r25, 0xFF	; 255
 38a:	82 1b       	sub	r24, r18
 38c:	91 09       	sbc	r25, r1
}
 38e:	8f 73       	andi	r24, 0x3F	; 63
 390:	99 27       	eor	r25, r25
 392:	08 95       	ret

00000394 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 394:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 396:	91 8d       	ldd	r25, Z+25	; 0x19
 398:	82 8d       	ldd	r24, Z+26	; 0x1a
 39a:	98 17       	cp	r25, r24
 39c:	31 f0       	breq	.+12     	; 0x3aa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 39e:	82 8d       	ldd	r24, Z+26	; 0x1a
 3a0:	e8 0f       	add	r30, r24
 3a2:	f1 1d       	adc	r31, r1
 3a4:	85 8d       	ldd	r24, Z+29	; 0x1d
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 3ae:	08 95       	ret

000003b0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 3b0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 3b2:	91 8d       	ldd	r25, Z+25	; 0x19
 3b4:	82 8d       	ldd	r24, Z+26	; 0x1a
 3b6:	98 17       	cp	r25, r24
 3b8:	61 f0       	breq	.+24     	; 0x3d2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 3ba:	82 8d       	ldd	r24, Z+26	; 0x1a
 3bc:	df 01       	movw	r26, r30
 3be:	a8 0f       	add	r26, r24
 3c0:	b1 1d       	adc	r27, r1
 3c2:	5d 96       	adiw	r26, 0x1d	; 29
 3c4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 3c6:	92 8d       	ldd	r25, Z+26	; 0x1a
 3c8:	9f 5f       	subi	r25, 0xFF	; 255
 3ca:	9f 73       	andi	r25, 0x3F	; 63
 3cc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 3d6:	08 95       	ret

000003d8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 3d8:	81 e4       	ldi	r24, 0x41	; 65
 3da:	93 e0       	ldi	r25, 0x03	; 3
 3dc:	89 2b       	or	r24, r25
 3de:	49 f0       	breq	.+18     	; 0x3f2 <_Z14serialEventRunv+0x1a>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	89 2b       	or	r24, r25
 3e6:	29 f0       	breq	.+10     	; 0x3f2 <_Z14serialEventRunv+0x1a>
 3e8:	0e 94 41 03 	call	0x682	; 0x682 <_Z17Serial0_availablev>
 3ec:	81 11       	cpse	r24, r1
 3ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 3f2:	08 95       	ret

000003f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3f4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3f6:	84 8d       	ldd	r24, Z+28	; 0x1c
 3f8:	df 01       	movw	r26, r30
 3fa:	a8 0f       	add	r26, r24
 3fc:	b1 1d       	adc	r27, r1
 3fe:	a3 5a       	subi	r26, 0xA3	; 163
 400:	bf 4f       	sbci	r27, 0xFF	; 255
 402:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 404:	84 8d       	ldd	r24, Z+28	; 0x1c
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	8f 73       	andi	r24, 0x3F	; 63
 40c:	99 27       	eor	r25, r25
 40e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 410:	a6 89       	ldd	r26, Z+22	; 0x16
 412:	b7 89       	ldd	r27, Z+23	; 0x17
 414:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 416:	a0 89       	ldd	r26, Z+16	; 0x10
 418:	b1 89       	ldd	r27, Z+17	; 0x11
 41a:	8c 91       	ld	r24, X
 41c:	80 64       	ori	r24, 0x40	; 64
 41e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 420:	93 8d       	ldd	r25, Z+27	; 0x1b
 422:	84 8d       	ldd	r24, Z+28	; 0x1c
 424:	98 13       	cpse	r25, r24
 426:	06 c0       	rjmp	.+12     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 428:	02 88       	ldd	r0, Z+18	; 0x12
 42a:	f3 89       	ldd	r31, Z+19	; 0x13
 42c:	e0 2d       	mov	r30, r0
 42e:	80 81       	ld	r24, Z
 430:	8f 7d       	andi	r24, 0xDF	; 223
 432:	80 83       	st	Z, r24
 434:	08 95       	ret

00000436 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 43c:	88 8d       	ldd	r24, Y+24	; 0x18
 43e:	88 23       	and	r24, r24
 440:	c9 f0       	breq	.+50     	; 0x474 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 442:	ea 89       	ldd	r30, Y+18	; 0x12
 444:	fb 89       	ldd	r31, Y+19	; 0x13
 446:	80 81       	ld	r24, Z
 448:	85 fd       	sbrc	r24, 5
 44a:	05 c0       	rjmp	.+10     	; 0x456 <_ZN14HardwareSerial5flushEv+0x20>
 44c:	a8 89       	ldd	r26, Y+16	; 0x10
 44e:	b9 89       	ldd	r27, Y+17	; 0x11
 450:	8c 91       	ld	r24, X
 452:	86 fd       	sbrc	r24, 6
 454:	0f c0       	rjmp	.+30     	; 0x474 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	07 fc       	sbrc	r0, 7
 45a:	f5 cf       	rjmp	.-22     	; 0x446 <_ZN14HardwareSerial5flushEv+0x10>
 45c:	80 81       	ld	r24, Z
 45e:	85 ff       	sbrs	r24, 5
 460:	f2 cf       	rjmp	.-28     	; 0x446 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 462:	a8 89       	ldd	r26, Y+16	; 0x10
 464:	b9 89       	ldd	r27, Y+17	; 0x11
 466:	8c 91       	ld	r24, X
 468:	85 ff       	sbrs	r24, 5
 46a:	ed cf       	rjmp	.-38     	; 0x446 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 46c:	ce 01       	movw	r24, r28
 46e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 472:	e7 cf       	rjmp	.-50     	; 0x442 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	08 95       	ret

0000047a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	ec 01       	movw	r28, r24
  _written = true;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 48c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 48e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 490:	98 13       	cpse	r25, r24
 492:	05 c0       	rjmp	.+10     	; 0x49e <_ZN14HardwareSerial5writeEh+0x24>
 494:	e8 89       	ldd	r30, Y+16	; 0x10
 496:	f9 89       	ldd	r31, Y+17	; 0x11
 498:	80 81       	ld	r24, Z
 49a:	85 fd       	sbrc	r24, 5
 49c:	24 c0       	rjmp	.+72     	; 0x4e6 <_ZN14HardwareSerial5writeEh+0x6c>
 49e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 4a0:	0b 8d       	ldd	r16, Y+27	; 0x1b
 4a2:	10 e0       	ldi	r17, 0x00	; 0
 4a4:	0f 5f       	subi	r16, 0xFF	; 255
 4a6:	1f 4f       	sbci	r17, 0xFF	; 255
 4a8:	0f 73       	andi	r16, 0x3F	; 63
 4aa:	11 27       	eor	r17, r17
 4ac:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 4ae:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4b0:	e8 12       	cpse	r14, r24
 4b2:	0c c0       	rjmp	.+24     	; 0x4cc <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	07 fc       	sbrc	r0, 7
 4b8:	fa cf       	rjmp	.-12     	; 0x4ae <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 4ba:	e8 89       	ldd	r30, Y+16	; 0x10
 4bc:	f9 89       	ldd	r31, Y+17	; 0x11
 4be:	80 81       	ld	r24, Z
 4c0:	85 ff       	sbrs	r24, 5
 4c2:	f5 cf       	rjmp	.-22     	; 0x4ae <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 4c4:	ce 01       	movw	r24, r28
 4c6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4ca:	f1 cf       	rjmp	.-30     	; 0x4ae <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 4cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
 4ce:	fe 01       	movw	r30, r28
 4d0:	e8 0f       	add	r30, r24
 4d2:	f1 1d       	adc	r31, r1
 4d4:	e3 5a       	subi	r30, 0xA3	; 163
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 4da:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 4dc:	ea 89       	ldd	r30, Y+18	; 0x12
 4de:	fb 89       	ldd	r31, Y+19	; 0x13
 4e0:	80 81       	ld	r24, Z
 4e2:	80 62       	ori	r24, 0x20	; 32
 4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 4e6:	ee 89       	ldd	r30, Y+22	; 0x16
 4e8:	ff 89       	ldd	r31, Y+23	; 0x17
 4ea:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 4ec:	e8 89       	ldd	r30, Y+16	; 0x10
 4ee:	f9 89       	ldd	r31, Y+17	; 0x11
 4f0:	80 81       	ld	r24, Z
 4f2:	80 64       	ori	r24, 0x40	; 64
 4f4:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	08 95       	ret

00000508 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 508:	cf 92       	push	r12
 50a:	df 92       	push	r13
 50c:	ef 92       	push	r14
 50e:	ff 92       	push	r15
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
 516:	ec 01       	movw	r28, r24
 518:	6a 01       	movw	r12, r20
 51a:	7b 01       	movw	r14, r22
 51c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 51e:	e8 89       	ldd	r30, Y+16	; 0x10
 520:	f9 89       	ldd	r31, Y+17	; 0x11
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 526:	41 15       	cp	r20, r1
 528:	51 4e       	sbci	r21, 0xE1	; 225
 52a:	61 05       	cpc	r22, r1
 52c:	71 05       	cpc	r23, r1
 52e:	b1 f0       	breq	.+44     	; 0x55c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	79 e0       	ldi	r23, 0x09	; 9
 534:	8d e3       	ldi	r24, 0x3D	; 61
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	a7 01       	movw	r20, r14
 53a:	96 01       	movw	r18, r12
 53c:	0e 94 58 05 	call	0xab0	; 0xab0 <__udivmodsi4>
 540:	da 01       	movw	r26, r20
 542:	c9 01       	movw	r24, r18
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	a1 09       	sbc	r26, r1
 548:	b1 09       	sbc	r27, r1
 54a:	b6 95       	lsr	r27
 54c:	a7 95       	ror	r26
 54e:	97 95       	ror	r25
 550:	87 95       	ror	r24
 552:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 554:	41 15       	cp	r20, r1
 556:	80 e1       	ldi	r24, 0x10	; 16
 558:	58 07       	cpc	r21, r24
 55a:	a8 f0       	brcs	.+42     	; 0x586 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 55c:	e8 89       	ldd	r30, Y+16	; 0x10
 55e:	f9 89       	ldd	r31, Y+17	; 0x11
 560:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 562:	60 e8       	ldi	r22, 0x80	; 128
 564:	74 e8       	ldi	r23, 0x84	; 132
 566:	8e e1       	ldi	r24, 0x1E	; 30
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	a7 01       	movw	r20, r14
 56c:	96 01       	movw	r18, r12
 56e:	0e 94 58 05 	call	0xab0	; 0xab0 <__udivmodsi4>
 572:	ba 01       	movw	r22, r20
 574:	a9 01       	movw	r20, r18
 576:	41 50       	subi	r20, 0x01	; 1
 578:	51 09       	sbc	r21, r1
 57a:	61 09       	sbc	r22, r1
 57c:	71 09       	sbc	r23, r1
 57e:	76 95       	lsr	r23
 580:	67 95       	ror	r22
 582:	57 95       	ror	r21
 584:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 586:	ec 85       	ldd	r30, Y+12	; 0x0c
 588:	fd 85       	ldd	r31, Y+13	; 0x0d
 58a:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 58c:	ee 85       	ldd	r30, Y+14	; 0x0e
 58e:	ff 85       	ldd	r31, Y+15	; 0x0f
 590:	40 83       	st	Z, r20

  _written = false;
 592:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 594:	ec 89       	ldd	r30, Y+20	; 0x14
 596:	fd 89       	ldd	r31, Y+21	; 0x15
 598:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 59a:	ea 89       	ldd	r30, Y+18	; 0x12
 59c:	fb 89       	ldd	r31, Y+19	; 0x13
 59e:	80 81       	ld	r24, Z
 5a0:	80 61       	ori	r24, 0x10	; 16
 5a2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 5a4:	ea 89       	ldd	r30, Y+18	; 0x12
 5a6:	fb 89       	ldd	r31, Y+19	; 0x13
 5a8:	80 81       	ld	r24, Z
 5aa:	88 60       	ori	r24, 0x08	; 8
 5ac:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 5ae:	ea 89       	ldd	r30, Y+18	; 0x12
 5b0:	fb 89       	ldd	r31, Y+19	; 0x13
 5b2:	80 81       	ld	r24, Z
 5b4:	80 68       	ori	r24, 0x80	; 128
 5b6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 5b8:	ea 89       	ldd	r30, Y+18	; 0x12
 5ba:	fb 89       	ldd	r31, Y+19	; 0x13
 5bc:	80 81       	ld	r24, Z
 5be:	8f 7d       	andi	r24, 0xDF	; 223
 5c0:	80 83       	st	Z, r24
}
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	cf 90       	pop	r12
 5d0:	08 95       	ret

000005d2 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	2f 93       	push	r18
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	ef 93       	push	r30
 5e4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5e6:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <Serial+0x10>
 5ea:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <Serial+0x11>
 5ee:	80 81       	ld	r24, Z
 5f0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Serial+0x16>
 5f4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Serial+0x17>
 5f8:	82 fd       	sbrc	r24, 2
 5fa:	12 c0       	rjmp	.+36     	; 0x620 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5fc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5fe:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Serial+0x19>
 602:	8f 5f       	subi	r24, 0xFF	; 255
 604:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 606:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <Serial+0x1a>
 60a:	82 17       	cp	r24, r18
 60c:	51 f0       	breq	.+20     	; 0x622 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 60e:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <Serial+0x19>
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	ee 5e       	subi	r30, 0xEE	; 238
 616:	fe 4f       	sbci	r31, 0xFE	; 254
 618:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 61a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Serial+0x19>
 61e:	01 c0       	rjmp	.+2      	; 0x622 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 620:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 622:	ff 91       	pop	r31
 624:	ef 91       	pop	r30
 626:	9f 91       	pop	r25
 628:	8f 91       	pop	r24
 62a:	2f 91       	pop	r18
 62c:	0f 90       	pop	r0
 62e:	0f be       	out	0x3f, r0	; 63
 630:	0f 90       	pop	r0
 632:	1f 90       	pop	r1
 634:	18 95       	reti

00000636 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 636:	1f 92       	push	r1
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	0f 92       	push	r0
 63e:	11 24       	eor	r1, r1
 640:	2f 93       	push	r18
 642:	3f 93       	push	r19
 644:	4f 93       	push	r20
 646:	5f 93       	push	r21
 648:	6f 93       	push	r22
 64a:	7f 93       	push	r23
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
 650:	af 93       	push	r26
 652:	bf 93       	push	r27
 654:	ef 93       	push	r30
 656:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 658:	82 e1       	ldi	r24, 0x12	; 18
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 660:	ff 91       	pop	r31
 662:	ef 91       	pop	r30
 664:	bf 91       	pop	r27
 666:	af 91       	pop	r26
 668:	9f 91       	pop	r25
 66a:	8f 91       	pop	r24
 66c:	7f 91       	pop	r23
 66e:	6f 91       	pop	r22
 670:	5f 91       	pop	r21
 672:	4f 91       	pop	r20
 674:	3f 91       	pop	r19
 676:	2f 91       	pop	r18
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 682:	82 e1       	ldi	r24, 0x12	; 18
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	0e 94 be 01 	call	0x37c	; 0x37c <_ZN14HardwareSerial9availableEv>
 68a:	21 e0       	ldi	r18, 0x01	; 1
 68c:	89 2b       	or	r24, r25
 68e:	09 f4       	brne	.+2      	; 0x692 <_Z17Serial0_availablev+0x10>
 690:	20 e0       	ldi	r18, 0x00	; 0
}
 692:	82 2f       	mov	r24, r18
 694:	08 95       	ret

00000696 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 696:	e2 e1       	ldi	r30, 0x12	; 18
 698:	f1 e0       	ldi	r31, 0x01	; 1
 69a:	13 82       	std	Z+3, r1	; 0x03
 69c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 69e:	88 ee       	ldi	r24, 0xE8	; 232
 6a0:	93 e0       	ldi	r25, 0x03	; 3
 6a2:	a0 e0       	ldi	r26, 0x00	; 0
 6a4:	b0 e0       	ldi	r27, 0x00	; 0
 6a6:	84 83       	std	Z+4, r24	; 0x04
 6a8:	95 83       	std	Z+5, r25	; 0x05
 6aa:	a6 83       	std	Z+6, r26	; 0x06
 6ac:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 6ae:	84 e0       	ldi	r24, 0x04	; 4
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	91 83       	std	Z+1, r25	; 0x01
 6b4:	80 83       	st	Z, r24
 6b6:	85 ec       	ldi	r24, 0xC5	; 197
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	95 87       	std	Z+13, r25	; 0x0d
 6bc:	84 87       	std	Z+12, r24	; 0x0c
 6be:	84 ec       	ldi	r24, 0xC4	; 196
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	97 87       	std	Z+15, r25	; 0x0f
 6c4:	86 87       	std	Z+14, r24	; 0x0e
 6c6:	80 ec       	ldi	r24, 0xC0	; 192
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	91 8b       	std	Z+17, r25	; 0x11
 6cc:	80 8b       	std	Z+16, r24	; 0x10
 6ce:	81 ec       	ldi	r24, 0xC1	; 193
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	93 8b       	std	Z+19, r25	; 0x13
 6d4:	82 8b       	std	Z+18, r24	; 0x12
 6d6:	82 ec       	ldi	r24, 0xC2	; 194
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	95 8b       	std	Z+21, r25	; 0x15
 6dc:	84 8b       	std	Z+20, r24	; 0x14
 6de:	86 ec       	ldi	r24, 0xC6	; 198
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	97 8b       	std	Z+23, r25	; 0x17
 6e4:	86 8b       	std	Z+22, r24	; 0x16
 6e6:	11 8e       	std	Z+25, r1	; 0x19
 6e8:	12 8e       	std	Z+26, r1	; 0x1a
 6ea:	13 8e       	std	Z+27, r1	; 0x1b
 6ec:	14 8e       	std	Z+28, r1	; 0x1c
 6ee:	08 95       	ret

000006f0 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 6f0:	08 95       	ret

000006f2 <main>:

int main(void)
{
	init();
 6f2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <init>

	initVariant();
 6f6:	0e 94 78 03 	call	0x6f0	; 0x6f0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 6fa:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 6fe:	cc ee       	ldi	r28, 0xEC	; 236
 700:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 702:	0e 94 ad 00 	call	0x15a	; 0x15a <loop>
		if (serialEventRun) serialEventRun();
 706:	20 97       	sbiw	r28, 0x00	; 0
 708:	e1 f3       	breq	.-8      	; 0x702 <main+0x10>
 70a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_Z14serialEventRunv>
 70e:	f9 cf       	rjmp	.-14     	; 0x702 <main+0x10>

00000710 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 710:	cf 92       	push	r12
 712:	df 92       	push	r13
 714:	ef 92       	push	r14
 716:	ff 92       	push	r15
 718:	0f 93       	push	r16
 71a:	1f 93       	push	r17
 71c:	cf 93       	push	r28
 71e:	df 93       	push	r29
 720:	6c 01       	movw	r12, r24
 722:	7a 01       	movw	r14, r20
 724:	8b 01       	movw	r16, r22
  size_t n = 0;
 726:	c0 e0       	ldi	r28, 0x00	; 0
 728:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 72a:	ce 15       	cp	r28, r14
 72c:	df 05       	cpc	r29, r15
 72e:	89 f0       	breq	.+34     	; 0x752 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 730:	d8 01       	movw	r26, r16
 732:	6d 91       	ld	r22, X+
 734:	8d 01       	movw	r16, r26
 736:	d6 01       	movw	r26, r12
 738:	ed 91       	ld	r30, X+
 73a:	fc 91       	ld	r31, X
 73c:	01 90       	ld	r0, Z+
 73e:	f0 81       	ld	r31, Z
 740:	e0 2d       	mov	r30, r0
 742:	c6 01       	movw	r24, r12
 744:	09 95       	icall
 746:	89 2b       	or	r24, r25
 748:	11 f4       	brne	.+4      	; 0x74e <_ZN5Print5writeEPKhj+0x3e>
 74a:	7e 01       	movw	r14, r28
 74c:	02 c0       	rjmp	.+4      	; 0x752 <_ZN5Print5writeEPKhj+0x42>
 74e:	21 96       	adiw	r28, 0x01	; 1
 750:	ec cf       	rjmp	.-40     	; 0x72a <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 752:	c7 01       	movw	r24, r14
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	ff 90       	pop	r15
 75e:	ef 90       	pop	r14
 760:	df 90       	pop	r13
 762:	cf 90       	pop	r12
 764:	08 95       	ret

00000766 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 766:	1f 92       	push	r1
 768:	0f 92       	push	r0
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	0f 92       	push	r0
 76e:	11 24       	eor	r1, r1
 770:	2f 93       	push	r18
 772:	3f 93       	push	r19
 774:	8f 93       	push	r24
 776:	9f 93       	push	r25
 778:	af 93       	push	r26
 77a:	bf 93       	push	r27
 77c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <timer0_millis>
 780:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <timer0_millis+0x1>
 784:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <timer0_millis+0x2>
 788:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <timer0_millis+0x3>
 78c:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <timer0_fract>
 790:	23 e0       	ldi	r18, 0x03	; 3
 792:	23 0f       	add	r18, r19
 794:	2d 37       	cpi	r18, 0x7D	; 125
 796:	20 f4       	brcc	.+8      	; 0x7a0 <__vector_16+0x3a>
 798:	01 96       	adiw	r24, 0x01	; 1
 79a:	a1 1d       	adc	r26, r1
 79c:	b1 1d       	adc	r27, r1
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <__vector_16+0x44>
 7a0:	26 e8       	ldi	r18, 0x86	; 134
 7a2:	23 0f       	add	r18, r19
 7a4:	02 96       	adiw	r24, 0x02	; 2
 7a6:	a1 1d       	adc	r26, r1
 7a8:	b1 1d       	adc	r27, r1
 7aa:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <timer0_fract>
 7ae:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <timer0_millis>
 7b2:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <timer0_millis+0x1>
 7b6:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <timer0_millis+0x2>
 7ba:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <timer0_millis+0x3>
 7be:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_overflow_count>
 7c2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_overflow_count+0x1>
 7c6:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <timer0_overflow_count+0x2>
 7ca:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <timer0_overflow_count+0x3>
 7ce:	01 96       	adiw	r24, 0x01	; 1
 7d0:	a1 1d       	adc	r26, r1
 7d2:	b1 1d       	adc	r27, r1
 7d4:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <timer0_overflow_count>
 7d8:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <timer0_overflow_count+0x1>
 7dc:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <timer0_overflow_count+0x2>
 7e0:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <timer0_overflow_count+0x3>
 7e4:	bf 91       	pop	r27
 7e6:	af 91       	pop	r26
 7e8:	9f 91       	pop	r25
 7ea:	8f 91       	pop	r24
 7ec:	3f 91       	pop	r19
 7ee:	2f 91       	pop	r18
 7f0:	0f 90       	pop	r0
 7f2:	0f be       	out	0x3f, r0	; 63
 7f4:	0f 90       	pop	r0
 7f6:	1f 90       	pop	r1
 7f8:	18 95       	reti

000007fa <micros>:
 7fa:	3f b7       	in	r19, 0x3f	; 63
 7fc:	f8 94       	cli
 7fe:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_overflow_count>
 802:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_overflow_count+0x1>
 806:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <timer0_overflow_count+0x2>
 80a:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <timer0_overflow_count+0x3>
 80e:	26 b5       	in	r18, 0x26	; 38
 810:	a8 9b       	sbis	0x15, 0	; 21
 812:	05 c0       	rjmp	.+10     	; 0x81e <micros+0x24>
 814:	2f 3f       	cpi	r18, 0xFF	; 255
 816:	19 f0       	breq	.+6      	; 0x81e <micros+0x24>
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	a1 1d       	adc	r26, r1
 81c:	b1 1d       	adc	r27, r1
 81e:	3f bf       	out	0x3f, r19	; 63
 820:	ba 2f       	mov	r27, r26
 822:	a9 2f       	mov	r26, r25
 824:	98 2f       	mov	r25, r24
 826:	88 27       	eor	r24, r24
 828:	82 0f       	add	r24, r18
 82a:	91 1d       	adc	r25, r1
 82c:	a1 1d       	adc	r26, r1
 82e:	b1 1d       	adc	r27, r1
 830:	bc 01       	movw	r22, r24
 832:	cd 01       	movw	r24, r26
 834:	42 e0       	ldi	r20, 0x02	; 2
 836:	66 0f       	add	r22, r22
 838:	77 1f       	adc	r23, r23
 83a:	88 1f       	adc	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	4a 95       	dec	r20
 840:	d1 f7       	brne	.-12     	; 0x836 <micros+0x3c>
 842:	08 95       	ret

00000844 <delay>:
 844:	8f 92       	push	r8
 846:	9f 92       	push	r9
 848:	af 92       	push	r10
 84a:	bf 92       	push	r11
 84c:	cf 92       	push	r12
 84e:	df 92       	push	r13
 850:	ef 92       	push	r14
 852:	ff 92       	push	r15
 854:	6b 01       	movw	r12, r22
 856:	7c 01       	movw	r14, r24
 858:	0e 94 fd 03 	call	0x7fa	; 0x7fa <micros>
 85c:	4b 01       	movw	r8, r22
 85e:	5c 01       	movw	r10, r24
 860:	c1 14       	cp	r12, r1
 862:	d1 04       	cpc	r13, r1
 864:	e1 04       	cpc	r14, r1
 866:	f1 04       	cpc	r15, r1
 868:	01 f1       	breq	.+64     	; 0x8aa <delay+0x66>
 86a:	0e 94 57 05 	call	0xaae	; 0xaae <yield>
 86e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <micros>
 872:	dc 01       	movw	r26, r24
 874:	cb 01       	movw	r24, r22
 876:	88 19       	sub	r24, r8
 878:	99 09       	sbc	r25, r9
 87a:	aa 09       	sbc	r26, r10
 87c:	bb 09       	sbc	r27, r11
 87e:	88 3e       	cpi	r24, 0xE8	; 232
 880:	93 40       	sbci	r25, 0x03	; 3
 882:	a1 05       	cpc	r26, r1
 884:	b1 05       	cpc	r27, r1
 886:	60 f3       	brcs	.-40     	; 0x860 <delay+0x1c>
 888:	21 e0       	ldi	r18, 0x01	; 1
 88a:	c2 1a       	sub	r12, r18
 88c:	d1 08       	sbc	r13, r1
 88e:	e1 08       	sbc	r14, r1
 890:	f1 08       	sbc	r15, r1
 892:	88 ee       	ldi	r24, 0xE8	; 232
 894:	88 0e       	add	r8, r24
 896:	83 e0       	ldi	r24, 0x03	; 3
 898:	98 1e       	adc	r9, r24
 89a:	a1 1c       	adc	r10, r1
 89c:	b1 1c       	adc	r11, r1
 89e:	c1 14       	cp	r12, r1
 8a0:	d1 04       	cpc	r13, r1
 8a2:	e1 04       	cpc	r14, r1
 8a4:	f1 04       	cpc	r15, r1
 8a6:	19 f7       	brne	.-58     	; 0x86e <delay+0x2a>
 8a8:	db cf       	rjmp	.-74     	; 0x860 <delay+0x1c>
 8aa:	ff 90       	pop	r15
 8ac:	ef 90       	pop	r14
 8ae:	df 90       	pop	r13
 8b0:	cf 90       	pop	r12
 8b2:	bf 90       	pop	r11
 8b4:	af 90       	pop	r10
 8b6:	9f 90       	pop	r9
 8b8:	8f 90       	pop	r8
 8ba:	08 95       	ret

000008bc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 8bc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 8be:	84 b5       	in	r24, 0x24	; 36
 8c0:	82 60       	ori	r24, 0x02	; 2
 8c2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 8c4:	84 b5       	in	r24, 0x24	; 36
 8c6:	81 60       	ori	r24, 0x01	; 1
 8c8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 8ca:	85 b5       	in	r24, 0x25	; 37
 8cc:	82 60       	ori	r24, 0x02	; 2
 8ce:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 8d0:	85 b5       	in	r24, 0x25	; 37
 8d2:	81 60       	ori	r24, 0x01	; 1
 8d4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 8d6:	ee e6       	ldi	r30, 0x6E	; 110
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	81 60       	ori	r24, 0x01	; 1
 8de:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 8e0:	e1 e8       	ldi	r30, 0x81	; 129
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 8e6:	80 81       	ld	r24, Z
 8e8:	82 60       	ori	r24, 0x02	; 2
 8ea:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 8ec:	80 81       	ld	r24, Z
 8ee:	81 60       	ori	r24, 0x01	; 1
 8f0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 8f2:	e0 e8       	ldi	r30, 0x80	; 128
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	81 60       	ori	r24, 0x01	; 1
 8fa:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 8fc:	e1 eb       	ldi	r30, 0xB1	; 177
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	84 60       	ori	r24, 0x04	; 4
 904:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 906:	e0 eb       	ldi	r30, 0xB0	; 176
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	81 60       	ori	r24, 0x01	; 1
 90e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 910:	ea e7       	ldi	r30, 0x7A	; 122
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	84 60       	ori	r24, 0x04	; 4
 918:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 91a:	80 81       	ld	r24, Z
 91c:	82 60       	ori	r24, 0x02	; 2
 91e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 920:	80 81       	ld	r24, Z
 922:	81 60       	ori	r24, 0x01	; 1
 924:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 926:	80 81       	ld	r24, Z
 928:	80 68       	ori	r24, 0x80	; 128
 92a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 92c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 930:	08 95       	ret

00000932 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 932:	83 30       	cpi	r24, 0x03	; 3
 934:	81 f0       	breq	.+32     	; 0x956 <turnOffPWM+0x24>
 936:	28 f4       	brcc	.+10     	; 0x942 <turnOffPWM+0x10>
 938:	81 30       	cpi	r24, 0x01	; 1
 93a:	99 f0       	breq	.+38     	; 0x962 <turnOffPWM+0x30>
 93c:	82 30       	cpi	r24, 0x02	; 2
 93e:	a1 f0       	breq	.+40     	; 0x968 <turnOffPWM+0x36>
 940:	08 95       	ret
 942:	87 30       	cpi	r24, 0x07	; 7
 944:	a9 f0       	breq	.+42     	; 0x970 <turnOffPWM+0x3e>
 946:	88 30       	cpi	r24, 0x08	; 8
 948:	b9 f0       	breq	.+46     	; 0x978 <turnOffPWM+0x46>
 94a:	84 30       	cpi	r24, 0x04	; 4
 94c:	d1 f4       	brne	.+52     	; 0x982 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 94e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 952:	8f 7d       	andi	r24, 0xDF	; 223
 954:	03 c0       	rjmp	.+6      	; 0x95c <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 956:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 95a:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 95c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 960:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 962:	84 b5       	in	r24, 0x24	; 36
 964:	8f 77       	andi	r24, 0x7F	; 127
 966:	02 c0       	rjmp	.+4      	; 0x96c <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 968:	84 b5       	in	r24, 0x24	; 36
 96a:	8f 7d       	andi	r24, 0xDF	; 223
 96c:	84 bd       	out	0x24, r24	; 36
 96e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 970:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 974:	8f 77       	andi	r24, 0x7F	; 127
 976:	03 c0       	rjmp	.+6      	; 0x97e <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 978:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 97c:	8f 7d       	andi	r24, 0xDF	; 223
 97e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 982:	08 95       	ret

00000984 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	fc 01       	movw	r30, r24
 98c:	e4 58       	subi	r30, 0x84	; 132
 98e:	ff 4f       	sbci	r31, 0xFF	; 255
 990:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 992:	fc 01       	movw	r30, r24
 994:	e0 57       	subi	r30, 0x70	; 112
 996:	ff 4f       	sbci	r31, 0xFF	; 255
 998:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 99a:	88 23       	and	r24, r24
 99c:	61 f1       	breq	.+88     	; 0x9f6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	fc 01       	movw	r30, r24
 9a6:	e8 54       	subi	r30, 0x48	; 72
 9a8:	ff 4f       	sbci	r31, 0xFF	; 255
 9aa:	c5 91       	lpm	r28, Z+
 9ac:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 9ae:	fc 01       	movw	r30, r24
 9b0:	e2 55       	subi	r30, 0x52	; 82
 9b2:	ff 4f       	sbci	r31, 0xFF	; 255
 9b4:	a5 91       	lpm	r26, Z+
 9b6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 9b8:	61 11       	cpse	r22, r1
 9ba:	09 c0       	rjmp	.+18     	; 0x9ce <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 9bc:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9be:	f8 94       	cli
		*reg &= ~bit;
 9c0:	88 81       	ld	r24, Y
 9c2:	20 95       	com	r18
 9c4:	82 23       	and	r24, r18
 9c6:	88 83       	st	Y, r24
		*out &= ~bit;
 9c8:	ec 91       	ld	r30, X
 9ca:	2e 23       	and	r18, r30
 9cc:	0b c0       	rjmp	.+22     	; 0x9e4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 9ce:	62 30       	cpi	r22, 0x02	; 2
 9d0:	61 f4       	brne	.+24     	; 0x9ea <pinMode+0x66>
		uint8_t oldSREG = SREG;
 9d2:	9f b7       	in	r25, 0x3f	; 63
                cli();
 9d4:	f8 94       	cli
		*reg &= ~bit;
 9d6:	38 81       	ld	r19, Y
 9d8:	82 2f       	mov	r24, r18
 9da:	80 95       	com	r24
 9dc:	83 23       	and	r24, r19
 9de:	88 83       	st	Y, r24
		*out |= bit;
 9e0:	ec 91       	ld	r30, X
 9e2:	2e 2b       	or	r18, r30
 9e4:	2c 93       	st	X, r18
		SREG = oldSREG;
 9e6:	9f bf       	out	0x3f, r25	; 63
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 9ea:	8f b7       	in	r24, 0x3f	; 63
                cli();
 9ec:	f8 94       	cli
		*reg |= bit;
 9ee:	e8 81       	ld	r30, Y
 9f0:	2e 2b       	or	r18, r30
 9f2:	28 83       	st	Y, r18
		SREG = oldSREG;
 9f4:	8f bf       	out	0x3f, r24	; 63
	}
}
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	08 95       	ret

000009fc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 9fc:	1f 93       	push	r17
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a02:	28 2f       	mov	r18, r24
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	f9 01       	movw	r30, r18
 a08:	e8 59       	subi	r30, 0x98	; 152
 a0a:	ff 4f       	sbci	r31, 0xFF	; 255
 a0c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a0e:	f9 01       	movw	r30, r18
 a10:	e4 58       	subi	r30, 0x84	; 132
 a12:	ff 4f       	sbci	r31, 0xFF	; 255
 a14:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a16:	f9 01       	movw	r30, r18
 a18:	e0 57       	subi	r30, 0x70	; 112
 a1a:	ff 4f       	sbci	r31, 0xFF	; 255
 a1c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a1e:	cc 23       	and	r28, r28
 a20:	c9 f0       	breq	.+50     	; 0xa54 <digitalWrite+0x58>
 a22:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a24:	81 11       	cpse	r24, r1
 a26:	0e 94 99 04 	call	0x932	; 0x932 <turnOffPWM>

	out = portOutputRegister(port);
 a2a:	ec 2f       	mov	r30, r28
 a2c:	f0 e0       	ldi	r31, 0x00	; 0
 a2e:	ee 0f       	add	r30, r30
 a30:	ff 1f       	adc	r31, r31
 a32:	e2 55       	subi	r30, 0x52	; 82
 a34:	ff 4f       	sbci	r31, 0xFF	; 255
 a36:	a5 91       	lpm	r26, Z+
 a38:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 a3a:	8f b7       	in	r24, 0x3f	; 63
	cli();
 a3c:	f8 94       	cli

	if (val == LOW) {
 a3e:	11 11       	cpse	r17, r1
 a40:	05 c0       	rjmp	.+10     	; 0xa4c <digitalWrite+0x50>
		*out &= ~bit;
 a42:	9c 91       	ld	r25, X
 a44:	ed 2f       	mov	r30, r29
 a46:	e0 95       	com	r30
 a48:	e9 23       	and	r30, r25
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <digitalWrite+0x54>
	} else {
		*out |= bit;
 a4c:	ec 91       	ld	r30, X
 a4e:	ed 2b       	or	r30, r29
 a50:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 a52:	8f bf       	out	0x3f, r24	; 63
}
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	1f 91       	pop	r17
 a5a:	08 95       	ret

00000a5c <digitalRead>:

int digitalRead(uint8_t pin)
{
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a60:	28 2f       	mov	r18, r24
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	f9 01       	movw	r30, r18
 a66:	e8 59       	subi	r30, 0x98	; 152
 a68:	ff 4f       	sbci	r31, 0xFF	; 255
 a6a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a6c:	f9 01       	movw	r30, r18
 a6e:	e4 58       	subi	r30, 0x84	; 132
 a70:	ff 4f       	sbci	r31, 0xFF	; 255
 a72:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a74:	f9 01       	movw	r30, r18
 a76:	e0 57       	subi	r30, 0x70	; 112
 a78:	ff 4f       	sbci	r31, 0xFF	; 255
 a7a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 a7c:	cc 23       	and	r28, r28
 a7e:	91 f0       	breq	.+36     	; 0xaa4 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a80:	81 11       	cpse	r24, r1
 a82:	0e 94 99 04 	call	0x932	; 0x932 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 a86:	ec 2f       	mov	r30, r28
 a88:	f0 e0       	ldi	r31, 0x00	; 0
 a8a:	ee 0f       	add	r30, r30
 a8c:	ff 1f       	adc	r31, r31
 a8e:	ec 55       	subi	r30, 0x5C	; 92
 a90:	ff 4f       	sbci	r31, 0xFF	; 255
 a92:	a5 91       	lpm	r26, Z+
 a94:	b4 91       	lpm	r27, Z
 a96:	ec 91       	ld	r30, X
 a98:	ed 23       	and	r30, r29
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	21 f4       	brne	.+8      	; 0xaa8 <digitalRead+0x4c>
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 aa4:	80 e0       	ldi	r24, 0x00	; 0
 aa6:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	08 95       	ret

00000aae <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 aae:	08 95       	ret

00000ab0 <__udivmodsi4>:
 ab0:	a1 e2       	ldi	r26, 0x21	; 33
 ab2:	1a 2e       	mov	r1, r26
 ab4:	aa 1b       	sub	r26, r26
 ab6:	bb 1b       	sub	r27, r27
 ab8:	fd 01       	movw	r30, r26
 aba:	0d c0       	rjmp	.+26     	; 0xad6 <__udivmodsi4_ep>

00000abc <__udivmodsi4_loop>:
 abc:	aa 1f       	adc	r26, r26
 abe:	bb 1f       	adc	r27, r27
 ac0:	ee 1f       	adc	r30, r30
 ac2:	ff 1f       	adc	r31, r31
 ac4:	a2 17       	cp	r26, r18
 ac6:	b3 07       	cpc	r27, r19
 ac8:	e4 07       	cpc	r30, r20
 aca:	f5 07       	cpc	r31, r21
 acc:	20 f0       	brcs	.+8      	; 0xad6 <__udivmodsi4_ep>
 ace:	a2 1b       	sub	r26, r18
 ad0:	b3 0b       	sbc	r27, r19
 ad2:	e4 0b       	sbc	r30, r20
 ad4:	f5 0b       	sbc	r31, r21

00000ad6 <__udivmodsi4_ep>:
 ad6:	66 1f       	adc	r22, r22
 ad8:	77 1f       	adc	r23, r23
 ada:	88 1f       	adc	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	1a 94       	dec	r1
 ae0:	69 f7       	brne	.-38     	; 0xabc <__udivmodsi4_loop>
 ae2:	60 95       	com	r22
 ae4:	70 95       	com	r23
 ae6:	80 95       	com	r24
 ae8:	90 95       	com	r25
 aea:	9b 01       	movw	r18, r22
 aec:	ac 01       	movw	r20, r24
 aee:	bd 01       	movw	r22, r26
 af0:	cf 01       	movw	r24, r30
 af2:	08 95       	ret

00000af4 <__tablejump2__>:
 af4:	ee 0f       	add	r30, r30
 af6:	ff 1f       	adc	r31, r31
 af8:	05 90       	lpm	r0, Z+
 afa:	f4 91       	lpm	r31, Z
 afc:	e0 2d       	mov	r30, r0
 afe:	09 94       	ijmp

00000b00 <_exit>:
 b00:	f8 94       	cli

00000b02 <__stop_program>:
 b02:	ff cf       	rjmp	.-2      	; 0xb02 <__stop_program>
