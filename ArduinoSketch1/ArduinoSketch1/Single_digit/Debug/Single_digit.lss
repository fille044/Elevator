
Single_digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000cee  00000d82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  00800126  00800126  00000da8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d32  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001965  00000000  00000000  00008dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001949  00000000  00000000  0000a75f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000788  00000000  00000000  0000c0a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c28  00000000  00000000  0000c830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f6d  00000000  00000000  0000e458  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  000113c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 00 03 	jmp	0x600	; 0x600 <__vector_18>
  4c:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	62 03       	mulsu	r22, r18

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ee ee       	ldi	r30, 0xEE	; 238
  d8:	fc e0       	ldi	r31, 0x0C	; 12
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a6 32       	cpi	r26, 0x26	; 38
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a6 e2       	ldi	r26, 0x26	; 38
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a0 3d       	cpi	r26, 0xD0	; 208
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 6f 06 	call	0xcde	; 0xcde <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 90 03 	call	0x720	; 0x720 <main>
 110:	0c 94 75 06 	jmp	0xcea	; 0xcea <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z9changeLEDii>:
#define button_hiss_B 5
#define foto_0 A0
#define foto_1 A1
#define foto_2 A2

void changeLED(int i, int j){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
    if (i == 0 && j == 1){
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	89 f5       	brne	.+98     	; 0x182 <_Z9changeLEDii+0x6a>
 120:	61 30       	cpi	r22, 0x01	; 1
 122:	71 05       	cpc	r23, r1
 124:	39 f4       	brne	.+14     	; 0x134 <_Z9changeLEDii+0x1c>
        digitalWrite(led_G,1);
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
		digitalWrite(led_R,0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	89 e0       	ldi	r24, 0x09	; 9
 132:	30 c0       	rjmp	.+96     	; 0x194 <_Z9changeLEDii+0x7c>
		digitalWrite(led_B,0);
        delay(3000);
    }
    else if (i == 0 && j == 2){
 134:	62 30       	cpi	r22, 0x02	; 2
 136:	71 05       	cpc	r23, r1
 138:	09 f0       	breq	.+2      	; 0x13c <_Z9changeLEDii+0x24>
 13a:	91 c0       	rjmp	.+290    	; 0x25e <_Z9changeLEDii+0x146>
        digitalWrite(led_G,1);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
 144:	c4 e6       	ldi	r28, 0x64	; 100
 146:	d0 e0       	ldi	r29, 0x00	; 0
        // 30s delays with the opportunity to change floor
        for (int jx = 0; jx <100; jx++){
            if (((digitalRead(button_R) == 0) || (digitalRead(button_hiss_R) == 0))){
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 14e:	89 2b       	or	r24, r25
 150:	09 f4       	brne	.+2      	; 0x154 <_Z9changeLEDii+0x3c>
 152:	67 c0       	rjmp	.+206    	; 0x222 <_Z9changeLEDii+0x10a>
 154:	84 e0       	ldi	r24, 0x04	; 4
 156:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 15a:	89 2b       	or	r24, r25
 15c:	09 f4       	brne	.+2      	; 0x160 <_Z9changeLEDii+0x48>
 15e:	61 c0       	rjmp	.+194    	; 0x222 <_Z9changeLEDii+0x10a>
                digitalWrite(led_R,1);
                delay(1000);
                digitalWrite(led_B,0);
            }
            delay(30);
 160:	6e e1       	ldi	r22, 0x1E	; 30
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
 16c:	21 97       	sbiw	r28, 0x01	; 1
        delay(3000);
    }
    else if (i == 0 && j == 2){
        digitalWrite(led_G,1);
        // 30s delays with the opportunity to change floor
        for (int jx = 0; jx <100; jx++){
 16e:	61 f7       	brne	.-40     	; 0x148 <_Z9changeLEDii+0x30>
                delay(1000);
                digitalWrite(led_B,0);
            }
            delay(30);
        }
        delay(3000);
 170:	68 eb       	ldi	r22, 0xB8	; 184
 172:	7b e0       	ldi	r23, 0x0B	; 11
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
		digitalWrite(led_G,0);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	88 e0       	ldi	r24, 0x08	; 8
 180:	35 c0       	rjmp	.+106    	; 0x1ec <_Z9changeLEDii+0xd4>
    }
    if (i == 1){
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	91 05       	cpc	r25, r1
 186:	59 f4       	brne	.+22     	; 0x19e <_Z9changeLEDii+0x86>
        digitalWrite(led_R,1);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	89 e0       	ldi	r24, 0x09	; 9
 18c:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
		digitalWrite(led_G,0);
 190:	60 e0       	ldi	r22, 0x00	; 0
 192:	88 e0       	ldi	r24, 0x08	; 8
 194:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
		digitalWrite(led_B,0);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	38 c0       	rjmp	.+112    	; 0x20e <_Z9changeLEDii+0xf6>
        delay(3000);
    }
    if (i == 2 && j == 0){
 19e:	02 97       	sbiw	r24, 0x02	; 2
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <_Z9changeLEDii+0x8c>
 1a2:	5d c0       	rjmp	.+186    	; 0x25e <_Z9changeLEDii+0x146>
 1a4:	61 15       	cp	r22, r1
 1a6:	71 05       	cpc	r23, r1
 1a8:	29 f5       	brne	.+74     	; 0x1f4 <_Z9changeLEDii+0xdc>
        digitalWrite(led_B,1);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	8a e0       	ldi	r24, 0x0A	; 10
 1ae:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
 1b2:	c4 e6       	ldi	r28, 0x64	; 100
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
        // 30s delays with the opportunity to change floor
        for (int jx = 0; jx <100; jx++){
            if (((digitalRead(button_R) == 0) || (digitalRead(button_hiss_R) ==0))){
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 1bc:	89 2b       	or	r24, r25
 1be:	09 f4       	brne	.+2      	; 0x1c2 <_Z9changeLEDii+0xaa>
 1c0:	3f c0       	rjmp	.+126    	; 0x240 <_Z9changeLEDii+0x128>
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 1c8:	89 2b       	or	r24, r25
 1ca:	d1 f1       	breq	.+116    	; 0x240 <_Z9changeLEDii+0x128>
                digitalWrite(led_R,1);
                delay(1000);
                digitalWrite(led_G,0);
            }
            delay(30);
 1cc:	6e e1       	ldi	r22, 0x1E	; 30
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
 1d8:	21 97       	sbiw	r28, 0x01	; 1
        delay(3000);
    }
    if (i == 2 && j == 0){
        digitalWrite(led_B,1);
        // 30s delays with the opportunity to change floor
        for (int jx = 0; jx <100; jx++){
 1da:	69 f7       	brne	.-38     	; 0x1b6 <_Z9changeLEDii+0x9e>
                delay(1000);
                digitalWrite(led_G,0);
            }
            delay(30);
        }
        delay(3000);
 1dc:	68 eb       	ldi	r22, 0xB8	; 184
 1de:	7b e0       	ldi	r23, 0x0B	; 11
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
		digitalWrite(led_R,0);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	89 e0       	ldi	r24, 0x09	; 9
		digitalWrite(led_B,1);
		digitalWrite(led_G,0);
		digitalWrite(led_R,0);
		delay(3000);
	}
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
                digitalWrite(led_G,0);
            }
            delay(30);
        }
        delay(3000);
		digitalWrite(led_R,0);
 1f0:	0c 94 f3 05 	jmp	0xbe6	; 0xbe6 <digitalWrite>
    }
	if (i == 2 && j == 1){
 1f4:	61 30       	cpi	r22, 0x01	; 1
 1f6:	71 05       	cpc	r23, r1
 1f8:	91 f5       	brne	.+100    	; 0x25e <_Z9changeLEDii+0x146>
		digitalWrite(led_B,1);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
		digitalWrite(led_G,0);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
		digitalWrite(led_R,0);
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
		delay(3000);
 212:	68 eb       	ldi	r22, 0xB8	; 184
 214:	7b e0       	ldi	r23, 0x0B	; 11
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
    }
	if (i == 2 && j == 1){
		digitalWrite(led_B,1);
		digitalWrite(led_G,0);
		digitalWrite(led_R,0);
		delay(3000);
 21e:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <delay>
    else if (i == 0 && j == 2){
        digitalWrite(led_G,1);
        // 30s delays with the opportunity to change floor
        for (int jx = 0; jx <100; jx++){
            if (((digitalRead(button_R) == 0) || (digitalRead(button_hiss_R) == 0))){
                digitalWrite(led_R,1);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	89 e0       	ldi	r24, 0x09	; 9
 226:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
                delay(1000);
 22a:	68 ee       	ldi	r22, 0xE8	; 232
 22c:	73 e0       	ldi	r23, 0x03	; 3
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
                digitalWrite(led_B,0);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	8a e0       	ldi	r24, 0x0A	; 10
 23a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
 23e:	90 cf       	rjmp	.-224    	; 0x160 <_Z9changeLEDii+0x48>
    if (i == 2 && j == 0){
        digitalWrite(led_B,1);
        // 30s delays with the opportunity to change floor
        for (int jx = 0; jx <100; jx++){
            if (((digitalRead(button_R) == 0) || (digitalRead(button_hiss_R) ==0))){
                digitalWrite(led_R,1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	89 e0       	ldi	r24, 0x09	; 9
 244:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
                delay(1000);
 248:	68 ee       	ldi	r22, 0xE8	; 232
 24a:	73 e0       	ldi	r23, 0x03	; 3
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 17 05 	call	0xa2e	; 0xa2e <delay>
                digitalWrite(led_G,0);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	88 e0       	ldi	r24, 0x08	; 8
 258:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <digitalWrite>
 25c:	b7 cf       	rjmp	.-146    	; 0x1cc <_Z9changeLEDii+0xb4>
		digitalWrite(led_B,1);
		digitalWrite(led_G,0);
		digitalWrite(led_R,0);
		delay(3000);
	}
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <setup>:
#define foto_0 A0
#define foto_1 A1
#define foto_2 A2
int i=0, j=0;
void setup() {
	pinMode(led_G,OUTPUT);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(led_R,OUTPUT);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	89 e0       	ldi	r24, 0x09	; 9
 270:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(led_B,OUTPUT);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	8a e0       	ldi	r24, 0x0A	; 10
 278:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(button_G, INPUT);
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(button_R, INPUT);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(button_B, INPUT);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(button_hiss_G, INPUT);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(button_hiss_R, INPUT);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
	pinMode(button_hiss_B, INPUT);
 2a4:	60 e0       	ldi	r22, 0x00	; 0
 2a6:	85 e0       	ldi	r24, 0x05	; 5
 2a8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 2ac:	26 e0       	ldi	r18, 0x06	; 6
 2ae:	40 e8       	ldi	r20, 0x80	; 128
 2b0:	55 e2       	ldi	r21, 0x25	; 37
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	8a e2       	ldi	r24, 0x2A	; 42
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0c 94 9b 02 	jmp	0x536	; 0x536 <_ZN14HardwareSerial5beginEmh>

000002be <loop>:
	Serial.begin(9600);
}

void loop() {
	Serial.print(i);
 2be:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <i>
 2c2:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <i+0x1>
 2c6:	4a e0       	ldi	r20, 0x0A	; 10
 2c8:	50 e0       	ldi	r21, 0x00	; 0
 2ca:	8a e2       	ldi	r24, 0x2A	; 42
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	0e 94 8a 04 	call	0x914	; 0x914 <_ZN5Print5printEii>
	Serial.print(" --- ");
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	71 e0       	ldi	r23, 0x01	; 1
 2d6:	8a e2       	ldi	r24, 0x2A	; 42
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	0e 94 df 03 	call	0x7be	; 0x7be <_ZN5Print5printEPKc>
	Serial.println(j);
 2de:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 2e2:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
 2e6:	4a e0       	ldi	r20, 0x0A	; 10
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	8a e2       	ldi	r24, 0x2A	; 42
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 91 04 	call	0x922	; 0x922 <_ZN5Print7printlnEii>
	if (((digitalRead(button_G)==0) || digitalRead(button_hiss_G)==0) && (i == 1 || i == 2)){
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 2f8:	89 2b       	or	r24, r25
 2fa:	41 f4       	brne	.+16     	; 0x30c <loop+0x4e>
 2fc:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <i>
 300:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i+0x1>
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	02 97       	sbiw	r24, 0x02	; 2
 308:	30 f4       	brcc	.+12     	; 0x316 <loop+0x58>
 30a:	34 c0       	rjmp	.+104    	; 0x374 <loop+0xb6>
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 312:	89 2b       	or	r24, r25
 314:	99 f3       	breq	.-26     	; 0x2fc <loop+0x3e>
	    i = j;
	    i=0;
	    changeLED(i, j);
	}
	if (((digitalRead(button_R)==0) || digitalRead(button_hiss_R)==0) && (i == 0 || i == 2)){
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 31c:	89 2b       	or	r24, r25
 31e:	41 f4       	brne	.+16     	; 0x330 <loop+0x72>
 320:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <i>
 324:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i+0x1>
 328:	8d 7f       	andi	r24, 0xFD	; 253
 32a:	89 2b       	or	r24, r25
 32c:	81 f1       	breq	.+96     	; 0x38e <loop+0xd0>
 32e:	05 c0       	rjmp	.+10     	; 0x33a <loop+0x7c>
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 336:	89 2b       	or	r24, r25
 338:	99 f3       	breq	.-26     	; 0x320 <loop+0x62>
	    i = j;
	    i=1;
	    changeLED(i, j);
	}
	if (((digitalRead(button_B)==0) || digitalRead(button_hiss_B)==0) && (i == 1 || i == 0)){
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 340:	89 2b       	or	r24, r25
 342:	91 f4       	brne	.+36     	; 0x368 <loop+0xaa>
 344:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <i>
 348:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <i+0x1>
 34c:	02 97       	sbiw	r24, 0x02	; 2
 34e:	60 f5       	brcc	.+88     	; 0x3a8 <loop+0xea>
	    i = j;
 350:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 354:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
	    i=2;
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <i+0x1>
 360:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <i>
	    changeLED(i, j);
 364:	0c 94 8c 00 	jmp	0x118	; 0x118 <_Z9changeLEDii>
	if (((digitalRead(button_R)==0) || digitalRead(button_hiss_R)==0) && (i == 0 || i == 2)){
	    i = j;
	    i=1;
	    changeLED(i, j);
	}
	if (((digitalRead(button_B)==0) || digitalRead(button_hiss_B)==0) && (i == 1 || i == 0)){
 368:	85 e0       	ldi	r24, 0x05	; 5
 36a:	0e 94 23 06 	call	0xc46	; 0xc46 <digitalRead>
 36e:	89 2b       	or	r24, r25
 370:	49 f3       	breq	.-46     	; 0x344 <loop+0x86>
 372:	08 95       	ret
void loop() {
	Serial.print(i);
	Serial.print(" --- ");
	Serial.println(j);
	if (((digitalRead(button_G)==0) || digitalRead(button_hiss_G)==0) && (i == 1 || i == 2)){
	    i = j;
 374:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 378:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
	    i=0;
 37c:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <i+0x1>
 380:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <i>
	    changeLED(i, j);
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 8c 00 	call	0x118	; 0x118 <_Z9changeLEDii>
 38c:	c4 cf       	rjmp	.-120    	; 0x316 <loop+0x58>
	}
	if (((digitalRead(button_R)==0) || digitalRead(button_hiss_R)==0) && (i == 0 || i == 2)){
	    i = j;
 38e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
 392:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
	    i=1;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <i+0x1>
 39e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <i>
	    changeLED(i, j);
 3a2:	0e 94 8c 00 	call	0x118	; 0x118 <_Z9changeLEDii>
 3a6:	c9 cf       	rjmp	.-110    	; 0x33a <loop+0x7c>
 3a8:	08 95       	ret

000003aa <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3aa:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3ac:	91 8d       	ldd	r25, Z+25	; 0x19
 3ae:	22 8d       	ldd	r18, Z+26	; 0x1a
 3b0:	89 2f       	mov	r24, r25
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	80 5c       	subi	r24, 0xC0	; 192
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	82 1b       	sub	r24, r18
 3ba:	91 09       	sbc	r25, r1
}
 3bc:	8f 73       	andi	r24, 0x3F	; 63
 3be:	99 27       	eor	r25, r25
 3c0:	08 95       	ret

000003c2 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 3c2:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 3c4:	91 8d       	ldd	r25, Z+25	; 0x19
 3c6:	82 8d       	ldd	r24, Z+26	; 0x1a
 3c8:	98 17       	cp	r25, r24
 3ca:	31 f0       	breq	.+12     	; 0x3d8 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 3cc:	82 8d       	ldd	r24, Z+26	; 0x1a
 3ce:	e8 0f       	add	r30, r24
 3d0:	f1 1d       	adc	r31, r1
 3d2:	85 8d       	ldd	r24, Z+29	; 0x1d
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 3dc:	08 95       	ret

000003de <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 3de:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 3e0:	91 8d       	ldd	r25, Z+25	; 0x19
 3e2:	82 8d       	ldd	r24, Z+26	; 0x1a
 3e4:	98 17       	cp	r25, r24
 3e6:	61 f0       	breq	.+24     	; 0x400 <__LOCK_REGION_LENGTH__>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 3e8:	82 8d       	ldd	r24, Z+26	; 0x1a
 3ea:	df 01       	movw	r26, r30
 3ec:	a8 0f       	add	r26, r24
 3ee:	b1 1d       	adc	r27, r1
 3f0:	5d 96       	adiw	r26, 0x1d	; 29
 3f2:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 3f4:	92 8d       	ldd	r25, Z+26	; 0x1a
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	9f 73       	andi	r25, 0x3F	; 63
 3fa:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 400:	8f ef       	ldi	r24, 0xFF	; 255
 402:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 404:	08 95       	ret

00000406 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 406:	88 e5       	ldi	r24, 0x58	; 88
 408:	93 e0       	ldi	r25, 0x03	; 3
 40a:	89 2b       	or	r24, r25
 40c:	49 f0       	breq	.+18     	; 0x420 <_Z14serialEventRunv+0x1a>
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	89 2b       	or	r24, r25
 414:	29 f0       	breq	.+10     	; 0x420 <_Z14serialEventRunv+0x1a>
 416:	0e 94 58 03 	call	0x6b0	; 0x6b0 <_Z17Serial0_availablev>
 41a:	81 11       	cpse	r24, r1
 41c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 420:	08 95       	ret

00000422 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 422:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 424:	84 8d       	ldd	r24, Z+28	; 0x1c
 426:	df 01       	movw	r26, r30
 428:	a8 0f       	add	r26, r24
 42a:	b1 1d       	adc	r27, r1
 42c:	a3 5a       	subi	r26, 0xA3	; 163
 42e:	bf 4f       	sbci	r27, 0xFF	; 255
 430:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 432:	84 8d       	ldd	r24, Z+28	; 0x1c
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	01 96       	adiw	r24, 0x01	; 1
 438:	8f 73       	andi	r24, 0x3F	; 63
 43a:	99 27       	eor	r25, r25
 43c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 43e:	a6 89       	ldd	r26, Z+22	; 0x16
 440:	b7 89       	ldd	r27, Z+23	; 0x17
 442:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 444:	a0 89       	ldd	r26, Z+16	; 0x10
 446:	b1 89       	ldd	r27, Z+17	; 0x11
 448:	8c 91       	ld	r24, X
 44a:	80 64       	ori	r24, 0x40	; 64
 44c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 44e:	93 8d       	ldd	r25, Z+27	; 0x1b
 450:	84 8d       	ldd	r24, Z+28	; 0x1c
 452:	98 13       	cpse	r25, r24
 454:	06 c0       	rjmp	.+12     	; 0x462 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 456:	02 88       	ldd	r0, Z+18	; 0x12
 458:	f3 89       	ldd	r31, Z+19	; 0x13
 45a:	e0 2d       	mov	r30, r0
 45c:	80 81       	ld	r24, Z
 45e:	8f 7d       	andi	r24, 0xDF	; 223
 460:	80 83       	st	Z, r24
 462:	08 95       	ret

00000464 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 46a:	88 8d       	ldd	r24, Y+24	; 0x18
 46c:	88 23       	and	r24, r24
 46e:	c9 f0       	breq	.+50     	; 0x4a2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 470:	ea 89       	ldd	r30, Y+18	; 0x12
 472:	fb 89       	ldd	r31, Y+19	; 0x13
 474:	80 81       	ld	r24, Z
 476:	85 fd       	sbrc	r24, 5
 478:	05 c0       	rjmp	.+10     	; 0x484 <_ZN14HardwareSerial5flushEv+0x20>
 47a:	a8 89       	ldd	r26, Y+16	; 0x10
 47c:	b9 89       	ldd	r27, Y+17	; 0x11
 47e:	8c 91       	ld	r24, X
 480:	86 fd       	sbrc	r24, 6
 482:	0f c0       	rjmp	.+30     	; 0x4a2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	07 fc       	sbrc	r0, 7
 488:	f5 cf       	rjmp	.-22     	; 0x474 <_ZN14HardwareSerial5flushEv+0x10>
 48a:	80 81       	ld	r24, Z
 48c:	85 ff       	sbrs	r24, 5
 48e:	f2 cf       	rjmp	.-28     	; 0x474 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 490:	a8 89       	ldd	r26, Y+16	; 0x10
 492:	b9 89       	ldd	r27, Y+17	; 0x11
 494:	8c 91       	ld	r24, X
 496:	85 ff       	sbrs	r24, 5
 498:	ed cf       	rjmp	.-38     	; 0x474 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 49a:	ce 01       	movw	r24, r28
 49c:	0e 94 11 02 	call	0x422	; 0x422 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4a0:	e7 cf       	rjmp	.-50     	; 0x470 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	ec 01       	movw	r28, r24
  _written = true;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 4ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
 4bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4be:	98 13       	cpse	r25, r24
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <_ZN14HardwareSerial5writeEh+0x24>
 4c2:	e8 89       	ldd	r30, Y+16	; 0x10
 4c4:	f9 89       	ldd	r31, Y+17	; 0x11
 4c6:	80 81       	ld	r24, Z
 4c8:	85 fd       	sbrc	r24, 5
 4ca:	24 c0       	rjmp	.+72     	; 0x514 <_ZN14HardwareSerial5writeEh+0x6c>
 4cc:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 4ce:	0b 8d       	ldd	r16, Y+27	; 0x1b
 4d0:	10 e0       	ldi	r17, 0x00	; 0
 4d2:	0f 5f       	subi	r16, 0xFF	; 255
 4d4:	1f 4f       	sbci	r17, 0xFF	; 255
 4d6:	0f 73       	andi	r16, 0x3F	; 63
 4d8:	11 27       	eor	r17, r17
 4da:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 4dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4de:	e8 12       	cpse	r14, r24
 4e0:	0c c0       	rjmp	.+24     	; 0x4fa <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	07 fc       	sbrc	r0, 7
 4e6:	fa cf       	rjmp	.-12     	; 0x4dc <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 4e8:	e8 89       	ldd	r30, Y+16	; 0x10
 4ea:	f9 89       	ldd	r31, Y+17	; 0x11
 4ec:	80 81       	ld	r24, Z
 4ee:	85 ff       	sbrs	r24, 5
 4f0:	f5 cf       	rjmp	.-22     	; 0x4dc <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 4f2:	ce 01       	movw	r24, r28
 4f4:	0e 94 11 02 	call	0x422	; 0x422 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4f8:	f1 cf       	rjmp	.-30     	; 0x4dc <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 4fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
 4fc:	fe 01       	movw	r30, r28
 4fe:	e8 0f       	add	r30, r24
 500:	f1 1d       	adc	r31, r1
 502:	e3 5a       	subi	r30, 0xA3	; 163
 504:	ff 4f       	sbci	r31, 0xFF	; 255
 506:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 508:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 50a:	ea 89       	ldd	r30, Y+18	; 0x12
 50c:	fb 89       	ldd	r31, Y+19	; 0x13
 50e:	80 81       	ld	r24, Z
 510:	80 62       	ori	r24, 0x20	; 32
 512:	07 c0       	rjmp	.+14     	; 0x522 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 514:	ee 89       	ldd	r30, Y+22	; 0x16
 516:	ff 89       	ldd	r31, Y+23	; 0x17
 518:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 51a:	e8 89       	ldd	r30, Y+16	; 0x10
 51c:	f9 89       	ldd	r31, Y+17	; 0x11
 51e:	80 81       	ld	r24, Z
 520:	80 64       	ori	r24, 0x40	; 64
 522:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	ff 90       	pop	r15
 532:	ef 90       	pop	r14
 534:	08 95       	ret

00000536 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 536:	cf 92       	push	r12
 538:	df 92       	push	r13
 53a:	ef 92       	push	r14
 53c:	ff 92       	push	r15
 53e:	1f 93       	push	r17
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	ec 01       	movw	r28, r24
 546:	6a 01       	movw	r12, r20
 548:	7b 01       	movw	r14, r22
 54a:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 54c:	e8 89       	ldd	r30, Y+16	; 0x10
 54e:	f9 89       	ldd	r31, Y+17	; 0x11
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 554:	41 15       	cp	r20, r1
 556:	51 4e       	sbci	r21, 0xE1	; 225
 558:	61 05       	cpc	r22, r1
 55a:	71 05       	cpc	r23, r1
 55c:	b1 f0       	breq	.+44     	; 0x58a <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	79 e0       	ldi	r23, 0x09	; 9
 562:	8d e3       	ldi	r24, 0x3D	; 61
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__udivmodsi4>
 56e:	da 01       	movw	r26, r20
 570:	c9 01       	movw	r24, r18
 572:	01 97       	sbiw	r24, 0x01	; 1
 574:	a1 09       	sbc	r26, r1
 576:	b1 09       	sbc	r27, r1
 578:	b6 95       	lsr	r27
 57a:	a7 95       	ror	r26
 57c:	97 95       	ror	r25
 57e:	87 95       	ror	r24
 580:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 582:	41 15       	cp	r20, r1
 584:	80 e1       	ldi	r24, 0x10	; 16
 586:	58 07       	cpc	r21, r24
 588:	a8 f0       	brcs	.+42     	; 0x5b4 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 58a:	e8 89       	ldd	r30, Y+16	; 0x10
 58c:	f9 89       	ldd	r31, Y+17	; 0x11
 58e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 590:	60 e8       	ldi	r22, 0x80	; 128
 592:	74 e8       	ldi	r23, 0x84	; 132
 594:	8e e1       	ldi	r24, 0x1E	; 30
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	a7 01       	movw	r20, r14
 59a:	96 01       	movw	r18, r12
 59c:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__udivmodsi4>
 5a0:	ba 01       	movw	r22, r20
 5a2:	a9 01       	movw	r20, r18
 5a4:	41 50       	subi	r20, 0x01	; 1
 5a6:	51 09       	sbc	r21, r1
 5a8:	61 09       	sbc	r22, r1
 5aa:	71 09       	sbc	r23, r1
 5ac:	76 95       	lsr	r23
 5ae:	67 95       	ror	r22
 5b0:	57 95       	ror	r21
 5b2:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 5b4:	ec 85       	ldd	r30, Y+12	; 0x0c
 5b6:	fd 85       	ldd	r31, Y+13	; 0x0d
 5b8:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 5ba:	ee 85       	ldd	r30, Y+14	; 0x0e
 5bc:	ff 85       	ldd	r31, Y+15	; 0x0f
 5be:	40 83       	st	Z, r20

  _written = false;
 5c0:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 5c2:	ec 89       	ldd	r30, Y+20	; 0x14
 5c4:	fd 89       	ldd	r31, Y+21	; 0x15
 5c6:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 5c8:	ea 89       	ldd	r30, Y+18	; 0x12
 5ca:	fb 89       	ldd	r31, Y+19	; 0x13
 5cc:	80 81       	ld	r24, Z
 5ce:	80 61       	ori	r24, 0x10	; 16
 5d0:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 5d2:	ea 89       	ldd	r30, Y+18	; 0x12
 5d4:	fb 89       	ldd	r31, Y+19	; 0x13
 5d6:	80 81       	ld	r24, Z
 5d8:	88 60       	ori	r24, 0x08	; 8
 5da:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 5dc:	ea 89       	ldd	r30, Y+18	; 0x12
 5de:	fb 89       	ldd	r31, Y+19	; 0x13
 5e0:	80 81       	ld	r24, Z
 5e2:	80 68       	ori	r24, 0x80	; 128
 5e4:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 5e6:	ea 89       	ldd	r30, Y+18	; 0x12
 5e8:	fb 89       	ldd	r31, Y+19	; 0x13
 5ea:	80 81       	ld	r24, Z
 5ec:	8f 7d       	andi	r24, 0xDF	; 223
 5ee:	80 83       	st	Z, r24
}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	ff 90       	pop	r15
 5f8:	ef 90       	pop	r14
 5fa:	df 90       	pop	r13
 5fc:	cf 90       	pop	r12
 5fe:	08 95       	ret

00000600 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 600:	1f 92       	push	r1
 602:	0f 92       	push	r0
 604:	0f b6       	in	r0, 0x3f	; 63
 606:	0f 92       	push	r0
 608:	11 24       	eor	r1, r1
 60a:	2f 93       	push	r18
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	ef 93       	push	r30
 612:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 614:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <Serial+0x10>
 618:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <Serial+0x11>
 61c:	80 81       	ld	r24, Z
 61e:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <Serial+0x16>
 622:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <Serial+0x17>
 626:	82 fd       	sbrc	r24, 2
 628:	12 c0       	rjmp	.+36     	; 0x64e <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 62a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 62c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <Serial+0x19>
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 634:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <Serial+0x1a>
 638:	82 17       	cp	r24, r18
 63a:	51 f0       	breq	.+20     	; 0x650 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 63c:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <Serial+0x19>
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	e6 5d       	subi	r30, 0xD6	; 214
 644:	fe 4f       	sbci	r31, 0xFE	; 254
 646:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 648:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <Serial+0x19>
 64c:	01 c0       	rjmp	.+2      	; 0x650 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 64e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	9f 91       	pop	r25
 656:	8f 91       	pop	r24
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 686:	8a e2       	ldi	r24, 0x2A	; 42
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	0e 94 11 02 	call	0x422	; 0x422 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	bf 91       	pop	r27
 694:	af 91       	pop	r26
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	7f 91       	pop	r23
 69c:	6f 91       	pop	r22
 69e:	5f 91       	pop	r21
 6a0:	4f 91       	pop	r20
 6a2:	3f 91       	pop	r19
 6a4:	2f 91       	pop	r18
 6a6:	0f 90       	pop	r0
 6a8:	0f be       	out	0x3f, r0	; 63
 6aa:	0f 90       	pop	r0
 6ac:	1f 90       	pop	r1
 6ae:	18 95       	reti

000006b0 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 6b0:	8a e2       	ldi	r24, 0x2A	; 42
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_ZN14HardwareSerial9availableEv>
 6b8:	21 e0       	ldi	r18, 0x01	; 1
 6ba:	89 2b       	or	r24, r25
 6bc:	09 f4       	brne	.+2      	; 0x6c0 <_Z17Serial0_availablev+0x10>
 6be:	20 e0       	ldi	r18, 0x00	; 0
}
 6c0:	82 2f       	mov	r24, r18
 6c2:	08 95       	ret

000006c4 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 6c4:	ea e2       	ldi	r30, 0x2A	; 42
 6c6:	f1 e0       	ldi	r31, 0x01	; 1
 6c8:	13 82       	std	Z+3, r1	; 0x03
 6ca:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 6cc:	88 ee       	ldi	r24, 0xE8	; 232
 6ce:	93 e0       	ldi	r25, 0x03	; 3
 6d0:	a0 e0       	ldi	r26, 0x00	; 0
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	84 83       	std	Z+4, r24	; 0x04
 6d6:	95 83       	std	Z+5, r25	; 0x05
 6d8:	a6 83       	std	Z+6, r26	; 0x06
 6da:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 6dc:	8a e0       	ldi	r24, 0x0A	; 10
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	91 83       	std	Z+1, r25	; 0x01
 6e2:	80 83       	st	Z, r24
 6e4:	85 ec       	ldi	r24, 0xC5	; 197
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	95 87       	std	Z+13, r25	; 0x0d
 6ea:	84 87       	std	Z+12, r24	; 0x0c
 6ec:	84 ec       	ldi	r24, 0xC4	; 196
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	97 87       	std	Z+15, r25	; 0x0f
 6f2:	86 87       	std	Z+14, r24	; 0x0e
 6f4:	80 ec       	ldi	r24, 0xC0	; 192
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	91 8b       	std	Z+17, r25	; 0x11
 6fa:	80 8b       	std	Z+16, r24	; 0x10
 6fc:	81 ec       	ldi	r24, 0xC1	; 193
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	93 8b       	std	Z+19, r25	; 0x13
 702:	82 8b       	std	Z+18, r24	; 0x12
 704:	82 ec       	ldi	r24, 0xC2	; 194
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	95 8b       	std	Z+21, r25	; 0x15
 70a:	84 8b       	std	Z+20, r24	; 0x14
 70c:	86 ec       	ldi	r24, 0xC6	; 198
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	97 8b       	std	Z+23, r25	; 0x17
 712:	86 8b       	std	Z+22, r24	; 0x16
 714:	11 8e       	std	Z+25, r1	; 0x19
 716:	12 8e       	std	Z+26, r1	; 0x1a
 718:	13 8e       	std	Z+27, r1	; 0x1b
 71a:	14 8e       	std	Z+28, r1	; 0x1c
 71c:	08 95       	ret

0000071e <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 71e:	08 95       	ret

00000720 <main>:

int main(void)
{
	init();
 720:	0e 94 53 05 	call	0xaa6	; 0xaa6 <init>

	initVariant();
 724:	0e 94 8f 03 	call	0x71e	; 0x71e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 728:	0e 94 32 01 	call	0x264	; 0x264 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 72c:	c3 e0       	ldi	r28, 0x03	; 3
 72e:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 730:	0e 94 5f 01 	call	0x2be	; 0x2be <loop>
		if (serialEventRun) serialEventRun();
 734:	20 97       	sbiw	r28, 0x00	; 0
 736:	e1 f3       	breq	.-8      	; 0x730 <main+0x10>
 738:	0e 94 03 02 	call	0x406	; 0x406 <_Z14serialEventRunv>
 73c:	f9 cf       	rjmp	.-14     	; 0x730 <main+0x10>

0000073e <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
 73e:	cf 92       	push	r12
 740:	df 92       	push	r13
 742:	ef 92       	push	r14
 744:	ff 92       	push	r15
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	6c 01       	movw	r12, r24
 750:	7a 01       	movw	r14, r20
 752:	8b 01       	movw	r16, r22
 754:	c0 e0       	ldi	r28, 0x00	; 0
 756:	d0 e0       	ldi	r29, 0x00	; 0
 758:	ce 15       	cp	r28, r14
 75a:	df 05       	cpc	r29, r15
 75c:	89 f0       	breq	.+34     	; 0x780 <_ZN5Print5writeEPKhj+0x42>
 75e:	d8 01       	movw	r26, r16
 760:	6d 91       	ld	r22, X+
 762:	8d 01       	movw	r16, r26
 764:	d6 01       	movw	r26, r12
 766:	ed 91       	ld	r30, X+
 768:	fc 91       	ld	r31, X
 76a:	01 90       	ld	r0, Z+
 76c:	f0 81       	ld	r31, Z
 76e:	e0 2d       	mov	r30, r0
 770:	c6 01       	movw	r24, r12
 772:	09 95       	icall
 774:	89 2b       	or	r24, r25
 776:	11 f4       	brne	.+4      	; 0x77c <_ZN5Print5writeEPKhj+0x3e>
 778:	7e 01       	movw	r14, r28
 77a:	02 c0       	rjmp	.+4      	; 0x780 <_ZN5Print5writeEPKhj+0x42>
 77c:	21 96       	adiw	r28, 0x01	; 1
 77e:	ec cf       	rjmp	.-40     	; 0x758 <_ZN5Print5writeEPKhj+0x1a>
 780:	c7 01       	movw	r24, r14
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	0f 91       	pop	r16
 78a:	ff 90       	pop	r15
 78c:	ef 90       	pop	r14
 78e:	df 90       	pop	r13
 790:	cf 90       	pop	r12
 792:	08 95       	ret

00000794 <_ZN5Print5writeEPKc>:
 794:	61 15       	cp	r22, r1
 796:	71 05       	cpc	r23, r1
 798:	79 f0       	breq	.+30     	; 0x7b8 <_ZN5Print5writeEPKc+0x24>
 79a:	fb 01       	movw	r30, r22
 79c:	01 90       	ld	r0, Z+
 79e:	00 20       	and	r0, r0
 7a0:	e9 f7       	brne	.-6      	; 0x79c <_ZN5Print5writeEPKc+0x8>
 7a2:	31 97       	sbiw	r30, 0x01	; 1
 7a4:	af 01       	movw	r20, r30
 7a6:	46 1b       	sub	r20, r22
 7a8:	57 0b       	sbc	r21, r23
 7aa:	dc 01       	movw	r26, r24
 7ac:	ed 91       	ld	r30, X+
 7ae:	fc 91       	ld	r31, X
 7b0:	02 80       	ldd	r0, Z+2	; 0x02
 7b2:	f3 81       	ldd	r31, Z+3	; 0x03
 7b4:	e0 2d       	mov	r30, r0
 7b6:	09 94       	ijmp
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	08 95       	ret

000007be <_ZN5Print5printEPKc>:
 7be:	0c 94 ca 03 	jmp	0x794	; 0x794 <_ZN5Print5writeEPKc>

000007c2 <_ZN5Print5printEc>:
 7c2:	dc 01       	movw	r26, r24
 7c4:	ed 91       	ld	r30, X+
 7c6:	fc 91       	ld	r31, X
 7c8:	01 90       	ld	r0, Z+
 7ca:	f0 81       	ld	r31, Z
 7cc:	e0 2d       	mov	r30, r0
 7ce:	09 94       	ijmp

000007d0 <_ZN5Print7printlnEv>:
 7d0:	66 e1       	ldi	r22, 0x16	; 22
 7d2:	71 e0       	ldi	r23, 0x01	; 1
 7d4:	0c 94 ca 03 	jmp	0x794	; 0x794 <_ZN5Print5writeEPKc>

000007d8 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 7d8:	8f 92       	push	r8
 7da:	9f 92       	push	r9
 7dc:	af 92       	push	r10
 7de:	bf 92       	push	r11
 7e0:	cf 92       	push	r12
 7e2:	df 92       	push	r13
 7e4:	ef 92       	push	r14
 7e6:	ff 92       	push	r15
 7e8:	0f 93       	push	r16
 7ea:	1f 93       	push	r17
 7ec:	cf 93       	push	r28
 7ee:	df 93       	push	r29
 7f0:	cd b7       	in	r28, 0x3d	; 61
 7f2:	de b7       	in	r29, 0x3e	; 62
 7f4:	a1 97       	sbiw	r28, 0x21	; 33
 7f6:	0f b6       	in	r0, 0x3f	; 63
 7f8:	f8 94       	cli
 7fa:	de bf       	out	0x3e, r29	; 62
 7fc:	0f be       	out	0x3f, r0	; 63
 7fe:	cd bf       	out	0x3d, r28	; 61
 800:	7c 01       	movw	r14, r24
 802:	d4 2e       	mov	r13, r20
 804:	c5 2e       	mov	r12, r21
 806:	db 01       	movw	r26, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a:	22 30       	cpi	r18, 0x02	; 2
 80c:	08 f4       	brcc	.+2      	; 0x810 <_ZN5Print11printNumberEmh+0x38>
 80e:	2a e0       	ldi	r18, 0x0A	; 10
 810:	8e 01       	movw	r16, r28
 812:	0f 5d       	subi	r16, 0xDF	; 223
 814:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
 816:	82 2e       	mov	r8, r18
 818:	91 2c       	mov	r9, r1
 81a:	a1 2c       	mov	r10, r1
 81c:	b1 2c       	mov	r11, r1
 81e:	6d 2d       	mov	r22, r13
 820:	7c 2d       	mov	r23, r12
 822:	cd 01       	movw	r24, r26
 824:	a5 01       	movw	r20, r10
 826:	94 01       	movw	r18, r8
 828:	0e 94 4d 06 	call	0xc9a	; 0xc9a <__udivmodsi4>
    n /= base;
 82c:	d2 2e       	mov	r13, r18
 82e:	c3 2e       	mov	r12, r19
 830:	da 01       	movw	r26, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 832:	01 50       	subi	r16, 0x01	; 1
 834:	11 09       	sbc	r17, r1
 836:	6a 30       	cpi	r22, 0x0A	; 10
 838:	71 05       	cpc	r23, r1
 83a:	81 05       	cpc	r24, r1
 83c:	91 05       	cpc	r25, r1
 83e:	10 f4       	brcc	.+4      	; 0x844 <_ZN5Print11printNumberEmh+0x6c>
 840:	60 5d       	subi	r22, 0xD0	; 208
 842:	01 c0       	rjmp	.+2      	; 0x846 <_ZN5Print11printNumberEmh+0x6e>
 844:	69 5c       	subi	r22, 0xC9	; 201
 846:	f8 01       	movw	r30, r16
 848:	60 83       	st	Z, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 84a:	23 2b       	or	r18, r19
 84c:	24 2b       	or	r18, r20
 84e:	25 2b       	or	r18, r21
 850:	31 f7       	brne	.-52     	; 0x81e <_ZN5Print11printNumberEmh+0x46>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 852:	b8 01       	movw	r22, r16
 854:	c7 01       	movw	r24, r14
 856:	0e 94 ca 03 	call	0x794	; 0x794 <_ZN5Print5writeEPKc>
}
 85a:	a1 96       	adiw	r28, 0x21	; 33
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	df 90       	pop	r13
 874:	cf 90       	pop	r12
 876:	bf 90       	pop	r11
 878:	af 90       	pop	r10
 87a:	9f 90       	pop	r9
 87c:	8f 90       	pop	r8
 87e:	08 95       	ret

00000880 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 880:	cf 92       	push	r12
 882:	df 92       	push	r13
 884:	ef 92       	push	r14
 886:	ff 92       	push	r15
 888:	0f 93       	push	r16
 88a:	1f 93       	push	r17
 88c:	cf 93       	push	r28
 88e:	df 93       	push	r29
 890:	ec 01       	movw	r28, r24
 892:	6a 01       	movw	r12, r20
 894:	7b 01       	movw	r14, r22
  if (base == 0) {
 896:	21 15       	cp	r18, r1
 898:	31 05       	cpc	r19, r1
 89a:	79 f4       	brne	.+30     	; 0x8ba <_ZN5Print5printEli+0x3a>
    return write(n);
 89c:	e8 81       	ld	r30, Y
 89e:	f9 81       	ldd	r31, Y+1	; 0x01
 8a0:	01 90       	ld	r0, Z+
 8a2:	f0 81       	ld	r31, Z
 8a4:	e0 2d       	mov	r30, r0
 8a6:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	ff 90       	pop	r15
 8b2:	ef 90       	pop	r14
 8b4:	df 90       	pop	r13
 8b6:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8b8:	09 94       	ijmp
  } else if (base == 10) {
 8ba:	2a 30       	cpi	r18, 0x0A	; 10
 8bc:	31 05       	cpc	r19, r1
 8be:	e9 f4       	brne	.+58     	; 0x8fa <_ZN5Print5printEli+0x7a>
    if (n < 0) {
 8c0:	77 ff       	sbrs	r23, 7
 8c2:	1a c0       	rjmp	.+52     	; 0x8f8 <_ZN5Print5printEli+0x78>
      int t = print('-');
 8c4:	6d e2       	ldi	r22, 0x2D	; 45
 8c6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <_ZN5Print5printEc>
 8ca:	8c 01       	movw	r16, r24
      n = -n;
 8cc:	44 27       	eor	r20, r20
 8ce:	55 27       	eor	r21, r21
 8d0:	ba 01       	movw	r22, r20
 8d2:	4c 19       	sub	r20, r12
 8d4:	5d 09       	sbc	r21, r13
 8d6:	6e 09       	sbc	r22, r14
 8d8:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
 8da:	2a e0       	ldi	r18, 0x0A	; 10
 8dc:	ce 01       	movw	r24, r28
 8de:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN5Print11printNumberEmh>
 8e2:	80 0f       	add	r24, r16
 8e4:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	1f 91       	pop	r17
 8ec:	0f 91       	pop	r16
 8ee:	ff 90       	pop	r15
 8f0:	ef 90       	pop	r14
 8f2:	df 90       	pop	r13
 8f4:	cf 90       	pop	r12
 8f6:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 8f8:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
 8fa:	b7 01       	movw	r22, r14
 8fc:	a6 01       	movw	r20, r12
 8fe:	ce 01       	movw	r24, r28
  }
}
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	ff 90       	pop	r15
 90a:	ef 90       	pop	r14
 90c:	df 90       	pop	r13
 90e:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 910:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <_ZN5Print11printNumberEmh>

00000914 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
 914:	9a 01       	movw	r18, r20
  return print((long) n, base);
 916:	ab 01       	movw	r20, r22
 918:	77 0f       	add	r23, r23
 91a:	66 0b       	sbc	r22, r22
 91c:	77 0b       	sbc	r23, r23
 91e:	0c 94 40 04 	jmp	0x880	; 0x880 <_ZN5Print5printEli>

00000922 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 922:	0f 93       	push	r16
 924:	1f 93       	push	r17
 926:	cf 93       	push	r28
 928:	df 93       	push	r29
 92a:	ec 01       	movw	r28, r24
 92c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 92e:	ab 01       	movw	r20, r22
 930:	77 0f       	add	r23, r23
 932:	66 0b       	sbc	r22, r22
 934:	77 0b       	sbc	r23, r23
 936:	0e 94 40 04 	call	0x880	; 0x880 <_ZN5Print5printEli>
 93a:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 93c:	ce 01       	movw	r24, r28
 93e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <_ZN5Print7printlnEv>
  return n;
}
 942:	80 0f       	add	r24, r16
 944:	91 1f       	adc	r25, r17
 946:	df 91       	pop	r29
 948:	cf 91       	pop	r28
 94a:	1f 91       	pop	r17
 94c:	0f 91       	pop	r16
 94e:	08 95       	ret

00000950 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 950:	1f 92       	push	r1
 952:	0f 92       	push	r0
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	0f 92       	push	r0
 958:	11 24       	eor	r1, r1
 95a:	2f 93       	push	r18
 95c:	3f 93       	push	r19
 95e:	8f 93       	push	r24
 960:	9f 93       	push	r25
 962:	af 93       	push	r26
 964:	bf 93       	push	r27
 966:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <timer0_millis>
 96a:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <timer0_millis+0x1>
 96e:	a0 91 ca 01 	lds	r26, 0x01CA	; 0x8001ca <timer0_millis+0x2>
 972:	b0 91 cb 01 	lds	r27, 0x01CB	; 0x8001cb <timer0_millis+0x3>
 976:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <timer0_fract>
 97a:	23 e0       	ldi	r18, 0x03	; 3
 97c:	23 0f       	add	r18, r19
 97e:	2d 37       	cpi	r18, 0x7D	; 125
 980:	20 f4       	brcc	.+8      	; 0x98a <__vector_16+0x3a>
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	a1 1d       	adc	r26, r1
 986:	b1 1d       	adc	r27, r1
 988:	05 c0       	rjmp	.+10     	; 0x994 <__vector_16+0x44>
 98a:	26 e8       	ldi	r18, 0x86	; 134
 98c:	23 0f       	add	r18, r19
 98e:	02 96       	adiw	r24, 0x02	; 2
 990:	a1 1d       	adc	r26, r1
 992:	b1 1d       	adc	r27, r1
 994:	20 93 c7 01 	sts	0x01C7, r18	; 0x8001c7 <timer0_fract>
 998:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <timer0_millis>
 99c:	90 93 c9 01 	sts	0x01C9, r25	; 0x8001c9 <timer0_millis+0x1>
 9a0:	a0 93 ca 01 	sts	0x01CA, r26	; 0x8001ca <timer0_millis+0x2>
 9a4:	b0 93 cb 01 	sts	0x01CB, r27	; 0x8001cb <timer0_millis+0x3>
 9a8:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <timer0_overflow_count>
 9ac:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <timer0_overflow_count+0x1>
 9b0:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <timer0_overflow_count+0x2>
 9b4:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <timer0_overflow_count+0x3>
 9b8:	01 96       	adiw	r24, 0x01	; 1
 9ba:	a1 1d       	adc	r26, r1
 9bc:	b1 1d       	adc	r27, r1
 9be:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <timer0_overflow_count>
 9c2:	90 93 cd 01 	sts	0x01CD, r25	; 0x8001cd <timer0_overflow_count+0x1>
 9c6:	a0 93 ce 01 	sts	0x01CE, r26	; 0x8001ce <timer0_overflow_count+0x2>
 9ca:	b0 93 cf 01 	sts	0x01CF, r27	; 0x8001cf <timer0_overflow_count+0x3>
 9ce:	bf 91       	pop	r27
 9d0:	af 91       	pop	r26
 9d2:	9f 91       	pop	r25
 9d4:	8f 91       	pop	r24
 9d6:	3f 91       	pop	r19
 9d8:	2f 91       	pop	r18
 9da:	0f 90       	pop	r0
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	0f 90       	pop	r0
 9e0:	1f 90       	pop	r1
 9e2:	18 95       	reti

000009e4 <micros>:
 9e4:	3f b7       	in	r19, 0x3f	; 63
 9e6:	f8 94       	cli
 9e8:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <timer0_overflow_count>
 9ec:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <timer0_overflow_count+0x1>
 9f0:	a0 91 ce 01 	lds	r26, 0x01CE	; 0x8001ce <timer0_overflow_count+0x2>
 9f4:	b0 91 cf 01 	lds	r27, 0x01CF	; 0x8001cf <timer0_overflow_count+0x3>
 9f8:	26 b5       	in	r18, 0x26	; 38
 9fa:	a8 9b       	sbis	0x15, 0	; 21
 9fc:	05 c0       	rjmp	.+10     	; 0xa08 <micros+0x24>
 9fe:	2f 3f       	cpi	r18, 0xFF	; 255
 a00:	19 f0       	breq	.+6      	; 0xa08 <micros+0x24>
 a02:	01 96       	adiw	r24, 0x01	; 1
 a04:	a1 1d       	adc	r26, r1
 a06:	b1 1d       	adc	r27, r1
 a08:	3f bf       	out	0x3f, r19	; 63
 a0a:	ba 2f       	mov	r27, r26
 a0c:	a9 2f       	mov	r26, r25
 a0e:	98 2f       	mov	r25, r24
 a10:	88 27       	eor	r24, r24
 a12:	82 0f       	add	r24, r18
 a14:	91 1d       	adc	r25, r1
 a16:	a1 1d       	adc	r26, r1
 a18:	b1 1d       	adc	r27, r1
 a1a:	bc 01       	movw	r22, r24
 a1c:	cd 01       	movw	r24, r26
 a1e:	42 e0       	ldi	r20, 0x02	; 2
 a20:	66 0f       	add	r22, r22
 a22:	77 1f       	adc	r23, r23
 a24:	88 1f       	adc	r24, r24
 a26:	99 1f       	adc	r25, r25
 a28:	4a 95       	dec	r20
 a2a:	d1 f7       	brne	.-12     	; 0xa20 <micros+0x3c>
 a2c:	08 95       	ret

00000a2e <delay>:
 a2e:	8f 92       	push	r8
 a30:	9f 92       	push	r9
 a32:	af 92       	push	r10
 a34:	bf 92       	push	r11
 a36:	cf 92       	push	r12
 a38:	df 92       	push	r13
 a3a:	ef 92       	push	r14
 a3c:	ff 92       	push	r15
 a3e:	6b 01       	movw	r12, r22
 a40:	7c 01       	movw	r14, r24
 a42:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <micros>
 a46:	4b 01       	movw	r8, r22
 a48:	5c 01       	movw	r10, r24
 a4a:	c1 14       	cp	r12, r1
 a4c:	d1 04       	cpc	r13, r1
 a4e:	e1 04       	cpc	r14, r1
 a50:	f1 04       	cpc	r15, r1
 a52:	01 f1       	breq	.+64     	; 0xa94 <delay+0x66>
 a54:	0e 94 4c 06 	call	0xc98	; 0xc98 <yield>
 a58:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <micros>
 a5c:	dc 01       	movw	r26, r24
 a5e:	cb 01       	movw	r24, r22
 a60:	88 19       	sub	r24, r8
 a62:	99 09       	sbc	r25, r9
 a64:	aa 09       	sbc	r26, r10
 a66:	bb 09       	sbc	r27, r11
 a68:	88 3e       	cpi	r24, 0xE8	; 232
 a6a:	93 40       	sbci	r25, 0x03	; 3
 a6c:	a1 05       	cpc	r26, r1
 a6e:	b1 05       	cpc	r27, r1
 a70:	60 f3       	brcs	.-40     	; 0xa4a <delay+0x1c>
 a72:	21 e0       	ldi	r18, 0x01	; 1
 a74:	c2 1a       	sub	r12, r18
 a76:	d1 08       	sbc	r13, r1
 a78:	e1 08       	sbc	r14, r1
 a7a:	f1 08       	sbc	r15, r1
 a7c:	88 ee       	ldi	r24, 0xE8	; 232
 a7e:	88 0e       	add	r8, r24
 a80:	83 e0       	ldi	r24, 0x03	; 3
 a82:	98 1e       	adc	r9, r24
 a84:	a1 1c       	adc	r10, r1
 a86:	b1 1c       	adc	r11, r1
 a88:	c1 14       	cp	r12, r1
 a8a:	d1 04       	cpc	r13, r1
 a8c:	e1 04       	cpc	r14, r1
 a8e:	f1 04       	cpc	r15, r1
 a90:	19 f7       	brne	.-58     	; 0xa58 <delay+0x2a>
 a92:	db cf       	rjmp	.-74     	; 0xa4a <delay+0x1c>
 a94:	ff 90       	pop	r15
 a96:	ef 90       	pop	r14
 a98:	df 90       	pop	r13
 a9a:	cf 90       	pop	r12
 a9c:	bf 90       	pop	r11
 a9e:	af 90       	pop	r10
 aa0:	9f 90       	pop	r9
 aa2:	8f 90       	pop	r8
 aa4:	08 95       	ret

00000aa6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 aa6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 aa8:	84 b5       	in	r24, 0x24	; 36
 aaa:	82 60       	ori	r24, 0x02	; 2
 aac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 aae:	84 b5       	in	r24, 0x24	; 36
 ab0:	81 60       	ori	r24, 0x01	; 1
 ab2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 ab4:	85 b5       	in	r24, 0x25	; 37
 ab6:	82 60       	ori	r24, 0x02	; 2
 ab8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 aba:	85 b5       	in	r24, 0x25	; 37
 abc:	81 60       	ori	r24, 0x01	; 1
 abe:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 ac0:	ee e6       	ldi	r30, 0x6E	; 110
 ac2:	f0 e0       	ldi	r31, 0x00	; 0
 ac4:	80 81       	ld	r24, Z
 ac6:	81 60       	ori	r24, 0x01	; 1
 ac8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 aca:	e1 e8       	ldi	r30, 0x81	; 129
 acc:	f0 e0       	ldi	r31, 0x00	; 0
 ace:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 ad0:	80 81       	ld	r24, Z
 ad2:	82 60       	ori	r24, 0x02	; 2
 ad4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 ad6:	80 81       	ld	r24, Z
 ad8:	81 60       	ori	r24, 0x01	; 1
 ada:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 adc:	e0 e8       	ldi	r30, 0x80	; 128
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	80 81       	ld	r24, Z
 ae2:	81 60       	ori	r24, 0x01	; 1
 ae4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 ae6:	e1 eb       	ldi	r30, 0xB1	; 177
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	80 81       	ld	r24, Z
 aec:	84 60       	ori	r24, 0x04	; 4
 aee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 af0:	e0 eb       	ldi	r30, 0xB0	; 176
 af2:	f0 e0       	ldi	r31, 0x00	; 0
 af4:	80 81       	ld	r24, Z
 af6:	81 60       	ori	r24, 0x01	; 1
 af8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 afa:	ea e7       	ldi	r30, 0x7A	; 122
 afc:	f0 e0       	ldi	r31, 0x00	; 0
 afe:	80 81       	ld	r24, Z
 b00:	84 60       	ori	r24, 0x04	; 4
 b02:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 b04:	80 81       	ld	r24, Z
 b06:	82 60       	ori	r24, 0x02	; 2
 b08:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 b0a:	80 81       	ld	r24, Z
 b0c:	81 60       	ori	r24, 0x01	; 1
 b0e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 b10:	80 81       	ld	r24, Z
 b12:	80 68       	ori	r24, 0x80	; 128
 b14:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 b16:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 b1a:	08 95       	ret

00000b1c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 b1c:	83 30       	cpi	r24, 0x03	; 3
 b1e:	81 f0       	breq	.+32     	; 0xb40 <turnOffPWM+0x24>
 b20:	28 f4       	brcc	.+10     	; 0xb2c <turnOffPWM+0x10>
 b22:	81 30       	cpi	r24, 0x01	; 1
 b24:	99 f0       	breq	.+38     	; 0xb4c <turnOffPWM+0x30>
 b26:	82 30       	cpi	r24, 0x02	; 2
 b28:	a1 f0       	breq	.+40     	; 0xb52 <turnOffPWM+0x36>
 b2a:	08 95       	ret
 b2c:	87 30       	cpi	r24, 0x07	; 7
 b2e:	a9 f0       	breq	.+42     	; 0xb5a <turnOffPWM+0x3e>
 b30:	88 30       	cpi	r24, 0x08	; 8
 b32:	b9 f0       	breq	.+46     	; 0xb62 <turnOffPWM+0x46>
 b34:	84 30       	cpi	r24, 0x04	; 4
 b36:	d1 f4       	brne	.+52     	; 0xb6c <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 b38:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 b3c:	8f 7d       	andi	r24, 0xDF	; 223
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 b40:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 b44:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 b46:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 b4a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 b4c:	84 b5       	in	r24, 0x24	; 36
 b4e:	8f 77       	andi	r24, 0x7F	; 127
 b50:	02 c0       	rjmp	.+4      	; 0xb56 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 b52:	84 b5       	in	r24, 0x24	; 36
 b54:	8f 7d       	andi	r24, 0xDF	; 223
 b56:	84 bd       	out	0x24, r24	; 36
 b58:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 b5a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 b5e:	8f 77       	andi	r24, 0x7F	; 127
 b60:	03 c0       	rjmp	.+6      	; 0xb68 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 b62:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 b66:	8f 7d       	andi	r24, 0xDF	; 223
 b68:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 b6c:	08 95       	ret

00000b6e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	fc 01       	movw	r30, r24
 b76:	e4 58       	subi	r30, 0x84	; 132
 b78:	ff 4f       	sbci	r31, 0xFF	; 255
 b7a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 b7c:	fc 01       	movw	r30, r24
 b7e:	e0 57       	subi	r30, 0x70	; 112
 b80:	ff 4f       	sbci	r31, 0xFF	; 255
 b82:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 b84:	88 23       	and	r24, r24
 b86:	61 f1       	breq	.+88     	; 0xbe0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	fc 01       	movw	r30, r24
 b90:	e8 54       	subi	r30, 0x48	; 72
 b92:	ff 4f       	sbci	r31, 0xFF	; 255
 b94:	c5 91       	lpm	r28, Z+
 b96:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 b98:	fc 01       	movw	r30, r24
 b9a:	e2 55       	subi	r30, 0x52	; 82
 b9c:	ff 4f       	sbci	r31, 0xFF	; 255
 b9e:	a5 91       	lpm	r26, Z+
 ba0:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 ba2:	61 11       	cpse	r22, r1
 ba4:	09 c0       	rjmp	.+18     	; 0xbb8 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 ba6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ba8:	f8 94       	cli
		*reg &= ~bit;
 baa:	88 81       	ld	r24, Y
 bac:	20 95       	com	r18
 bae:	82 23       	and	r24, r18
 bb0:	88 83       	st	Y, r24
		*out &= ~bit;
 bb2:	ec 91       	ld	r30, X
 bb4:	2e 23       	and	r18, r30
 bb6:	0b c0       	rjmp	.+22     	; 0xbce <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 bb8:	62 30       	cpi	r22, 0x02	; 2
 bba:	61 f4       	brne	.+24     	; 0xbd4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 bbc:	9f b7       	in	r25, 0x3f	; 63
                cli();
 bbe:	f8 94       	cli
		*reg &= ~bit;
 bc0:	38 81       	ld	r19, Y
 bc2:	82 2f       	mov	r24, r18
 bc4:	80 95       	com	r24
 bc6:	83 23       	and	r24, r19
 bc8:	88 83       	st	Y, r24
		*out |= bit;
 bca:	ec 91       	ld	r30, X
 bcc:	2e 2b       	or	r18, r30
 bce:	2c 93       	st	X, r18
		SREG = oldSREG;
 bd0:	9f bf       	out	0x3f, r25	; 63
 bd2:	06 c0       	rjmp	.+12     	; 0xbe0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 bd4:	8f b7       	in	r24, 0x3f	; 63
                cli();
 bd6:	f8 94       	cli
		*reg |= bit;
 bd8:	e8 81       	ld	r30, Y
 bda:	2e 2b       	or	r18, r30
 bdc:	28 83       	st	Y, r18
		SREG = oldSREG;
 bde:	8f bf       	out	0x3f, r24	; 63
	}
}
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	08 95       	ret

00000be6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 be6:	1f 93       	push	r17
 be8:	cf 93       	push	r28
 bea:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 bec:	28 2f       	mov	r18, r24
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	f9 01       	movw	r30, r18
 bf2:	e8 59       	subi	r30, 0x98	; 152
 bf4:	ff 4f       	sbci	r31, 0xFF	; 255
 bf6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 bf8:	f9 01       	movw	r30, r18
 bfa:	e4 58       	subi	r30, 0x84	; 132
 bfc:	ff 4f       	sbci	r31, 0xFF	; 255
 bfe:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 c00:	f9 01       	movw	r30, r18
 c02:	e0 57       	subi	r30, 0x70	; 112
 c04:	ff 4f       	sbci	r31, 0xFF	; 255
 c06:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 c08:	cc 23       	and	r28, r28
 c0a:	c9 f0       	breq	.+50     	; 0xc3e <digitalWrite+0x58>
 c0c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 c0e:	81 11       	cpse	r24, r1
 c10:	0e 94 8e 05 	call	0xb1c	; 0xb1c <turnOffPWM>

	out = portOutputRegister(port);
 c14:	ec 2f       	mov	r30, r28
 c16:	f0 e0       	ldi	r31, 0x00	; 0
 c18:	ee 0f       	add	r30, r30
 c1a:	ff 1f       	adc	r31, r31
 c1c:	e2 55       	subi	r30, 0x52	; 82
 c1e:	ff 4f       	sbci	r31, 0xFF	; 255
 c20:	a5 91       	lpm	r26, Z+
 c22:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 c24:	8f b7       	in	r24, 0x3f	; 63
	cli();
 c26:	f8 94       	cli

	if (val == LOW) {
 c28:	11 11       	cpse	r17, r1
 c2a:	05 c0       	rjmp	.+10     	; 0xc36 <digitalWrite+0x50>
		*out &= ~bit;
 c2c:	9c 91       	ld	r25, X
 c2e:	ed 2f       	mov	r30, r29
 c30:	e0 95       	com	r30
 c32:	e9 23       	and	r30, r25
 c34:	02 c0       	rjmp	.+4      	; 0xc3a <digitalWrite+0x54>
	} else {
		*out |= bit;
 c36:	ec 91       	ld	r30, X
 c38:	ed 2b       	or	r30, r29
 c3a:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 c3c:	8f bf       	out	0x3f, r24	; 63
}
 c3e:	df 91       	pop	r29
 c40:	cf 91       	pop	r28
 c42:	1f 91       	pop	r17
 c44:	08 95       	ret

00000c46 <digitalRead>:

int digitalRead(uint8_t pin)
{
 c46:	cf 93       	push	r28
 c48:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 c4a:	28 2f       	mov	r18, r24
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	f9 01       	movw	r30, r18
 c50:	e8 59       	subi	r30, 0x98	; 152
 c52:	ff 4f       	sbci	r31, 0xFF	; 255
 c54:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 c56:	f9 01       	movw	r30, r18
 c58:	e4 58       	subi	r30, 0x84	; 132
 c5a:	ff 4f       	sbci	r31, 0xFF	; 255
 c5c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 c5e:	f9 01       	movw	r30, r18
 c60:	e0 57       	subi	r30, 0x70	; 112
 c62:	ff 4f       	sbci	r31, 0xFF	; 255
 c64:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 c66:	cc 23       	and	r28, r28
 c68:	91 f0       	breq	.+36     	; 0xc8e <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 c6a:	81 11       	cpse	r24, r1
 c6c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 c70:	ec 2f       	mov	r30, r28
 c72:	f0 e0       	ldi	r31, 0x00	; 0
 c74:	ee 0f       	add	r30, r30
 c76:	ff 1f       	adc	r31, r31
 c78:	ec 55       	subi	r30, 0x5C	; 92
 c7a:	ff 4f       	sbci	r31, 0xFF	; 255
 c7c:	a5 91       	lpm	r26, Z+
 c7e:	b4 91       	lpm	r27, Z
 c80:	ec 91       	ld	r30, X
 c82:	ed 23       	and	r30, r29
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	21 f4       	brne	.+8      	; 0xc92 <digitalRead+0x4c>
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	02 c0       	rjmp	.+4      	; 0xc92 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 c8e:	80 e0       	ldi	r24, 0x00	; 0
 c90:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 c92:	df 91       	pop	r29
 c94:	cf 91       	pop	r28
 c96:	08 95       	ret

00000c98 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 c98:	08 95       	ret

00000c9a <__udivmodsi4>:
 c9a:	a1 e2       	ldi	r26, 0x21	; 33
 c9c:	1a 2e       	mov	r1, r26
 c9e:	aa 1b       	sub	r26, r26
 ca0:	bb 1b       	sub	r27, r27
 ca2:	fd 01       	movw	r30, r26
 ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <__udivmodsi4_ep>

00000ca6 <__udivmodsi4_loop>:
 ca6:	aa 1f       	adc	r26, r26
 ca8:	bb 1f       	adc	r27, r27
 caa:	ee 1f       	adc	r30, r30
 cac:	ff 1f       	adc	r31, r31
 cae:	a2 17       	cp	r26, r18
 cb0:	b3 07       	cpc	r27, r19
 cb2:	e4 07       	cpc	r30, r20
 cb4:	f5 07       	cpc	r31, r21
 cb6:	20 f0       	brcs	.+8      	; 0xcc0 <__udivmodsi4_ep>
 cb8:	a2 1b       	sub	r26, r18
 cba:	b3 0b       	sbc	r27, r19
 cbc:	e4 0b       	sbc	r30, r20
 cbe:	f5 0b       	sbc	r31, r21

00000cc0 <__udivmodsi4_ep>:
 cc0:	66 1f       	adc	r22, r22
 cc2:	77 1f       	adc	r23, r23
 cc4:	88 1f       	adc	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	1a 94       	dec	r1
 cca:	69 f7       	brne	.-38     	; 0xca6 <__udivmodsi4_loop>
 ccc:	60 95       	com	r22
 cce:	70 95       	com	r23
 cd0:	80 95       	com	r24
 cd2:	90 95       	com	r25
 cd4:	9b 01       	movw	r18, r22
 cd6:	ac 01       	movw	r20, r24
 cd8:	bd 01       	movw	r22, r26
 cda:	cf 01       	movw	r24, r30
 cdc:	08 95       	ret

00000cde <__tablejump2__>:
 cde:	ee 0f       	add	r30, r30
 ce0:	ff 1f       	adc	r31, r31
 ce2:	05 90       	lpm	r0, Z+
 ce4:	f4 91       	lpm	r31, Z
 ce6:	e0 2d       	mov	r30, r0
 ce8:	09 94       	ijmp

00000cea <_exit>:
 cea:	f8 94       	cli

00000cec <__stop_program>:
 cec:	ff cf       	rjmp	.-2      	; 0xcec <__stop_program>
