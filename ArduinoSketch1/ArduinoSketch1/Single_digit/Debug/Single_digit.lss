
Single_digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000d54  00000de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800120  00800120  00000e08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008072  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b28  00000000  00000000  000091ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bd3  00000000  00000000  0000acf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  0000c8c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c8b  00000000  00000000  0000d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002eef  00000000  00000000  0000ed2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  00011c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 1f 03 	jmp	0x63e	; 0x63e <__vector_18>
  4c:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	81 03       	fmuls	r16, r17

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e4 e5       	ldi	r30, 0x54	; 84
  d8:	fd e0       	ldi	r31, 0x0D	; 13
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a0 32       	cpi	r26, 0x20	; 32
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a0 e2       	ldi	r26, 0x20	; 32
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a8 3c       	cpi	r26, 0xC8	; 200
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 a2 06 	call	0xd44	; 0xd44 <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 af 03 	call	0x75e	; 0x75e <main>
 110:	0c 94 a8 06 	jmp	0xd50	; 0xd50 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z11light_it_upv>:
#define button_hiss_B 5
#define foto_0 A0
#define foto_1 A1
#define foto_2 A2

void light_it_up(void){
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	static int i = 0;

	Serial.println(i);
 11c:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end>
 120:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x1>
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	82 e2       	ldi	r24, 0x22	; 34
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN5Print7printlnEii>

	//Clear LEDs
	digitalWrite(led_G,0);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	88 e0       	ldi	r24, 0x08	; 8
 134:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
	digitalWrite(led_R,0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	89 e0       	ldi	r24, 0x09	; 9
 13c:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
	digitalWrite(led_B,0);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	8a e0       	ldi	r24, 0x0A	; 10
 144:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
	// Keep only one LED alive
	if (i == 0){
 148:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 14c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 150:	89 2b       	or	r24, r25
 152:	21 f4       	brne	.+8      	; 0x15c <_Z11light_it_upv+0x44>
 		digitalWrite(led_G,1);
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	88 e0       	ldi	r24, 0x08	; 8
 158:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
	}
	if (i == 1){
 15c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 160:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	21 f4       	brne	.+8      	; 0x170 <_Z11light_it_upv+0x58>
 		digitalWrite(led_R,1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	89 e0       	ldi	r24, 0x09	; 9
 16c:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
	}
	if (i == 2){
 170:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 174:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 178:	02 97       	sbiw	r24, 0x02	; 2
 17a:	21 f4       	brne	.+8      	; 0x184 <_Z11light_it_upv+0x6c>
 		digitalWrite(led_B,1);
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	8a e0       	ldi	r24, 0x0A	; 10
 180:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
	}

	// All combinations for where you and the elevator are
	// 3s delay for one floor, 6s delay for two floors, 1s delay for pick up

	if ((digitalRead(button_G) == 0 || digitalRead(button_hiss_G)==0) && i == 2){
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 18a:	89 2b       	or	r24, r25
 18c:	39 f4       	brne	.+14     	; 0x19c <_Z11light_it_upv+0x84>
 18e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 192:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 196:	02 97       	sbiw	r24, 0x02	; 2
 198:	91 f5       	brne	.+100    	; 0x1fe <_Z11light_it_upv+0xe6>
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <_Z11light_it_upv+0x90>
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 1a2:	89 2b       	or	r24, r25
 1a4:	a1 f3       	breq	.-24     	; 0x18e <_Z11light_it_upv+0x76>
 1a6:	2b c0       	rjmp	.+86     	; 0x1fe <_Z11light_it_upv+0xe6>
 		i = 0;
 1a8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x1>
 1ac:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 		digitalWrite(led_G,1);
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	88 e0       	ldi	r24, 0x08	; 8
 1b4:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 1b8:	c4 e6       	ldi	r28, 0x64	; 100
 1ba:	d0 e0       	ldi	r29, 0x00	; 0
 		for (int jx = 0; jx <100; jx++){
 			if (digitalRead(button_hiss_R)==0){
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 1c2:	89 2b       	or	r24, r25
 1c4:	71 f4       	brne	.+28     	; 0x1e2 <_Z11light_it_upv+0xca>
 				digitalWrite(led_R,1);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	89 e0       	ldi	r24, 0x09	; 9
 1ca:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 				delay(1000);
 1ce:	68 ee       	ldi	r22, 0xE8	; 232
 1d0:	73 e0       	ldi	r23, 0x03	; 3
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
 				digitalWrite(led_B,0);
 1da:	60 e0       	ldi	r22, 0x00	; 0
 1dc:	8a e0       	ldi	r24, 0x0A	; 10
 1de:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 			}
 			delay(30);
 1e2:	6e e1       	ldi	r22, 0x1E	; 30
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
 1ee:	21 97       	sbiw	r28, 0x01	; 1
	// 3s delay for one floor, 6s delay for two floors, 1s delay for pick up

	if ((digitalRead(button_G) == 0 || digitalRead(button_hiss_G)==0) && i == 2){
 		i = 0;
 		digitalWrite(led_G,1);
 		for (int jx = 0; jx <100; jx++){
 1f0:	29 f7       	brne	.-54     	; 0x1bc <_Z11light_it_upv+0xa4>
 				delay(1000);
 				digitalWrite(led_B,0);
 			}
 			delay(30);
 		}
 		delay(3000);
 1f2:	68 eb       	ldi	r22, 0xB8	; 184
 1f4:	7b e0       	ldi	r23, 0x0B	; 11
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
	}
	if ((digitalRead(button_G)==0 || digitalRead(button_hiss_G)==0) && i == 1){
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 204:	89 2b       	or	r24, r25
 206:	39 f4       	brne	.+14     	; 0x216 <_Z11light_it_upv+0xfe>
 208:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 20c:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	31 f4       	brne	.+12     	; 0x220 <_Z11light_it_upv+0x108>
 214:	75 c0       	rjmp	.+234    	; 0x300 <_Z11light_it_upv+0x1e8>
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 21c:	89 2b       	or	r24, r25
 21e:	a1 f3       	breq	.-24     	; 0x208 <_Z11light_it_upv+0xf0>
 		i = 0;
 		digitalWrite(led_G,1);
 		delay(3000);
	}
	if ((digitalRead(button_hiss_R)==0) && i == 0){
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 226:	89 2b       	or	r24, r25
 228:	39 f4       	brne	.+14     	; 0x238 <_Z11light_it_upv+0x120>
 22a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 22e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 232:	89 2b       	or	r24, r25
 234:	09 f4       	brne	.+2      	; 0x238 <_Z11light_it_upv+0x120>
 236:	73 c0       	rjmp	.+230    	; 0x31e <_Z11light_it_upv+0x206>
 		i = 1;
 		digitalWrite(led_R,1);
 		delay(3000);
	}
	if ((digitalRead(button_hiss_R)==0) && i == 2){
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 23e:	89 2b       	or	r24, r25
 240:	39 f4       	brne	.+14     	; 0x250 <_Z11light_it_upv+0x138>
 242:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 246:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 24a:	02 97       	sbiw	r24, 0x02	; 2
 24c:	09 f4       	brne	.+2      	; 0x250 <_Z11light_it_upv+0x138>
 24e:	78 c0       	rjmp	.+240    	; 0x340 <_Z11light_it_upv+0x228>
 		i = 1;
 		digitalWrite(led_R,1);
 		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 0){
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 256:	89 2b       	or	r24, r25
 258:	39 f4       	brne	.+14     	; 0x268 <_Z11light_it_upv+0x150>
 25a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 25e:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 262:	89 2b       	or	r24, r25
 264:	39 f0       	breq	.+14     	; 0x274 <_Z11light_it_upv+0x15c>
 266:	33 c0       	rjmp	.+102    	; 0x2ce <_Z11light_it_upv+0x1b6>
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 26e:	89 2b       	or	r24, r25
 270:	a1 f3       	breq	.-24     	; 0x25a <_Z11light_it_upv+0x142>
 272:	2d c0       	rjmp	.+90     	; 0x2ce <_Z11light_it_upv+0x1b6>
 		i = 2;
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 27c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 		digitalWrite(led_B,1);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 288:	c4 e6       	ldi	r28, 0x64	; 100
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 		for (int jx = 0; jx <100; jx++){
 			if ((digitalRead(button_hiss_R)==0)){
 28c:	84 e0       	ldi	r24, 0x04	; 4
 28e:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 292:	89 2b       	or	r24, r25
 294:	71 f4       	brne	.+28     	; 0x2b2 <_Z11light_it_upv+0x19a>
 				digitalWrite(led_R,1);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	89 e0       	ldi	r24, 0x09	; 9
 29a:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 				delay(1000);
 29e:	68 ee       	ldi	r22, 0xE8	; 232
 2a0:	73 e0       	ldi	r23, 0x03	; 3
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
 				digitalWrite(led_G,0);
 2aa:	60 e0       	ldi	r22, 0x00	; 0
 2ac:	88 e0       	ldi	r24, 0x08	; 8
 2ae:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 			}
 			delay(30);
 2b2:	6e e1       	ldi	r22, 0x1E	; 30
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
 2be:	21 97       	sbiw	r28, 0x01	; 1
 		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 0){
 		i = 2;
 		digitalWrite(led_B,1);
 		for (int jx = 0; jx <100; jx++){
 2c0:	29 f7       	brne	.-54     	; 0x28c <_Z11light_it_upv+0x174>
 				delay(1000);
 				digitalWrite(led_G,0);
 			}
 			delay(30);
 		}
 		delay(3000);
 2c2:	68 eb       	ldi	r22, 0xB8	; 184
 2c4:	7b e0       	ldi	r23, 0x0B	; 11
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 1){
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 2d4:	89 2b       	or	r24, r25
 2d6:	39 f4       	brne	.+14     	; 0x2e6 <_Z11light_it_upv+0x1ce>
 2d8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 2dc:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <__data_end+0x1>
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	31 f4       	brne	.+12     	; 0x2f0 <_Z11light_it_upv+0x1d8>
 2e4:	3e c0       	rjmp	.+124    	; 0x362 <_Z11light_it_upv+0x24a>
 2e6:	85 e0       	ldi	r24, 0x05	; 5
 2e8:	0e 94 56 06 	call	0xcac	; 0xcac <digitalRead>
 2ec:	89 2b       	or	r24, r25
 2ee:	a1 f3       	breq	.-24     	; 0x2d8 <_Z11light_it_upv+0x1c0>
 		i = 2;
 		digitalWrite(led_B,1);
 		delay(3000);
	}
	delay(100);
 2f0:	64 e6       	ldi	r22, 0x64	; 100
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 1){
 		i = 2;
 		digitalWrite(led_B,1);
 		delay(3000);
	}
	delay(100);
 2fc:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <delay>
 			delay(30);
 		}
 		delay(3000);
	}
	if ((digitalRead(button_G)==0 || digitalRead(button_hiss_G)==0) && i == 1){
 		i = 0;
 300:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__data_end+0x1>
 304:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
 		digitalWrite(led_G,1);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 		delay(3000);
 310:	68 eb       	ldi	r22, 0xB8	; 184
 312:	7b e0       	ldi	r23, 0x0B	; 11
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
 31c:	81 cf       	rjmp	.-254    	; 0x220 <_Z11light_it_upv+0x108>
	}
	if ((digitalRead(button_hiss_R)==0) && i == 0){
 		i = 1;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 326:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 		digitalWrite(led_R,1);
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	89 e0       	ldi	r24, 0x09	; 9
 32e:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 		delay(3000);
 332:	68 eb       	ldi	r22, 0xB8	; 184
 334:	7b e0       	ldi	r23, 0x0B	; 11
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
 33e:	7c cf       	rjmp	.-264    	; 0x238 <_Z11light_it_upv+0x120>
	}
	if ((digitalRead(button_hiss_R)==0) && i == 2){
 		i = 1;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 348:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 		digitalWrite(led_R,1);
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	89 e0       	ldi	r24, 0x09	; 9
 350:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 		delay(3000);
 354:	68 eb       	ldi	r22, 0xB8	; 184
 356:	7b e0       	ldi	r23, 0x0B	; 11
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
 360:	77 cf       	rjmp	.-274    	; 0x250 <_Z11light_it_upv+0x138>
 			delay(30);
 		}
 		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_B)==0) && i == 1){
 		i = 2;
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
 36a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
 		digitalWrite(led_B,1);
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	8a e0       	ldi	r24, 0x0A	; 10
 372:	0e 94 26 06 	call	0xc4c	; 0xc4c <digitalWrite>
 		delay(3000);
 376:	68 eb       	ldi	r22, 0xB8	; 184
 378:	7b e0       	ldi	r23, 0x0B	; 11
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 2d 05 	call	0xa5a	; 0xa5a <delay>
 382:	b6 cf       	rjmp	.-148    	; 0x2f0 <_Z11light_it_upv+0x1d8>

00000384 <setup>:
#define foto_0 A0
#define foto_1 A1
#define foto_2 A2

void setup() {
	pinMode(led_G,OUTPUT);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	88 e0       	ldi	r24, 0x08	; 8
 388:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
	pinMode(led_R,OUTPUT);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	89 e0       	ldi	r24, 0x09	; 9
 390:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
	pinMode(led_B,OUTPUT);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	8a e0       	ldi	r24, 0x0A	; 10
 398:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
	pinMode(button_G, INPUT);
 39c:	60 e0       	ldi	r22, 0x00	; 0
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
	pinMode(button_R, INPUT);
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
	pinMode(button_B, INPUT);
 3ac:	60 e0       	ldi	r22, 0x00	; 0
 3ae:	82 e0       	ldi	r24, 0x02	; 2
 3b0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
	pinMode(button_hiss_G, INPUT);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
	pinMode(button_hiss_R, INPUT);
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
	pinMode(button_hiss_B, INPUT);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	85 e0       	ldi	r24, 0x05	; 5
 3c8:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 3cc:	26 e0       	ldi	r18, 0x06	; 6
 3ce:	40 e8       	ldi	r20, 0x80	; 128
 3d0:	55 e2       	ldi	r21, 0x25	; 37
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	82 e2       	ldi	r24, 0x22	; 34
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0c 94 ba 02 	jmp	0x574	; 0x574 <_ZN14HardwareSerial5beginEmh>

000003de <loop>:
	Serial.begin(9600);
}

void loop() {
	light_it_up();
 3de:	0e 94 8c 00 	call	0x118	; 0x118 <_Z11light_it_upv>
	int value = analogRead(foto_0);
 3e2:	8e e0       	ldi	r24, 0x0E	; 14
 3e4:	0c 94 a4 05 	jmp	0xb48	; 0xb48 <analogRead>

000003e8 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3e8:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3ea:	91 8d       	ldd	r25, Z+25	; 0x19
 3ec:	22 8d       	ldd	r18, Z+26	; 0x1a
 3ee:	89 2f       	mov	r24, r25
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	80 5c       	subi	r24, 0xC0	; 192
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	82 1b       	sub	r24, r18
 3f8:	91 09       	sbc	r25, r1
}
 3fa:	8f 73       	andi	r24, 0x3F	; 63
 3fc:	99 27       	eor	r25, r25
 3fe:	08 95       	ret

00000400 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 400:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 402:	91 8d       	ldd	r25, Z+25	; 0x19
 404:	82 8d       	ldd	r24, Z+26	; 0x1a
 406:	98 17       	cp	r25, r24
 408:	31 f0       	breq	.+12     	; 0x416 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 40a:	82 8d       	ldd	r24, Z+26	; 0x1a
 40c:	e8 0f       	add	r30, r24
 40e:	f1 1d       	adc	r31, r1
 410:	85 8d       	ldd	r24, Z+29	; 0x1d
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 41a:	08 95       	ret

0000041c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 41c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 41e:	91 8d       	ldd	r25, Z+25	; 0x19
 420:	82 8d       	ldd	r24, Z+26	; 0x1a
 422:	98 17       	cp	r25, r24
 424:	61 f0       	breq	.+24     	; 0x43e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 426:	82 8d       	ldd	r24, Z+26	; 0x1a
 428:	df 01       	movw	r26, r30
 42a:	a8 0f       	add	r26, r24
 42c:	b1 1d       	adc	r27, r1
 42e:	5d 96       	adiw	r26, 0x1d	; 29
 430:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 432:	92 8d       	ldd	r25, Z+26	; 0x1a
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	9f 73       	andi	r25, 0x3F	; 63
 438:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 442:	08 95       	ret

00000444 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 444:	87 e7       	ldi	r24, 0x77	; 119
 446:	93 e0       	ldi	r25, 0x03	; 3
 448:	89 2b       	or	r24, r25
 44a:	49 f0       	breq	.+18     	; 0x45e <_Z14serialEventRunv+0x1a>
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	89 2b       	or	r24, r25
 452:	29 f0       	breq	.+10     	; 0x45e <_Z14serialEventRunv+0x1a>
 454:	0e 94 77 03 	call	0x6ee	; 0x6ee <_Z17Serial0_availablev>
 458:	81 11       	cpse	r24, r1
 45a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 45e:	08 95       	ret

00000460 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 460:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 462:	84 8d       	ldd	r24, Z+28	; 0x1c
 464:	df 01       	movw	r26, r30
 466:	a8 0f       	add	r26, r24
 468:	b1 1d       	adc	r27, r1
 46a:	a3 5a       	subi	r26, 0xA3	; 163
 46c:	bf 4f       	sbci	r27, 0xFF	; 255
 46e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 470:	84 8d       	ldd	r24, Z+28	; 0x1c
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	8f 73       	andi	r24, 0x3F	; 63
 478:	99 27       	eor	r25, r25
 47a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 47c:	a6 89       	ldd	r26, Z+22	; 0x16
 47e:	b7 89       	ldd	r27, Z+23	; 0x17
 480:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 482:	a0 89       	ldd	r26, Z+16	; 0x10
 484:	b1 89       	ldd	r27, Z+17	; 0x11
 486:	8c 91       	ld	r24, X
 488:	80 64       	ori	r24, 0x40	; 64
 48a:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 48c:	93 8d       	ldd	r25, Z+27	; 0x1b
 48e:	84 8d       	ldd	r24, Z+28	; 0x1c
 490:	98 13       	cpse	r25, r24
 492:	06 c0       	rjmp	.+12     	; 0x4a0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 494:	02 88       	ldd	r0, Z+18	; 0x12
 496:	f3 89       	ldd	r31, Z+19	; 0x13
 498:	e0 2d       	mov	r30, r0
 49a:	80 81       	ld	r24, Z
 49c:	8f 7d       	andi	r24, 0xDF	; 223
 49e:	80 83       	st	Z, r24
 4a0:	08 95       	ret

000004a2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4a8:	88 8d       	ldd	r24, Y+24	; 0x18
 4aa:	88 23       	and	r24, r24
 4ac:	c9 f0       	breq	.+50     	; 0x4e0 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4ae:	ea 89       	ldd	r30, Y+18	; 0x12
 4b0:	fb 89       	ldd	r31, Y+19	; 0x13
 4b2:	80 81       	ld	r24, Z
 4b4:	85 fd       	sbrc	r24, 5
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <_ZN14HardwareSerial5flushEv+0x20>
 4b8:	a8 89       	ldd	r26, Y+16	; 0x10
 4ba:	b9 89       	ldd	r27, Y+17	; 0x11
 4bc:	8c 91       	ld	r24, X
 4be:	86 fd       	sbrc	r24, 6
 4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	07 fc       	sbrc	r0, 7
 4c6:	f5 cf       	rjmp	.-22     	; 0x4b2 <_ZN14HardwareSerial5flushEv+0x10>
 4c8:	80 81       	ld	r24, Z
 4ca:	85 ff       	sbrs	r24, 5
 4cc:	f2 cf       	rjmp	.-28     	; 0x4b2 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4ce:	a8 89       	ldd	r26, Y+16	; 0x10
 4d0:	b9 89       	ldd	r27, Y+17	; 0x11
 4d2:	8c 91       	ld	r24, X
 4d4:	85 ff       	sbrs	r24, 5
 4d6:	ed cf       	rjmp	.-38     	; 0x4b2 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4d8:	ce 01       	movw	r24, r28
 4da:	0e 94 30 02 	call	0x460	; 0x460 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4de:	e7 cf       	rjmp	.-50     	; 0x4ae <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 4e6:	ef 92       	push	r14
 4e8:	ff 92       	push	r15
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
  _written = true;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 4f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
 4fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4fc:	98 13       	cpse	r25, r24
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <_ZN14HardwareSerial5writeEh+0x24>
 500:	e8 89       	ldd	r30, Y+16	; 0x10
 502:	f9 89       	ldd	r31, Y+17	; 0x11
 504:	80 81       	ld	r24, Z
 506:	85 fd       	sbrc	r24, 5
 508:	24 c0       	rjmp	.+72     	; 0x552 <_ZN14HardwareSerial5writeEh+0x6c>
 50a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 50c:	0b 8d       	ldd	r16, Y+27	; 0x1b
 50e:	10 e0       	ldi	r17, 0x00	; 0
 510:	0f 5f       	subi	r16, 0xFF	; 255
 512:	1f 4f       	sbci	r17, 0xFF	; 255
 514:	0f 73       	andi	r16, 0x3F	; 63
 516:	11 27       	eor	r17, r17
 518:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 51a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 51c:	e8 12       	cpse	r14, r24
 51e:	0c c0       	rjmp	.+24     	; 0x538 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	07 fc       	sbrc	r0, 7
 524:	fa cf       	rjmp	.-12     	; 0x51a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 526:	e8 89       	ldd	r30, Y+16	; 0x10
 528:	f9 89       	ldd	r31, Y+17	; 0x11
 52a:	80 81       	ld	r24, Z
 52c:	85 ff       	sbrs	r24, 5
 52e:	f5 cf       	rjmp	.-22     	; 0x51a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 530:	ce 01       	movw	r24, r28
 532:	0e 94 30 02 	call	0x460	; 0x460 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 536:	f1 cf       	rjmp	.-30     	; 0x51a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 538:	8b 8d       	ldd	r24, Y+27	; 0x1b
 53a:	fe 01       	movw	r30, r28
 53c:	e8 0f       	add	r30, r24
 53e:	f1 1d       	adc	r31, r1
 540:	e3 5a       	subi	r30, 0xA3	; 163
 542:	ff 4f       	sbci	r31, 0xFF	; 255
 544:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 546:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 548:	ea 89       	ldd	r30, Y+18	; 0x12
 54a:	fb 89       	ldd	r31, Y+19	; 0x13
 54c:	80 81       	ld	r24, Z
 54e:	80 62       	ori	r24, 0x20	; 32
 550:	07 c0       	rjmp	.+14     	; 0x560 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 552:	ee 89       	ldd	r30, Y+22	; 0x16
 554:	ff 89       	ldd	r31, Y+23	; 0x17
 556:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 558:	e8 89       	ldd	r30, Y+16	; 0x10
 55a:	f9 89       	ldd	r31, Y+17	; 0x11
 55c:	80 81       	ld	r24, Z
 55e:	80 64       	ori	r24, 0x40	; 64
 560:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	ef 90       	pop	r14
 572:	08 95       	ret

00000574 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 574:	cf 92       	push	r12
 576:	df 92       	push	r13
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	ec 01       	movw	r28, r24
 584:	6a 01       	movw	r12, r20
 586:	7b 01       	movw	r14, r22
 588:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 58a:	e8 89       	ldd	r30, Y+16	; 0x10
 58c:	f9 89       	ldd	r31, Y+17	; 0x11
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 592:	41 15       	cp	r20, r1
 594:	51 4e       	sbci	r21, 0xE1	; 225
 596:	61 05       	cpc	r22, r1
 598:	71 05       	cpc	r23, r1
 59a:	b1 f0       	breq	.+44     	; 0x5c8 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	79 e0       	ldi	r23, 0x09	; 9
 5a0:	8d e3       	ldi	r24, 0x3D	; 61
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	a7 01       	movw	r20, r14
 5a6:	96 01       	movw	r18, r12
 5a8:	0e 94 80 06 	call	0xd00	; 0xd00 <__udivmodsi4>
 5ac:	da 01       	movw	r26, r20
 5ae:	c9 01       	movw	r24, r18
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	a1 09       	sbc	r26, r1
 5b4:	b1 09       	sbc	r27, r1
 5b6:	b6 95       	lsr	r27
 5b8:	a7 95       	ror	r26
 5ba:	97 95       	ror	r25
 5bc:	87 95       	ror	r24
 5be:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5c0:	41 15       	cp	r20, r1
 5c2:	80 e1       	ldi	r24, 0x10	; 16
 5c4:	58 07       	cpc	r21, r24
 5c6:	a8 f0       	brcs	.+42     	; 0x5f2 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 5c8:	e8 89       	ldd	r30, Y+16	; 0x10
 5ca:	f9 89       	ldd	r31, Y+17	; 0x11
 5cc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 5ce:	60 e8       	ldi	r22, 0x80	; 128
 5d0:	74 e8       	ldi	r23, 0x84	; 132
 5d2:	8e e1       	ldi	r24, 0x1E	; 30
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	a7 01       	movw	r20, r14
 5d8:	96 01       	movw	r18, r12
 5da:	0e 94 80 06 	call	0xd00	; 0xd00 <__udivmodsi4>
 5de:	ba 01       	movw	r22, r20
 5e0:	a9 01       	movw	r20, r18
 5e2:	41 50       	subi	r20, 0x01	; 1
 5e4:	51 09       	sbc	r21, r1
 5e6:	61 09       	sbc	r22, r1
 5e8:	71 09       	sbc	r23, r1
 5ea:	76 95       	lsr	r23
 5ec:	67 95       	ror	r22
 5ee:	57 95       	ror	r21
 5f0:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 5f2:	ec 85       	ldd	r30, Y+12	; 0x0c
 5f4:	fd 85       	ldd	r31, Y+13	; 0x0d
 5f6:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 5f8:	ee 85       	ldd	r30, Y+14	; 0x0e
 5fa:	ff 85       	ldd	r31, Y+15	; 0x0f
 5fc:	40 83       	st	Z, r20

  _written = false;
 5fe:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 600:	ec 89       	ldd	r30, Y+20	; 0x14
 602:	fd 89       	ldd	r31, Y+21	; 0x15
 604:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 606:	ea 89       	ldd	r30, Y+18	; 0x12
 608:	fb 89       	ldd	r31, Y+19	; 0x13
 60a:	80 81       	ld	r24, Z
 60c:	80 61       	ori	r24, 0x10	; 16
 60e:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 610:	ea 89       	ldd	r30, Y+18	; 0x12
 612:	fb 89       	ldd	r31, Y+19	; 0x13
 614:	80 81       	ld	r24, Z
 616:	88 60       	ori	r24, 0x08	; 8
 618:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 61a:	ea 89       	ldd	r30, Y+18	; 0x12
 61c:	fb 89       	ldd	r31, Y+19	; 0x13
 61e:	80 81       	ld	r24, Z
 620:	80 68       	ori	r24, 0x80	; 128
 622:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 624:	ea 89       	ldd	r30, Y+18	; 0x12
 626:	fb 89       	ldd	r31, Y+19	; 0x13
 628:	80 81       	ld	r24, Z
 62a:	8f 7d       	andi	r24, 0xDF	; 223
 62c:	80 83       	st	Z, r24
}
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	1f 91       	pop	r17
 634:	ff 90       	pop	r15
 636:	ef 90       	pop	r14
 638:	df 90       	pop	r13
 63a:	cf 90       	pop	r12
 63c:	08 95       	ret

0000063e <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 63e:	1f 92       	push	r1
 640:	0f 92       	push	r0
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	0f 92       	push	r0
 646:	11 24       	eor	r1, r1
 648:	2f 93       	push	r18
 64a:	8f 93       	push	r24
 64c:	9f 93       	push	r25
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 652:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <Serial+0x10>
 656:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <Serial+0x11>
 65a:	80 81       	ld	r24, Z
 65c:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <Serial+0x16>
 660:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <Serial+0x17>
 664:	82 fd       	sbrc	r24, 2
 666:	12 c0       	rjmp	.+36     	; 0x68c <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 668:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 66a:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Serial+0x19>
 66e:	8f 5f       	subi	r24, 0xFF	; 255
 670:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 672:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <Serial+0x1a>
 676:	82 17       	cp	r24, r18
 678:	51 f0       	breq	.+20     	; 0x68e <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 67a:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <Serial+0x19>
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	ee 5d       	subi	r30, 0xDE	; 222
 682:	fe 4f       	sbci	r31, 0xFE	; 254
 684:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 686:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Serial+0x19>
 68a:	01 c0       	rjmp	.+2      	; 0x68e <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 68c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 68e:	ff 91       	pop	r31
 690:	ef 91       	pop	r30
 692:	9f 91       	pop	r25
 694:	8f 91       	pop	r24
 696:	2f 91       	pop	r18
 698:	0f 90       	pop	r0
 69a:	0f be       	out	0x3f, r0	; 63
 69c:	0f 90       	pop	r0
 69e:	1f 90       	pop	r1
 6a0:	18 95       	reti

000006a2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6a2:	1f 92       	push	r1
 6a4:	0f 92       	push	r0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2f 93       	push	r18
 6ae:	3f 93       	push	r19
 6b0:	4f 93       	push	r20
 6b2:	5f 93       	push	r21
 6b4:	6f 93       	push	r22
 6b6:	7f 93       	push	r23
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 6c4:	82 e2       	ldi	r24, 0x22	; 34
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	0e 94 30 02 	call	0x460	; 0x460 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 6cc:	ff 91       	pop	r31
 6ce:	ef 91       	pop	r30
 6d0:	bf 91       	pop	r27
 6d2:	af 91       	pop	r26
 6d4:	9f 91       	pop	r25
 6d6:	8f 91       	pop	r24
 6d8:	7f 91       	pop	r23
 6da:	6f 91       	pop	r22
 6dc:	5f 91       	pop	r21
 6de:	4f 91       	pop	r20
 6e0:	3f 91       	pop	r19
 6e2:	2f 91       	pop	r18
 6e4:	0f 90       	pop	r0
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	0f 90       	pop	r0
 6ea:	1f 90       	pop	r1
 6ec:	18 95       	reti

000006ee <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 6ee:	82 e2       	ldi	r24, 0x22	; 34
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <_ZN14HardwareSerial9availableEv>
 6f6:	21 e0       	ldi	r18, 0x01	; 1
 6f8:	89 2b       	or	r24, r25
 6fa:	09 f4       	brne	.+2      	; 0x6fe <_Z17Serial0_availablev+0x10>
 6fc:	20 e0       	ldi	r18, 0x00	; 0
}
 6fe:	82 2f       	mov	r24, r18
 700:	08 95       	ret

00000702 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 702:	e2 e2       	ldi	r30, 0x22	; 34
 704:	f1 e0       	ldi	r31, 0x01	; 1
 706:	13 82       	std	Z+3, r1	; 0x03
 708:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 70a:	88 ee       	ldi	r24, 0xE8	; 232
 70c:	93 e0       	ldi	r25, 0x03	; 3
 70e:	a0 e0       	ldi	r26, 0x00	; 0
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	84 83       	std	Z+4, r24	; 0x04
 714:	95 83       	std	Z+5, r25	; 0x05
 716:	a6 83       	std	Z+6, r26	; 0x06
 718:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 71a:	85 e0       	ldi	r24, 0x05	; 5
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	91 83       	std	Z+1, r25	; 0x01
 720:	80 83       	st	Z, r24
 722:	85 ec       	ldi	r24, 0xC5	; 197
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	95 87       	std	Z+13, r25	; 0x0d
 728:	84 87       	std	Z+12, r24	; 0x0c
 72a:	84 ec       	ldi	r24, 0xC4	; 196
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	97 87       	std	Z+15, r25	; 0x0f
 730:	86 87       	std	Z+14, r24	; 0x0e
 732:	80 ec       	ldi	r24, 0xC0	; 192
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	91 8b       	std	Z+17, r25	; 0x11
 738:	80 8b       	std	Z+16, r24	; 0x10
 73a:	81 ec       	ldi	r24, 0xC1	; 193
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	93 8b       	std	Z+19, r25	; 0x13
 740:	82 8b       	std	Z+18, r24	; 0x12
 742:	82 ec       	ldi	r24, 0xC2	; 194
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	95 8b       	std	Z+21, r25	; 0x15
 748:	84 8b       	std	Z+20, r24	; 0x14
 74a:	86 ec       	ldi	r24, 0xC6	; 198
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	97 8b       	std	Z+23, r25	; 0x17
 750:	86 8b       	std	Z+22, r24	; 0x16
 752:	11 8e       	std	Z+25, r1	; 0x19
 754:	12 8e       	std	Z+26, r1	; 0x1a
 756:	13 8e       	std	Z+27, r1	; 0x1b
 758:	14 8e       	std	Z+28, r1	; 0x1c
 75a:	08 95       	ret

0000075c <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 75c:	08 95       	ret

0000075e <main>:

int main(void)
{
	init();
 75e:	0e 94 69 05 	call	0xad2	; 0xad2 <init>

	initVariant();
 762:	0e 94 ae 03 	call	0x75c	; 0x75c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 766:	0e 94 c2 01 	call	0x384	; 0x384 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 76a:	c2 e2       	ldi	r28, 0x22	; 34
 76c:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 76e:	0e 94 ef 01 	call	0x3de	; 0x3de <loop>
		if (serialEventRun) serialEventRun();
 772:	20 97       	sbiw	r28, 0x00	; 0
 774:	e1 f3       	breq	.-8      	; 0x76e <main+0x10>
 776:	0e 94 22 02 	call	0x444	; 0x444 <_Z14serialEventRunv>
 77a:	f9 cf       	rjmp	.-14     	; 0x76e <main+0x10>

0000077c <_ZN5Print5writeEPKhj>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 77c:	cf 92       	push	r12
 77e:	df 92       	push	r13
 780:	ef 92       	push	r14
 782:	ff 92       	push	r15
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	6c 01       	movw	r12, r24
 78e:	7a 01       	movw	r14, r20
 790:	8b 01       	movw	r16, r22
 792:	c0 e0       	ldi	r28, 0x00	; 0
 794:	d0 e0       	ldi	r29, 0x00	; 0
 796:	ce 15       	cp	r28, r14
 798:	df 05       	cpc	r29, r15
 79a:	89 f0       	breq	.+34     	; 0x7be <_ZN5Print5writeEPKhj+0x42>
 79c:	d8 01       	movw	r26, r16
 79e:	6d 91       	ld	r22, X+
 7a0:	8d 01       	movw	r16, r26
 7a2:	d6 01       	movw	r26, r12
 7a4:	ed 91       	ld	r30, X+
 7a6:	fc 91       	ld	r31, X
 7a8:	01 90       	ld	r0, Z+
 7aa:	f0 81       	ld	r31, Z
 7ac:	e0 2d       	mov	r30, r0
 7ae:	c6 01       	movw	r24, r12
 7b0:	09 95       	icall
 7b2:	89 2b       	or	r24, r25
 7b4:	11 f4       	brne	.+4      	; 0x7ba <_ZN5Print5writeEPKhj+0x3e>
 7b6:	7e 01       	movw	r14, r28
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <_ZN5Print5writeEPKhj+0x42>
 7ba:	21 96       	adiw	r28, 0x01	; 1
 7bc:	ec cf       	rjmp	.-40     	; 0x796 <_ZN5Print5writeEPKhj+0x1a>
 7be:	c7 01       	movw	r24, r14
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	ff 90       	pop	r15
 7ca:	ef 90       	pop	r14
 7cc:	df 90       	pop	r13
 7ce:	cf 90       	pop	r12
 7d0:	08 95       	ret

000007d2 <_ZN5Print5writeEPKc>:
 7d2:	61 15       	cp	r22, r1
 7d4:	71 05       	cpc	r23, r1
 7d6:	79 f0       	breq	.+30     	; 0x7f6 <_ZN5Print5writeEPKc+0x24>
 7d8:	fb 01       	movw	r30, r22
 7da:	01 90       	ld	r0, Z+
 7dc:	00 20       	and	r0, r0
 7de:	e9 f7       	brne	.-6      	; 0x7da <_ZN5Print5writeEPKc+0x8>
 7e0:	31 97       	sbiw	r30, 0x01	; 1
 7e2:	af 01       	movw	r20, r30
 7e4:	46 1b       	sub	r20, r22
 7e6:	57 0b       	sbc	r21, r23
 7e8:	dc 01       	movw	r26, r24
 7ea:	ed 91       	ld	r30, X+
 7ec:	fc 91       	ld	r31, X
 7ee:	02 80       	ldd	r0, Z+2	; 0x02
 7f0:	f3 81       	ldd	r31, Z+3	; 0x03
 7f2:	e0 2d       	mov	r30, r0
 7f4:	09 94       	ijmp
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	08 95       	ret

000007fc <_ZN5Print5printEc>:
 7fc:	dc 01       	movw	r26, r24
 7fe:	ed 91       	ld	r30, X+
 800:	fc 91       	ld	r31, X
 802:	01 90       	ld	r0, Z+
 804:	f0 81       	ld	r31, Z
 806:	e0 2d       	mov	r30, r0
 808:	09 94       	ijmp

0000080a <_ZN5Print7printlnEv>:
 80a:	61 e1       	ldi	r22, 0x11	; 17
 80c:	71 e0       	ldi	r23, 0x01	; 1
 80e:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_ZN5Print5writeEPKc>

00000812 <_ZN5Print11printNumberEmh>:
 812:	8f 92       	push	r8
 814:	9f 92       	push	r9
 816:	af 92       	push	r10
 818:	bf 92       	push	r11
 81a:	cf 92       	push	r12
 81c:	df 92       	push	r13
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	a1 97       	sbiw	r28, 0x21	; 33
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	f8 94       	cli
 834:	de bf       	out	0x3e, r29	; 62
 836:	0f be       	out	0x3f, r0	; 63
 838:	cd bf       	out	0x3d, r28	; 61
 83a:	7c 01       	movw	r14, r24
 83c:	d4 2e       	mov	r13, r20
 83e:	c5 2e       	mov	r12, r21
 840:	db 01       	movw	r26, r22
 842:	19 a2       	std	Y+33, r1	; 0x21
 844:	22 30       	cpi	r18, 0x02	; 2
 846:	08 f4       	brcc	.+2      	; 0x84a <_ZN5Print11printNumberEmh+0x38>
 848:	2a e0       	ldi	r18, 0x0A	; 10
 84a:	8e 01       	movw	r16, r28
 84c:	0f 5d       	subi	r16, 0xDF	; 223
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	82 2e       	mov	r8, r18
 852:	91 2c       	mov	r9, r1
 854:	a1 2c       	mov	r10, r1
 856:	b1 2c       	mov	r11, r1
 858:	6d 2d       	mov	r22, r13
 85a:	7c 2d       	mov	r23, r12
 85c:	cd 01       	movw	r24, r26
 85e:	a5 01       	movw	r20, r10
 860:	94 01       	movw	r18, r8
 862:	0e 94 80 06 	call	0xd00	; 0xd00 <__udivmodsi4>
 866:	d2 2e       	mov	r13, r18
 868:	c3 2e       	mov	r12, r19
 86a:	da 01       	movw	r26, r20
 86c:	01 50       	subi	r16, 0x01	; 1
 86e:	11 09       	sbc	r17, r1
 870:	6a 30       	cpi	r22, 0x0A	; 10
 872:	71 05       	cpc	r23, r1
 874:	81 05       	cpc	r24, r1
 876:	91 05       	cpc	r25, r1
 878:	10 f4       	brcc	.+4      	; 0x87e <_ZN5Print11printNumberEmh+0x6c>
 87a:	60 5d       	subi	r22, 0xD0	; 208
 87c:	01 c0       	rjmp	.+2      	; 0x880 <_ZN5Print11printNumberEmh+0x6e>
 87e:	69 5c       	subi	r22, 0xC9	; 201
 880:	f8 01       	movw	r30, r16
 882:	60 83       	st	Z, r22
 884:	23 2b       	or	r18, r19
 886:	24 2b       	or	r18, r20
 888:	25 2b       	or	r18, r21
 88a:	31 f7       	brne	.-52     	; 0x858 <_ZN5Print11printNumberEmh+0x46>
 88c:	b8 01       	movw	r22, r16
 88e:	c7 01       	movw	r24, r14
 890:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <_ZN5Print5writeEPKc>
 894:	a1 96       	adiw	r28, 0x21	; 33
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	f8 94       	cli
 89a:	de bf       	out	0x3e, r29	; 62
 89c:	0f be       	out	0x3f, r0	; 63
 89e:	cd bf       	out	0x3d, r28	; 61
 8a0:	df 91       	pop	r29
 8a2:	cf 91       	pop	r28
 8a4:	1f 91       	pop	r17
 8a6:	0f 91       	pop	r16
 8a8:	ff 90       	pop	r15
 8aa:	ef 90       	pop	r14
 8ac:	df 90       	pop	r13
 8ae:	cf 90       	pop	r12
 8b0:	bf 90       	pop	r11
 8b2:	af 90       	pop	r10
 8b4:	9f 90       	pop	r9
 8b6:	8f 90       	pop	r8
 8b8:	08 95       	ret

000008ba <_ZN5Print5printEli>:
 8ba:	cf 92       	push	r12
 8bc:	df 92       	push	r13
 8be:	ef 92       	push	r14
 8c0:	ff 92       	push	r15
 8c2:	0f 93       	push	r16
 8c4:	1f 93       	push	r17
 8c6:	cf 93       	push	r28
 8c8:	df 93       	push	r29
 8ca:	ec 01       	movw	r28, r24
 8cc:	6a 01       	movw	r12, r20
 8ce:	7b 01       	movw	r14, r22
 8d0:	21 15       	cp	r18, r1
 8d2:	31 05       	cpc	r19, r1
 8d4:	79 f4       	brne	.+30     	; 0x8f4 <_ZN5Print5printEli+0x3a>
 8d6:	e8 81       	ld	r30, Y
 8d8:	f9 81       	ldd	r31, Y+1	; 0x01
 8da:	01 90       	ld	r0, Z+
 8dc:	f0 81       	ld	r31, Z
 8de:	e0 2d       	mov	r30, r0
 8e0:	64 2f       	mov	r22, r20
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	1f 91       	pop	r17
 8e8:	0f 91       	pop	r16
 8ea:	ff 90       	pop	r15
 8ec:	ef 90       	pop	r14
 8ee:	df 90       	pop	r13
 8f0:	cf 90       	pop	r12
 8f2:	09 94       	ijmp
 8f4:	2a 30       	cpi	r18, 0x0A	; 10
 8f6:	31 05       	cpc	r19, r1
 8f8:	e9 f4       	brne	.+58     	; 0x934 <__stack+0x35>
 8fa:	77 ff       	sbrs	r23, 7
 8fc:	1a c0       	rjmp	.+52     	; 0x932 <__stack+0x33>
 8fe:	6d e2       	ldi	r22, 0x2D	; 45
 900:	0e 94 fe 03 	call	0x7fc	; 0x7fc <_ZN5Print5printEc>
 904:	8c 01       	movw	r16, r24
 906:	44 27       	eor	r20, r20
 908:	55 27       	eor	r21, r21
 90a:	ba 01       	movw	r22, r20
 90c:	4c 19       	sub	r20, r12
 90e:	5d 09       	sbc	r21, r13
 910:	6e 09       	sbc	r22, r14
 912:	7f 09       	sbc	r23, r15
 914:	2a e0       	ldi	r18, 0x0A	; 10
 916:	ce 01       	movw	r24, r28
 918:	0e 94 09 04 	call	0x812	; 0x812 <_ZN5Print11printNumberEmh>
 91c:	80 0f       	add	r24, r16
 91e:	91 1f       	adc	r25, r17
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	ff 90       	pop	r15
 92a:	ef 90       	pop	r14
 92c:	df 90       	pop	r13
 92e:	cf 90       	pop	r12
 930:	08 95       	ret
 932:	2a e0       	ldi	r18, 0x0A	; 10
 934:	b7 01       	movw	r22, r14
 936:	a6 01       	movw	r20, r12
 938:	ce 01       	movw	r24, r28
 93a:	df 91       	pop	r29
 93c:	cf 91       	pop	r28
 93e:	1f 91       	pop	r17
 940:	0f 91       	pop	r16
 942:	ff 90       	pop	r15
 944:	ef 90       	pop	r14
 946:	df 90       	pop	r13
 948:	cf 90       	pop	r12
 94a:	0c 94 09 04 	jmp	0x812	; 0x812 <_ZN5Print11printNumberEmh>

0000094e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 94e:	0f 93       	push	r16
 950:	1f 93       	push	r17
 952:	cf 93       	push	r28
 954:	df 93       	push	r29
 956:	ec 01       	movw	r28, r24
 958:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 95a:	ab 01       	movw	r20, r22
 95c:	77 0f       	add	r23, r23
 95e:	66 0b       	sbc	r22, r22
 960:	77 0b       	sbc	r23, r23
 962:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN5Print5printEli>
 966:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 968:	ce 01       	movw	r24, r28
 96a:	0e 94 05 04 	call	0x80a	; 0x80a <_ZN5Print7printlnEv>
  return n;
}
 96e:	80 0f       	add	r24, r16
 970:	91 1f       	adc	r25, r17
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	08 95       	ret

0000097c <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	2f 93       	push	r18
 988:	3f 93       	push	r19
 98a:	8f 93       	push	r24
 98c:	9f 93       	push	r25
 98e:	af 93       	push	r26
 990:	bf 93       	push	r27
 992:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <timer0_millis>
 996:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <timer0_millis+0x1>
 99a:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <timer0_millis+0x2>
 99e:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <timer0_millis+0x3>
 9a2:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <timer0_fract>
 9a6:	23 e0       	ldi	r18, 0x03	; 3
 9a8:	23 0f       	add	r18, r19
 9aa:	2d 37       	cpi	r18, 0x7D	; 125
 9ac:	20 f4       	brcc	.+8      	; 0x9b6 <__vector_16+0x3a>
 9ae:	01 96       	adiw	r24, 0x01	; 1
 9b0:	a1 1d       	adc	r26, r1
 9b2:	b1 1d       	adc	r27, r1
 9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <__vector_16+0x44>
 9b6:	26 e8       	ldi	r18, 0x86	; 134
 9b8:	23 0f       	add	r18, r19
 9ba:	02 96       	adiw	r24, 0x02	; 2
 9bc:	a1 1d       	adc	r26, r1
 9be:	b1 1d       	adc	r27, r1
 9c0:	20 93 bf 01 	sts	0x01BF, r18	; 0x8001bf <timer0_fract>
 9c4:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <timer0_millis>
 9c8:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <timer0_millis+0x1>
 9cc:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <timer0_millis+0x2>
 9d0:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <timer0_millis+0x3>
 9d4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <timer0_overflow_count>
 9d8:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x1>
 9dc:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <timer0_overflow_count+0x2>
 9e0:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <timer0_overflow_count+0x3>
 9e4:	01 96       	adiw	r24, 0x01	; 1
 9e6:	a1 1d       	adc	r26, r1
 9e8:	b1 1d       	adc	r27, r1
 9ea:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <timer0_overflow_count>
 9ee:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <timer0_overflow_count+0x1>
 9f2:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <timer0_overflow_count+0x2>
 9f6:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <timer0_overflow_count+0x3>
 9fa:	bf 91       	pop	r27
 9fc:	af 91       	pop	r26
 9fe:	9f 91       	pop	r25
 a00:	8f 91       	pop	r24
 a02:	3f 91       	pop	r19
 a04:	2f 91       	pop	r18
 a06:	0f 90       	pop	r0
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	0f 90       	pop	r0
 a0c:	1f 90       	pop	r1
 a0e:	18 95       	reti

00000a10 <micros>:
 a10:	3f b7       	in	r19, 0x3f	; 63
 a12:	f8 94       	cli
 a14:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <timer0_overflow_count>
 a18:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <timer0_overflow_count+0x1>
 a1c:	a0 91 c6 01 	lds	r26, 0x01C6	; 0x8001c6 <timer0_overflow_count+0x2>
 a20:	b0 91 c7 01 	lds	r27, 0x01C7	; 0x8001c7 <timer0_overflow_count+0x3>
 a24:	26 b5       	in	r18, 0x26	; 38
 a26:	a8 9b       	sbis	0x15, 0	; 21
 a28:	05 c0       	rjmp	.+10     	; 0xa34 <micros+0x24>
 a2a:	2f 3f       	cpi	r18, 0xFF	; 255
 a2c:	19 f0       	breq	.+6      	; 0xa34 <micros+0x24>
 a2e:	01 96       	adiw	r24, 0x01	; 1
 a30:	a1 1d       	adc	r26, r1
 a32:	b1 1d       	adc	r27, r1
 a34:	3f bf       	out	0x3f, r19	; 63
 a36:	ba 2f       	mov	r27, r26
 a38:	a9 2f       	mov	r26, r25
 a3a:	98 2f       	mov	r25, r24
 a3c:	88 27       	eor	r24, r24
 a3e:	82 0f       	add	r24, r18
 a40:	91 1d       	adc	r25, r1
 a42:	a1 1d       	adc	r26, r1
 a44:	b1 1d       	adc	r27, r1
 a46:	bc 01       	movw	r22, r24
 a48:	cd 01       	movw	r24, r26
 a4a:	42 e0       	ldi	r20, 0x02	; 2
 a4c:	66 0f       	add	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	99 1f       	adc	r25, r25
 a54:	4a 95       	dec	r20
 a56:	d1 f7       	brne	.-12     	; 0xa4c <micros+0x3c>
 a58:	08 95       	ret

00000a5a <delay>:
 a5a:	8f 92       	push	r8
 a5c:	9f 92       	push	r9
 a5e:	af 92       	push	r10
 a60:	bf 92       	push	r11
 a62:	cf 92       	push	r12
 a64:	df 92       	push	r13
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	6b 01       	movw	r12, r22
 a6c:	7c 01       	movw	r14, r24
 a6e:	0e 94 08 05 	call	0xa10	; 0xa10 <micros>
 a72:	4b 01       	movw	r8, r22
 a74:	5c 01       	movw	r10, r24
 a76:	c1 14       	cp	r12, r1
 a78:	d1 04       	cpc	r13, r1
 a7a:	e1 04       	cpc	r14, r1
 a7c:	f1 04       	cpc	r15, r1
 a7e:	01 f1       	breq	.+64     	; 0xac0 <delay+0x66>
 a80:	0e 94 7f 06 	call	0xcfe	; 0xcfe <yield>
 a84:	0e 94 08 05 	call	0xa10	; 0xa10 <micros>
 a88:	dc 01       	movw	r26, r24
 a8a:	cb 01       	movw	r24, r22
 a8c:	88 19       	sub	r24, r8
 a8e:	99 09       	sbc	r25, r9
 a90:	aa 09       	sbc	r26, r10
 a92:	bb 09       	sbc	r27, r11
 a94:	88 3e       	cpi	r24, 0xE8	; 232
 a96:	93 40       	sbci	r25, 0x03	; 3
 a98:	a1 05       	cpc	r26, r1
 a9a:	b1 05       	cpc	r27, r1
 a9c:	60 f3       	brcs	.-40     	; 0xa76 <delay+0x1c>
 a9e:	21 e0       	ldi	r18, 0x01	; 1
 aa0:	c2 1a       	sub	r12, r18
 aa2:	d1 08       	sbc	r13, r1
 aa4:	e1 08       	sbc	r14, r1
 aa6:	f1 08       	sbc	r15, r1
 aa8:	88 ee       	ldi	r24, 0xE8	; 232
 aaa:	88 0e       	add	r8, r24
 aac:	83 e0       	ldi	r24, 0x03	; 3
 aae:	98 1e       	adc	r9, r24
 ab0:	a1 1c       	adc	r10, r1
 ab2:	b1 1c       	adc	r11, r1
 ab4:	c1 14       	cp	r12, r1
 ab6:	d1 04       	cpc	r13, r1
 ab8:	e1 04       	cpc	r14, r1
 aba:	f1 04       	cpc	r15, r1
 abc:	19 f7       	brne	.-58     	; 0xa84 <delay+0x2a>
 abe:	db cf       	rjmp	.-74     	; 0xa76 <delay+0x1c>
 ac0:	ff 90       	pop	r15
 ac2:	ef 90       	pop	r14
 ac4:	df 90       	pop	r13
 ac6:	cf 90       	pop	r12
 ac8:	bf 90       	pop	r11
 aca:	af 90       	pop	r10
 acc:	9f 90       	pop	r9
 ace:	8f 90       	pop	r8
 ad0:	08 95       	ret

00000ad2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 ad2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 ad4:	84 b5       	in	r24, 0x24	; 36
 ad6:	82 60       	ori	r24, 0x02	; 2
 ad8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 ada:	84 b5       	in	r24, 0x24	; 36
 adc:	81 60       	ori	r24, 0x01	; 1
 ade:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 ae0:	85 b5       	in	r24, 0x25	; 37
 ae2:	82 60       	ori	r24, 0x02	; 2
 ae4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 ae6:	85 b5       	in	r24, 0x25	; 37
 ae8:	81 60       	ori	r24, 0x01	; 1
 aea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 aec:	ee e6       	ldi	r30, 0x6E	; 110
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	80 81       	ld	r24, Z
 af2:	81 60       	ori	r24, 0x01	; 1
 af4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 af6:	e1 e8       	ldi	r30, 0x81	; 129
 af8:	f0 e0       	ldi	r31, 0x00	; 0
 afa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 afc:	80 81       	ld	r24, Z
 afe:	82 60       	ori	r24, 0x02	; 2
 b00:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 b02:	80 81       	ld	r24, Z
 b04:	81 60       	ori	r24, 0x01	; 1
 b06:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 b08:	e0 e8       	ldi	r30, 0x80	; 128
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	80 81       	ld	r24, Z
 b0e:	81 60       	ori	r24, 0x01	; 1
 b10:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 b12:	e1 eb       	ldi	r30, 0xB1	; 177
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	80 81       	ld	r24, Z
 b18:	84 60       	ori	r24, 0x04	; 4
 b1a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 b1c:	e0 eb       	ldi	r30, 0xB0	; 176
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	80 81       	ld	r24, Z
 b22:	81 60       	ori	r24, 0x01	; 1
 b24:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 b26:	ea e7       	ldi	r30, 0x7A	; 122
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	80 81       	ld	r24, Z
 b2c:	84 60       	ori	r24, 0x04	; 4
 b2e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 b30:	80 81       	ld	r24, Z
 b32:	82 60       	ori	r24, 0x02	; 2
 b34:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 b36:	80 81       	ld	r24, Z
 b38:	81 60       	ori	r24, 0x01	; 1
 b3a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 b3c:	80 81       	ld	r24, Z
 b3e:	80 68       	ori	r24, 0x80	; 128
 b40:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 b42:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 b46:	08 95       	ret

00000b48 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
 b48:	8e 30       	cpi	r24, 0x0E	; 14
 b4a:	08 f0       	brcs	.+2      	; 0xb4e <analogRead+0x6>
 b4c:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
 b4e:	87 70       	andi	r24, 0x07	; 7
 b50:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 b54:	90 e4       	ldi	r25, 0x40	; 64
 b56:	29 9f       	mul	r18, r25
 b58:	90 01       	movw	r18, r0
 b5a:	11 24       	eor	r1, r1
 b5c:	82 2b       	or	r24, r18
 b5e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
 b62:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 b66:	80 64       	ori	r24, 0x40	; 64
 b68:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
 b6c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 b70:	86 fd       	sbrc	r24, 6
 b72:	fc cf       	rjmp	.-8      	; 0xb6c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
 b74:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
 b78:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
 b7c:	90 e0       	ldi	r25, 0x00	; 0
}
 b7e:	92 2b       	or	r25, r18
 b80:	08 95       	ret

00000b82 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 b82:	83 30       	cpi	r24, 0x03	; 3
 b84:	81 f0       	breq	.+32     	; 0xba6 <turnOffPWM+0x24>
 b86:	28 f4       	brcc	.+10     	; 0xb92 <turnOffPWM+0x10>
 b88:	81 30       	cpi	r24, 0x01	; 1
 b8a:	99 f0       	breq	.+38     	; 0xbb2 <turnOffPWM+0x30>
 b8c:	82 30       	cpi	r24, 0x02	; 2
 b8e:	a1 f0       	breq	.+40     	; 0xbb8 <turnOffPWM+0x36>
 b90:	08 95       	ret
 b92:	87 30       	cpi	r24, 0x07	; 7
 b94:	a9 f0       	breq	.+42     	; 0xbc0 <turnOffPWM+0x3e>
 b96:	88 30       	cpi	r24, 0x08	; 8
 b98:	b9 f0       	breq	.+46     	; 0xbc8 <turnOffPWM+0x46>
 b9a:	84 30       	cpi	r24, 0x04	; 4
 b9c:	d1 f4       	brne	.+52     	; 0xbd2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 b9e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 ba2:	8f 7d       	andi	r24, 0xDF	; 223
 ba4:	03 c0       	rjmp	.+6      	; 0xbac <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 ba6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 baa:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 bac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 bb0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 bb2:	84 b5       	in	r24, 0x24	; 36
 bb4:	8f 77       	andi	r24, 0x7F	; 127
 bb6:	02 c0       	rjmp	.+4      	; 0xbbc <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 bb8:	84 b5       	in	r24, 0x24	; 36
 bba:	8f 7d       	andi	r24, 0xDF	; 223
 bbc:	84 bd       	out	0x24, r24	; 36
 bbe:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 bc0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 bc4:	8f 77       	andi	r24, 0x7F	; 127
 bc6:	03 c0       	rjmp	.+6      	; 0xbce <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 bc8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 bcc:	8f 7d       	andi	r24, 0xDF	; 223
 bce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 bd2:	08 95       	ret

00000bd4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 bd4:	cf 93       	push	r28
 bd6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	fc 01       	movw	r30, r24
 bdc:	e4 58       	subi	r30, 0x84	; 132
 bde:	ff 4f       	sbci	r31, 0xFF	; 255
 be0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 be2:	fc 01       	movw	r30, r24
 be4:	e0 57       	subi	r30, 0x70	; 112
 be6:	ff 4f       	sbci	r31, 0xFF	; 255
 be8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 bea:	88 23       	and	r24, r24
 bec:	61 f1       	breq	.+88     	; 0xc46 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	88 0f       	add	r24, r24
 bf2:	99 1f       	adc	r25, r25
 bf4:	fc 01       	movw	r30, r24
 bf6:	e8 54       	subi	r30, 0x48	; 72
 bf8:	ff 4f       	sbci	r31, 0xFF	; 255
 bfa:	c5 91       	lpm	r28, Z+
 bfc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 bfe:	fc 01       	movw	r30, r24
 c00:	e2 55       	subi	r30, 0x52	; 82
 c02:	ff 4f       	sbci	r31, 0xFF	; 255
 c04:	a5 91       	lpm	r26, Z+
 c06:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 c08:	61 11       	cpse	r22, r1
 c0a:	09 c0       	rjmp	.+18     	; 0xc1e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 c0c:	9f b7       	in	r25, 0x3f	; 63
                cli();
 c0e:	f8 94       	cli
		*reg &= ~bit;
 c10:	88 81       	ld	r24, Y
 c12:	20 95       	com	r18
 c14:	82 23       	and	r24, r18
 c16:	88 83       	st	Y, r24
		*out &= ~bit;
 c18:	ec 91       	ld	r30, X
 c1a:	2e 23       	and	r18, r30
 c1c:	0b c0       	rjmp	.+22     	; 0xc34 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 c1e:	62 30       	cpi	r22, 0x02	; 2
 c20:	61 f4       	brne	.+24     	; 0xc3a <pinMode+0x66>
		uint8_t oldSREG = SREG;
 c22:	9f b7       	in	r25, 0x3f	; 63
                cli();
 c24:	f8 94       	cli
		*reg &= ~bit;
 c26:	38 81       	ld	r19, Y
 c28:	82 2f       	mov	r24, r18
 c2a:	80 95       	com	r24
 c2c:	83 23       	and	r24, r19
 c2e:	88 83       	st	Y, r24
		*out |= bit;
 c30:	ec 91       	ld	r30, X
 c32:	2e 2b       	or	r18, r30
 c34:	2c 93       	st	X, r18
		SREG = oldSREG;
 c36:	9f bf       	out	0x3f, r25	; 63
 c38:	06 c0       	rjmp	.+12     	; 0xc46 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 c3a:	8f b7       	in	r24, 0x3f	; 63
                cli();
 c3c:	f8 94       	cli
		*reg |= bit;
 c3e:	e8 81       	ld	r30, Y
 c40:	2e 2b       	or	r18, r30
 c42:	28 83       	st	Y, r18
		SREG = oldSREG;
 c44:	8f bf       	out	0x3f, r24	; 63
	}
}
 c46:	df 91       	pop	r29
 c48:	cf 91       	pop	r28
 c4a:	08 95       	ret

00000c4c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 c4c:	1f 93       	push	r17
 c4e:	cf 93       	push	r28
 c50:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 c52:	28 2f       	mov	r18, r24
 c54:	30 e0       	ldi	r19, 0x00	; 0
 c56:	f9 01       	movw	r30, r18
 c58:	e8 59       	subi	r30, 0x98	; 152
 c5a:	ff 4f       	sbci	r31, 0xFF	; 255
 c5c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 c5e:	f9 01       	movw	r30, r18
 c60:	e4 58       	subi	r30, 0x84	; 132
 c62:	ff 4f       	sbci	r31, 0xFF	; 255
 c64:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 c66:	f9 01       	movw	r30, r18
 c68:	e0 57       	subi	r30, 0x70	; 112
 c6a:	ff 4f       	sbci	r31, 0xFF	; 255
 c6c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 c6e:	cc 23       	and	r28, r28
 c70:	c9 f0       	breq	.+50     	; 0xca4 <digitalWrite+0x58>
 c72:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 c74:	81 11       	cpse	r24, r1
 c76:	0e 94 c1 05 	call	0xb82	; 0xb82 <turnOffPWM>

	out = portOutputRegister(port);
 c7a:	ec 2f       	mov	r30, r28
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	ee 0f       	add	r30, r30
 c80:	ff 1f       	adc	r31, r31
 c82:	e2 55       	subi	r30, 0x52	; 82
 c84:	ff 4f       	sbci	r31, 0xFF	; 255
 c86:	a5 91       	lpm	r26, Z+
 c88:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 c8a:	8f b7       	in	r24, 0x3f	; 63
	cli();
 c8c:	f8 94       	cli

	if (val == LOW) {
 c8e:	11 11       	cpse	r17, r1
 c90:	05 c0       	rjmp	.+10     	; 0xc9c <digitalWrite+0x50>
		*out &= ~bit;
 c92:	9c 91       	ld	r25, X
 c94:	ed 2f       	mov	r30, r29
 c96:	e0 95       	com	r30
 c98:	e9 23       	and	r30, r25
 c9a:	02 c0       	rjmp	.+4      	; 0xca0 <digitalWrite+0x54>
	} else {
		*out |= bit;
 c9c:	ec 91       	ld	r30, X
 c9e:	ed 2b       	or	r30, r29
 ca0:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 ca2:	8f bf       	out	0x3f, r24	; 63
}
 ca4:	df 91       	pop	r29
 ca6:	cf 91       	pop	r28
 ca8:	1f 91       	pop	r17
 caa:	08 95       	ret

00000cac <digitalRead>:

int digitalRead(uint8_t pin)
{
 cac:	cf 93       	push	r28
 cae:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 cb0:	28 2f       	mov	r18, r24
 cb2:	30 e0       	ldi	r19, 0x00	; 0
 cb4:	f9 01       	movw	r30, r18
 cb6:	e8 59       	subi	r30, 0x98	; 152
 cb8:	ff 4f       	sbci	r31, 0xFF	; 255
 cba:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 cbc:	f9 01       	movw	r30, r18
 cbe:	e4 58       	subi	r30, 0x84	; 132
 cc0:	ff 4f       	sbci	r31, 0xFF	; 255
 cc2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 cc4:	f9 01       	movw	r30, r18
 cc6:	e0 57       	subi	r30, 0x70	; 112
 cc8:	ff 4f       	sbci	r31, 0xFF	; 255
 cca:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 ccc:	cc 23       	and	r28, r28
 cce:	91 f0       	breq	.+36     	; 0xcf4 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 cd0:	81 11       	cpse	r24, r1
 cd2:	0e 94 c1 05 	call	0xb82	; 0xb82 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 cd6:	ec 2f       	mov	r30, r28
 cd8:	f0 e0       	ldi	r31, 0x00	; 0
 cda:	ee 0f       	add	r30, r30
 cdc:	ff 1f       	adc	r31, r31
 cde:	ec 55       	subi	r30, 0x5C	; 92
 ce0:	ff 4f       	sbci	r31, 0xFF	; 255
 ce2:	a5 91       	lpm	r26, Z+
 ce4:	b4 91       	lpm	r27, Z
 ce6:	ec 91       	ld	r30, X
 ce8:	ed 23       	and	r30, r29
 cea:	81 e0       	ldi	r24, 0x01	; 1
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	21 f4       	brne	.+8      	; 0xcf8 <digitalRead+0x4c>
 cf0:	80 e0       	ldi	r24, 0x00	; 0
 cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 cf4:	80 e0       	ldi	r24, 0x00	; 0
 cf6:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 cf8:	df 91       	pop	r29
 cfa:	cf 91       	pop	r28
 cfc:	08 95       	ret

00000cfe <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 cfe:	08 95       	ret

00000d00 <__udivmodsi4>:
 d00:	a1 e2       	ldi	r26, 0x21	; 33
 d02:	1a 2e       	mov	r1, r26
 d04:	aa 1b       	sub	r26, r26
 d06:	bb 1b       	sub	r27, r27
 d08:	fd 01       	movw	r30, r26
 d0a:	0d c0       	rjmp	.+26     	; 0xd26 <__udivmodsi4_ep>

00000d0c <__udivmodsi4_loop>:
 d0c:	aa 1f       	adc	r26, r26
 d0e:	bb 1f       	adc	r27, r27
 d10:	ee 1f       	adc	r30, r30
 d12:	ff 1f       	adc	r31, r31
 d14:	a2 17       	cp	r26, r18
 d16:	b3 07       	cpc	r27, r19
 d18:	e4 07       	cpc	r30, r20
 d1a:	f5 07       	cpc	r31, r21
 d1c:	20 f0       	brcs	.+8      	; 0xd26 <__udivmodsi4_ep>
 d1e:	a2 1b       	sub	r26, r18
 d20:	b3 0b       	sbc	r27, r19
 d22:	e4 0b       	sbc	r30, r20
 d24:	f5 0b       	sbc	r31, r21

00000d26 <__udivmodsi4_ep>:
 d26:	66 1f       	adc	r22, r22
 d28:	77 1f       	adc	r23, r23
 d2a:	88 1f       	adc	r24, r24
 d2c:	99 1f       	adc	r25, r25
 d2e:	1a 94       	dec	r1
 d30:	69 f7       	brne	.-38     	; 0xd0c <__udivmodsi4_loop>
 d32:	60 95       	com	r22
 d34:	70 95       	com	r23
 d36:	80 95       	com	r24
 d38:	90 95       	com	r25
 d3a:	9b 01       	movw	r18, r22
 d3c:	ac 01       	movw	r20, r24
 d3e:	bd 01       	movw	r22, r26
 d40:	cf 01       	movw	r24, r30
 d42:	08 95       	ret

00000d44 <__tablejump2__>:
 d44:	ee 0f       	add	r30, r30
 d46:	ff 1f       	adc	r31, r31
 d48:	05 90       	lpm	r0, Z+
 d4a:	f4 91       	lpm	r31, Z
 d4c:	e0 2d       	mov	r30, r0
 d4e:	09 94       	ijmp

00000d50 <_exit>:
 d50:	f8 94       	cli

00000d52 <__stop_program>:
 d52:	ff cf       	rjmp	.-2      	; 0xd52 <__stop_program>
