
Single_digit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000b86  00000c1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800110  00800110  00000c2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000298  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007bc5  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000184c  00000000  00000000  00008af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001827  00000000  00000000  0000a345  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  0000bb6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c19  00000000  00000000  0000c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e11  00000000  00000000  0000def9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  00010d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 2a 03 	jmp	0x654	; 0x654 <__vector_18>
  4c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	8c 03       	fmulsu	r16, r20

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	e6 e8       	ldi	r30, 0x86	; 134
  d8:	fb e0       	ldi	r31, 0x0B	; 11
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a0 e1       	ldi	r26, 0x10	; 16
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a8 3b       	cpi	r26, 0xB8	; 184
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 bb 05 	call	0xb76	; 0xb76 <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 ba 03 	call	0x774	; 0x774 <main>
 110:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <setup>:
#define button_hiss_1 4
#define button_hiss_2 5


void setup() {
	pinMode(led_Y,OUTPUT);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
	pinMode(led_R,OUTPUT);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
	pinMode(led_B,OUTPUT);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
	pinMode(button_Y, INPUT);	
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
	pinMode(button_R, INPUT);	
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
	pinMode(button_B, INPUT);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
	pinMode(button_hiss_0, INPUT);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
	pinMode(button_hiss_1, INPUT);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
	pinMode(button_hiss_2, INPUT);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 03 05 	call	0xa06	; 0xa06 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 160:	26 e0       	ldi	r18, 0x06	; 6
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	55 e2       	ldi	r21, 0x25	; 37
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	82 e1       	ldi	r24, 0x12	; 18
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_ZN14HardwareSerial5beginEmh>

00000172 <_Z11light_it_upv>:
	Serial.begin(9600);
}

void light_it_up(void){
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	static int i = 0;
	//Clear LEDs
	digitalWrite(led_Y,0);
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	88 e0       	ldi	r24, 0x08	; 8
 17a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
	digitalWrite(led_R,0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	89 e0       	ldi	r24, 0x09	; 9
 182:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
	digitalWrite(led_B,0);
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	8a e0       	ldi	r24, 0x0A	; 10
 18a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
	// Keep the LED alive
	if (i == 0){
 18e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 192:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 196:	89 2b       	or	r24, r25
 198:	21 f4       	brne	.+8      	; 0x1a2 <_Z11light_it_upv+0x30>
		digitalWrite(led_Y,1);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	88 e0       	ldi	r24, 0x08	; 8
 19e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
	}
	if (i == 1){
 1a2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1a6:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	21 f4       	brne	.+8      	; 0x1b6 <_Z11light_it_upv+0x44>
		digitalWrite(led_R,1);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	89 e0       	ldi	r24, 0x09	; 9
 1b2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
	}
	if (i == 2){
 1b6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1ba:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1be:	02 97       	sbiw	r24, 0x02	; 2
 1c0:	21 f4       	brne	.+8      	; 0x1ca <_Z11light_it_upv+0x58>
		digitalWrite(led_B,1);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
	}

	// All combinations for where you and the elevetor are
	// 3s delay for one floor, 6s delay for two floors
	if ((digitalRead(button_Y) == 0 || digitalRead(button_hiss_0)==0) && i == 2){
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 1d0:	89 2b       	or	r24, r25
 1d2:	39 f4       	brne	.+14     	; 0x1e2 <_Z11light_it_upv+0x70>
 1d4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1d8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1dc:	02 97       	sbiw	r24, 0x02	; 2
 1de:	59 f5       	brne	.+86     	; 0x236 <_Z11light_it_upv+0xc4>
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <_Z11light_it_upv+0x7c>
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 1e8:	89 2b       	or	r24, r25
 1ea:	a1 f3       	breq	.-24     	; 0x1d4 <_Z11light_it_upv+0x62>
 1ec:	24 c0       	rjmp	.+72     	; 0x236 <_Z11light_it_upv+0xc4>
		i = 0;
 1ee:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 1f2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		digitalWrite(led_Y,1);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	88 e0       	ldi	r24, 0x08	; 8
 1fa:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
 1fe:	c4 e6       	ldi	r28, 0x64	; 100
 200:	d0 e0       	ldi	r29, 0x00	; 0
		for (int jx = 0; jx <100; jx++){
			if ((digitalRead(button_R) == 0 || digitalRead(button_hiss_1)==0)){
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 208:	89 2b       	or	r24, r25
 20a:	09 f4       	brne	.+2      	; 0x20e <_Z11light_it_upv+0x9c>
 20c:	a4 c0       	rjmp	.+328    	; 0x356 <_Z11light_it_upv+0x1e4>
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 214:	89 2b       	or	r24, r25
 216:	09 f4       	brne	.+2      	; 0x21a <_Z11light_it_upv+0xa8>
 218:	9e c0       	rjmp	.+316    	; 0x356 <_Z11light_it_upv+0x1e4>
				digitalWrite(led_R,1);
				delay(1000);
				digitalWrite(led_B,0);
			}
			delay(30);
 21a:	6e e1       	ldi	r22, 0x1E	; 30
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
 226:	21 97       	sbiw	r28, 0x01	; 1
	// All combinations for where you and the elevetor are
	// 3s delay for one floor, 6s delay for two floors
	if ((digitalRead(button_Y) == 0 || digitalRead(button_hiss_0)==0) && i == 2){
		i = 0;
		digitalWrite(led_Y,1);
		for (int jx = 0; jx <100; jx++){
 228:	61 f7       	brne	.-40     	; 0x202 <_Z11light_it_upv+0x90>
				delay(1000);
				digitalWrite(led_B,0);
			}
			delay(30);
		}
		delay(3000);
 22a:	68 eb       	ldi	r22, 0xB8	; 184
 22c:	7b e0       	ldi	r23, 0x0B	; 11
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
	}
	if ((digitalRead(button_Y)==0 || digitalRead(button_hiss_0)==0) && i == 1){
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 23c:	89 2b       	or	r24, r25
 23e:	39 f4       	brne	.+14     	; 0x24e <_Z11light_it_upv+0xdc>
 240:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 244:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	31 f4       	brne	.+12     	; 0x258 <_Z11light_it_upv+0xe6>
 24c:	93 c0       	rjmp	.+294    	; 0x374 <_Z11light_it_upv+0x202>
 24e:	83 e0       	ldi	r24, 0x03	; 3
 250:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 254:	89 2b       	or	r24, r25
 256:	a1 f3       	breq	.-24     	; 0x240 <_Z11light_it_upv+0xce>
		i = 0;
		digitalWrite(led_Y,1);
		delay(3000);
	}
	if ((digitalRead(button_R)==0 || digitalRead(button_hiss_1)==0) && i == 0){
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 25e:	89 2b       	or	r24, r25
 260:	41 f4       	brne	.+16     	; 0x272 <_Z11light_it_upv+0x100>
 262:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 266:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 26a:	89 2b       	or	r24, r25
 26c:	09 f4       	brne	.+2      	; 0x270 <_Z11light_it_upv+0xfe>
 26e:	91 c0       	rjmp	.+290    	; 0x392 <_Z11light_it_upv+0x220>
 270:	05 c0       	rjmp	.+10     	; 0x27c <_Z11light_it_upv+0x10a>
 272:	84 e0       	ldi	r24, 0x04	; 4
 274:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 278:	89 2b       	or	r24, r25
 27a:	99 f3       	breq	.-26     	; 0x262 <_Z11light_it_upv+0xf0>
		i = 1;
		digitalWrite(led_R,1);
		delay(3000);
	}
	if ((digitalRead(button_R)==0 || digitalRead(button_hiss_1)==0) && i == 2){
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 282:	89 2b       	or	r24, r25
 284:	39 f4       	brne	.+14     	; 0x294 <_Z11light_it_upv+0x122>
 286:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 28a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 28e:	02 97       	sbiw	r24, 0x02	; 2
 290:	31 f4       	brne	.+12     	; 0x29e <_Z11light_it_upv+0x12c>
 292:	90 c0       	rjmp	.+288    	; 0x3b4 <_Z11light_it_upv+0x242>
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 29a:	89 2b       	or	r24, r25
 29c:	a1 f3       	breq	.-24     	; 0x286 <_Z11light_it_upv+0x114>
		i = 1;
		digitalWrite(led_R,1);
		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_2)==0) && i == 0){
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 2a4:	89 2b       	or	r24, r25
 2a6:	39 f4       	brne	.+14     	; 0x2b6 <_Z11light_it_upv+0x144>
 2a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 2ac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 2b0:	89 2b       	or	r24, r25
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <_Z11light_it_upv+0x150>
 2b4:	2c c0       	rjmp	.+88     	; 0x30e <_Z11light_it_upv+0x19c>
 2b6:	85 e0       	ldi	r24, 0x05	; 5
 2b8:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 2bc:	89 2b       	or	r24, r25
 2be:	a1 f3       	breq	.-24     	; 0x2a8 <_Z11light_it_upv+0x136>
 2c0:	26 c0       	rjmp	.+76     	; 0x30e <_Z11light_it_upv+0x19c>
		i = 2;
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 2ca:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		digitalWrite(led_B,1);
 2ce:	61 e0       	ldi	r22, 0x01	; 1
 2d0:	8a e0       	ldi	r24, 0x0A	; 10
 2d2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
 2d6:	c4 e6       	ldi	r28, 0x64	; 100
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
		for (int jx = 0; jx <100; jx++){
			if ((digitalRead(button_R) == 0 || digitalRead(button_hiss_1)==0)){
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 2e0:	89 2b       	or	r24, r25
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <_Z11light_it_upv+0x174>
 2e4:	78 c0       	rjmp	.+240    	; 0x3d6 <_Z11light_it_upv+0x264>
 2e6:	84 e0       	ldi	r24, 0x04	; 4
 2e8:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 2ec:	89 2b       	or	r24, r25
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <_Z11light_it_upv+0x180>
 2f0:	72 c0       	rjmp	.+228    	; 0x3d6 <_Z11light_it_upv+0x264>
				digitalWrite(led_R,1);
				delay(1000);
				digitalWrite(led_Y,0);
			}
			delay(30);
 2f2:	6e e1       	ldi	r22, 0x1E	; 30
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
 2fe:	21 97       	sbiw	r28, 0x01	; 1
		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_2)==0) && i == 0){
		i = 2;
		digitalWrite(led_B,1);
		for (int jx = 0; jx <100; jx++){
 300:	61 f7       	brne	.-40     	; 0x2da <_Z11light_it_upv+0x168>
				delay(1000);
				digitalWrite(led_Y,0);
			}
			delay(30);
		}
		delay(3000);
 302:	68 eb       	ldi	r22, 0xB8	; 184
 304:	7b e0       	ldi	r23, 0x0B	; 11
 306:	80 e0       	ldi	r24, 0x00	; 0
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_2)==0) && i == 1){
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 314:	89 2b       	or	r24, r25
 316:	c9 f4       	brne	.+50     	; 0x34a <_Z11light_it_upv+0x1d8>
 318:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 31c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	09 f0       	breq	.+2      	; 0x326 <_Z11light_it_upv+0x1b4>
 324:	67 c0       	rjmp	.+206    	; 0x3f4 <_Z11light_it_upv+0x282>
		i = 2;
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 32e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		digitalWrite(led_B,1);
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	8a e0       	ldi	r24, 0x0A	; 10
 336:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
		delay(3000);
 33a:	68 eb       	ldi	r22, 0xB8	; 184
 33c:	7b e0       	ldi	r23, 0x0B	; 11
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_2)==0) && i == 1){
		i = 2;
		digitalWrite(led_B,1);
		delay(3000);
 346:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <delay>
			}
			delay(30);
		}
		delay(3000);
	}
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_2)==0) && i == 1){
 34a:	85 e0       	ldi	r24, 0x05	; 5
 34c:	0e 94 6f 05 	call	0xade	; 0xade <digitalRead>
 350:	89 2b       	or	r24, r25
 352:	11 f3       	breq	.-60     	; 0x318 <_Z11light_it_upv+0x1a6>
 354:	4f c0       	rjmp	.+158    	; 0x3f4 <_Z11light_it_upv+0x282>
	if ((digitalRead(button_Y) == 0 || digitalRead(button_hiss_0)==0) && i == 2){
		i = 0;
		digitalWrite(led_Y,1);
		for (int jx = 0; jx <100; jx++){
			if ((digitalRead(button_R) == 0 || digitalRead(button_hiss_1)==0)){
				digitalWrite(led_R,1);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	89 e0       	ldi	r24, 0x09	; 9
 35a:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
				delay(1000);
 35e:	68 ee       	ldi	r22, 0xE8	; 232
 360:	73 e0       	ldi	r23, 0x03	; 3
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
				digitalWrite(led_B,0);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	8a e0       	ldi	r24, 0x0A	; 10
 36e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
 372:	53 cf       	rjmp	.-346    	; 0x21a <_Z11light_it_upv+0xa8>
			delay(30);
		}
		delay(3000);
	}
	if ((digitalRead(button_Y)==0 || digitalRead(button_hiss_0)==0) && i == 1){
		i = 0;
 374:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 378:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		digitalWrite(led_Y,1);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	88 e0       	ldi	r24, 0x08	; 8
 380:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
		delay(3000);
 384:	68 eb       	ldi	r22, 0xB8	; 184
 386:	7b e0       	ldi	r23, 0x0B	; 11
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
 390:	63 cf       	rjmp	.-314    	; 0x258 <_Z11light_it_upv+0xe6>
	}
	if ((digitalRead(button_R)==0 || digitalRead(button_hiss_1)==0) && i == 0){
		i = 1;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 39a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		digitalWrite(led_R,1);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	89 e0       	ldi	r24, 0x09	; 9
 3a2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
		delay(3000);
 3a6:	68 eb       	ldi	r22, 0xB8	; 184
 3a8:	7b e0       	ldi	r23, 0x0B	; 11
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
 3b2:	64 cf       	rjmp	.-312    	; 0x27c <_Z11light_it_upv+0x10a>
	}
	if ((digitalRead(button_R)==0 || digitalRead(button_hiss_1)==0) && i == 2){
		i = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 3bc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		digitalWrite(led_R,1);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	89 e0       	ldi	r24, 0x09	; 9
 3c4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
		delay(3000);
 3c8:	68 eb       	ldi	r22, 0xB8	; 184
 3ca:	7b e0       	ldi	r23, 0x0B	; 11
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
 3d4:	64 cf       	rjmp	.-312    	; 0x29e <_Z11light_it_upv+0x12c>
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_2)==0) && i == 0){
		i = 2;
		digitalWrite(led_B,1);
		for (int jx = 0; jx <100; jx++){
			if ((digitalRead(button_R) == 0 || digitalRead(button_hiss_1)==0)){
				digitalWrite(led_R,1);
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	89 e0       	ldi	r24, 0x09	; 9
 3da:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
				delay(1000);
 3de:	68 ee       	ldi	r22, 0xE8	; 232
 3e0:	73 e0       	ldi	r23, 0x03	; 3
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <delay>
				digitalWrite(led_Y,0);
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	88 e0       	ldi	r24, 0x08	; 8
 3ee:	0e 94 3f 05 	call	0xa7e	; 0xa7e <digitalWrite>
 3f2:	7f cf       	rjmp	.-258    	; 0x2f2 <_Z11light_it_upv+0x180>
	if ((digitalRead(button_B)==0 || digitalRead(button_hiss_2)==0) && i == 1){
		i = 2;
		digitalWrite(led_B,1);
		delay(3000);
	}
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <loop>:

void loop() {
	light_it_up();
 3fa:	0c 94 b9 00 	jmp	0x172	; 0x172 <_Z11light_it_upv>

000003fe <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3fe:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 400:	91 8d       	ldd	r25, Z+25	; 0x19
 402:	22 8d       	ldd	r18, Z+26	; 0x1a
 404:	89 2f       	mov	r24, r25
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	80 5c       	subi	r24, 0xC0	; 192
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	82 1b       	sub	r24, r18
 40e:	91 09       	sbc	r25, r1
}
 410:	8f 73       	andi	r24, 0x3F	; 63
 412:	99 27       	eor	r25, r25
 414:	08 95       	ret

00000416 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 416:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 418:	91 8d       	ldd	r25, Z+25	; 0x19
 41a:	82 8d       	ldd	r24, Z+26	; 0x1a
 41c:	98 17       	cp	r25, r24
 41e:	31 f0       	breq	.+12     	; 0x42c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 420:	82 8d       	ldd	r24, Z+26	; 0x1a
 422:	e8 0f       	add	r30, r24
 424:	f1 1d       	adc	r31, r1
 426:	85 8d       	ldd	r24, Z+29	; 0x1d
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 430:	08 95       	ret

00000432 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 432:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 434:	91 8d       	ldd	r25, Z+25	; 0x19
 436:	82 8d       	ldd	r24, Z+26	; 0x1a
 438:	98 17       	cp	r25, r24
 43a:	61 f0       	breq	.+24     	; 0x454 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 43c:	82 8d       	ldd	r24, Z+26	; 0x1a
 43e:	df 01       	movw	r26, r30
 440:	a8 0f       	add	r26, r24
 442:	b1 1d       	adc	r27, r1
 444:	5d 96       	adiw	r26, 0x1d	; 29
 446:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 448:	92 8d       	ldd	r25, Z+26	; 0x1a
 44a:	9f 5f       	subi	r25, 0xFF	; 255
 44c:	9f 73       	andi	r25, 0x3F	; 63
 44e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 454:	8f ef       	ldi	r24, 0xFF	; 255
 456:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 458:	08 95       	ret

0000045a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 45a:	82 e8       	ldi	r24, 0x82	; 130
 45c:	93 e0       	ldi	r25, 0x03	; 3
 45e:	89 2b       	or	r24, r25
 460:	49 f0       	breq	.+18     	; 0x474 <_Z14serialEventRunv+0x1a>
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	89 2b       	or	r24, r25
 468:	29 f0       	breq	.+10     	; 0x474 <_Z14serialEventRunv+0x1a>
 46a:	0e 94 82 03 	call	0x704	; 0x704 <_Z17Serial0_availablev>
 46e:	81 11       	cpse	r24, r1
 470:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 474:	08 95       	ret

00000476 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 476:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 478:	84 8d       	ldd	r24, Z+28	; 0x1c
 47a:	df 01       	movw	r26, r30
 47c:	a8 0f       	add	r26, r24
 47e:	b1 1d       	adc	r27, r1
 480:	a3 5a       	subi	r26, 0xA3	; 163
 482:	bf 4f       	sbci	r27, 0xFF	; 255
 484:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 486:	84 8d       	ldd	r24, Z+28	; 0x1c
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	8f 73       	andi	r24, 0x3F	; 63
 48e:	99 27       	eor	r25, r25
 490:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 492:	a6 89       	ldd	r26, Z+22	; 0x16
 494:	b7 89       	ldd	r27, Z+23	; 0x17
 496:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 498:	a0 89       	ldd	r26, Z+16	; 0x10
 49a:	b1 89       	ldd	r27, Z+17	; 0x11
 49c:	8c 91       	ld	r24, X
 49e:	80 64       	ori	r24, 0x40	; 64
 4a0:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 4a2:	93 8d       	ldd	r25, Z+27	; 0x1b
 4a4:	84 8d       	ldd	r24, Z+28	; 0x1c
 4a6:	98 13       	cpse	r25, r24
 4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 4aa:	02 88       	ldd	r0, Z+18	; 0x12
 4ac:	f3 89       	ldd	r31, Z+19	; 0x13
 4ae:	e0 2d       	mov	r30, r0
 4b0:	80 81       	ld	r24, Z
 4b2:	8f 7d       	andi	r24, 0xDF	; 223
 4b4:	80 83       	st	Z, r24
 4b6:	08 95       	ret

000004b8 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4be:	88 8d       	ldd	r24, Y+24	; 0x18
 4c0:	88 23       	and	r24, r24
 4c2:	c9 f0       	breq	.+50     	; 0x4f6 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4c4:	ea 89       	ldd	r30, Y+18	; 0x12
 4c6:	fb 89       	ldd	r31, Y+19	; 0x13
 4c8:	80 81       	ld	r24, Z
 4ca:	85 fd       	sbrc	r24, 5
 4cc:	05 c0       	rjmp	.+10     	; 0x4d8 <_ZN14HardwareSerial5flushEv+0x20>
 4ce:	a8 89       	ldd	r26, Y+16	; 0x10
 4d0:	b9 89       	ldd	r27, Y+17	; 0x11
 4d2:	8c 91       	ld	r24, X
 4d4:	86 fd       	sbrc	r24, 6
 4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4d8:	0f b6       	in	r0, 0x3f	; 63
 4da:	07 fc       	sbrc	r0, 7
 4dc:	f5 cf       	rjmp	.-22     	; 0x4c8 <_ZN14HardwareSerial5flushEv+0x10>
 4de:	80 81       	ld	r24, Z
 4e0:	85 ff       	sbrs	r24, 5
 4e2:	f2 cf       	rjmp	.-28     	; 0x4c8 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4e4:	a8 89       	ldd	r26, Y+16	; 0x10
 4e6:	b9 89       	ldd	r27, Y+17	; 0x11
 4e8:	8c 91       	ld	r24, X
 4ea:	85 ff       	sbrs	r24, 5
 4ec:	ed cf       	rjmp	.-38     	; 0x4c8 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4ee:	ce 01       	movw	r24, r28
 4f0:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4f4:	e7 cf       	rjmp	.-50     	; 0x4c4 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	ec 01       	movw	r28, r24
  _written = true;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 50e:	9b 8d       	ldd	r25, Y+27	; 0x1b
 510:	8c 8d       	ldd	r24, Y+28	; 0x1c
 512:	98 13       	cpse	r25, r24
 514:	05 c0       	rjmp	.+10     	; 0x520 <_ZN14HardwareSerial5writeEh+0x24>
 516:	e8 89       	ldd	r30, Y+16	; 0x10
 518:	f9 89       	ldd	r31, Y+17	; 0x11
 51a:	80 81       	ld	r24, Z
 51c:	85 fd       	sbrc	r24, 5
 51e:	24 c0       	rjmp	.+72     	; 0x568 <_ZN14HardwareSerial5writeEh+0x6c>
 520:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 522:	0b 8d       	ldd	r16, Y+27	; 0x1b
 524:	10 e0       	ldi	r17, 0x00	; 0
 526:	0f 5f       	subi	r16, 0xFF	; 255
 528:	1f 4f       	sbci	r17, 0xFF	; 255
 52a:	0f 73       	andi	r16, 0x3F	; 63
 52c:	11 27       	eor	r17, r17
 52e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 530:	8c 8d       	ldd	r24, Y+28	; 0x1c
 532:	e8 12       	cpse	r14, r24
 534:	0c c0       	rjmp	.+24     	; 0x54e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	07 fc       	sbrc	r0, 7
 53a:	fa cf       	rjmp	.-12     	; 0x530 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 53c:	e8 89       	ldd	r30, Y+16	; 0x10
 53e:	f9 89       	ldd	r31, Y+17	; 0x11
 540:	80 81       	ld	r24, Z
 542:	85 ff       	sbrs	r24, 5
 544:	f5 cf       	rjmp	.-22     	; 0x530 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 546:	ce 01       	movw	r24, r28
 548:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 54c:	f1 cf       	rjmp	.-30     	; 0x530 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 54e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 550:	fe 01       	movw	r30, r28
 552:	e8 0f       	add	r30, r24
 554:	f1 1d       	adc	r31, r1
 556:	e3 5a       	subi	r30, 0xA3	; 163
 558:	ff 4f       	sbci	r31, 0xFF	; 255
 55a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 55c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 55e:	ea 89       	ldd	r30, Y+18	; 0x12
 560:	fb 89       	ldd	r31, Y+19	; 0x13
 562:	80 81       	ld	r24, Z
 564:	80 62       	ori	r24, 0x20	; 32
 566:	07 c0       	rjmp	.+14     	; 0x576 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 568:	ee 89       	ldd	r30, Y+22	; 0x16
 56a:	ff 89       	ldd	r31, Y+23	; 0x17
 56c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 56e:	e8 89       	ldd	r30, Y+16	; 0x10
 570:	f9 89       	ldd	r31, Y+17	; 0x11
 572:	80 81       	ld	r24, Z
 574:	80 64       	ori	r24, 0x40	; 64
 576:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	1f 91       	pop	r17
 582:	0f 91       	pop	r16
 584:	ff 90       	pop	r15
 586:	ef 90       	pop	r14
 588:	08 95       	ret

0000058a <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 58a:	cf 92       	push	r12
 58c:	df 92       	push	r13
 58e:	ef 92       	push	r14
 590:	ff 92       	push	r15
 592:	1f 93       	push	r17
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	ec 01       	movw	r28, r24
 59a:	6a 01       	movw	r12, r20
 59c:	7b 01       	movw	r14, r22
 59e:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 5a0:	e8 89       	ldd	r30, Y+16	; 0x10
 5a2:	f9 89       	ldd	r31, Y+17	; 0x11
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5a8:	41 15       	cp	r20, r1
 5aa:	51 4e       	sbci	r21, 0xE1	; 225
 5ac:	61 05       	cpc	r22, r1
 5ae:	71 05       	cpc	r23, r1
 5b0:	b1 f0       	breq	.+44     	; 0x5de <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	79 e0       	ldi	r23, 0x09	; 9
 5b6:	8d e3       	ldi	r24, 0x3D	; 61
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	a7 01       	movw	r20, r14
 5bc:	96 01       	movw	r18, r12
 5be:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodsi4>
 5c2:	da 01       	movw	r26, r20
 5c4:	c9 01       	movw	r24, r18
 5c6:	01 97       	sbiw	r24, 0x01	; 1
 5c8:	a1 09       	sbc	r26, r1
 5ca:	b1 09       	sbc	r27, r1
 5cc:	b6 95       	lsr	r27
 5ce:	a7 95       	ror	r26
 5d0:	97 95       	ror	r25
 5d2:	87 95       	ror	r24
 5d4:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5d6:	41 15       	cp	r20, r1
 5d8:	80 e1       	ldi	r24, 0x10	; 16
 5da:	58 07       	cpc	r21, r24
 5dc:	a8 f0       	brcs	.+42     	; 0x608 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 5de:	e8 89       	ldd	r30, Y+16	; 0x10
 5e0:	f9 89       	ldd	r31, Y+17	; 0x11
 5e2:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 5e4:	60 e8       	ldi	r22, 0x80	; 128
 5e6:	74 e8       	ldi	r23, 0x84	; 132
 5e8:	8e e1       	ldi	r24, 0x1E	; 30
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	a7 01       	movw	r20, r14
 5ee:	96 01       	movw	r18, r12
 5f0:	0e 94 99 05 	call	0xb32	; 0xb32 <__udivmodsi4>
 5f4:	ba 01       	movw	r22, r20
 5f6:	a9 01       	movw	r20, r18
 5f8:	41 50       	subi	r20, 0x01	; 1
 5fa:	51 09       	sbc	r21, r1
 5fc:	61 09       	sbc	r22, r1
 5fe:	71 09       	sbc	r23, r1
 600:	76 95       	lsr	r23
 602:	67 95       	ror	r22
 604:	57 95       	ror	r21
 606:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 608:	ec 85       	ldd	r30, Y+12	; 0x0c
 60a:	fd 85       	ldd	r31, Y+13	; 0x0d
 60c:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 60e:	ee 85       	ldd	r30, Y+14	; 0x0e
 610:	ff 85       	ldd	r31, Y+15	; 0x0f
 612:	40 83       	st	Z, r20

  _written = false;
 614:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 616:	ec 89       	ldd	r30, Y+20	; 0x14
 618:	fd 89       	ldd	r31, Y+21	; 0x15
 61a:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 61c:	ea 89       	ldd	r30, Y+18	; 0x12
 61e:	fb 89       	ldd	r31, Y+19	; 0x13
 620:	80 81       	ld	r24, Z
 622:	80 61       	ori	r24, 0x10	; 16
 624:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 626:	ea 89       	ldd	r30, Y+18	; 0x12
 628:	fb 89       	ldd	r31, Y+19	; 0x13
 62a:	80 81       	ld	r24, Z
 62c:	88 60       	ori	r24, 0x08	; 8
 62e:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 630:	ea 89       	ldd	r30, Y+18	; 0x12
 632:	fb 89       	ldd	r31, Y+19	; 0x13
 634:	80 81       	ld	r24, Z
 636:	80 68       	ori	r24, 0x80	; 128
 638:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 63a:	ea 89       	ldd	r30, Y+18	; 0x12
 63c:	fb 89       	ldd	r31, Y+19	; 0x13
 63e:	80 81       	ld	r24, Z
 640:	8f 7d       	andi	r24, 0xDF	; 223
 642:	80 83       	st	Z, r24
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	ff 90       	pop	r15
 64c:	ef 90       	pop	r14
 64e:	df 90       	pop	r13
 650:	cf 90       	pop	r12
 652:	08 95       	ret

00000654 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	2f 93       	push	r18
 660:	8f 93       	push	r24
 662:	9f 93       	push	r25
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 668:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <Serial+0x10>
 66c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <Serial+0x11>
 670:	80 81       	ld	r24, Z
 672:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Serial+0x16>
 676:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Serial+0x17>
 67a:	82 fd       	sbrc	r24, 2
 67c:	12 c0       	rjmp	.+36     	; 0x6a2 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 67e:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 680:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Serial+0x19>
 684:	8f 5f       	subi	r24, 0xFF	; 255
 686:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 688:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <Serial+0x1a>
 68c:	82 17       	cp	r24, r18
 68e:	51 f0       	breq	.+20     	; 0x6a4 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 690:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <Serial+0x19>
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	ee 5e       	subi	r30, 0xEE	; 238
 698:	fe 4f       	sbci	r31, 0xFE	; 254
 69a:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 69c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Serial+0x19>
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 6a2:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	2f 91       	pop	r18
 6ae:	0f 90       	pop	r0
 6b0:	0f be       	out	0x3f, r0	; 63
 6b2:	0f 90       	pop	r0
 6b4:	1f 90       	pop	r1
 6b6:	18 95       	reti

000006b8 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 6b8:	1f 92       	push	r1
 6ba:	0f 92       	push	r0
 6bc:	0f b6       	in	r0, 0x3f	; 63
 6be:	0f 92       	push	r0
 6c0:	11 24       	eor	r1, r1
 6c2:	2f 93       	push	r18
 6c4:	3f 93       	push	r19
 6c6:	4f 93       	push	r20
 6c8:	5f 93       	push	r21
 6ca:	6f 93       	push	r22
 6cc:	7f 93       	push	r23
 6ce:	8f 93       	push	r24
 6d0:	9f 93       	push	r25
 6d2:	af 93       	push	r26
 6d4:	bf 93       	push	r27
 6d6:	ef 93       	push	r30
 6d8:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 6da:	82 e1       	ldi	r24, 0x12	; 18
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 6e2:	ff 91       	pop	r31
 6e4:	ef 91       	pop	r30
 6e6:	bf 91       	pop	r27
 6e8:	af 91       	pop	r26
 6ea:	9f 91       	pop	r25
 6ec:	8f 91       	pop	r24
 6ee:	7f 91       	pop	r23
 6f0:	6f 91       	pop	r22
 6f2:	5f 91       	pop	r21
 6f4:	4f 91       	pop	r20
 6f6:	3f 91       	pop	r19
 6f8:	2f 91       	pop	r18
 6fa:	0f 90       	pop	r0
 6fc:	0f be       	out	0x3f, r0	; 63
 6fe:	0f 90       	pop	r0
 700:	1f 90       	pop	r1
 702:	18 95       	reti

00000704 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 704:	82 e1       	ldi	r24, 0x12	; 18
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_ZN14HardwareSerial9availableEv>
 70c:	21 e0       	ldi	r18, 0x01	; 1
 70e:	89 2b       	or	r24, r25
 710:	09 f4       	brne	.+2      	; 0x714 <_Z17Serial0_availablev+0x10>
 712:	20 e0       	ldi	r18, 0x00	; 0
}
 714:	82 2f       	mov	r24, r18
 716:	08 95       	ret

00000718 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 718:	e2 e1       	ldi	r30, 0x12	; 18
 71a:	f1 e0       	ldi	r31, 0x01	; 1
 71c:	13 82       	std	Z+3, r1	; 0x03
 71e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 720:	88 ee       	ldi	r24, 0xE8	; 232
 722:	93 e0       	ldi	r25, 0x03	; 3
 724:	a0 e0       	ldi	r26, 0x00	; 0
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	84 83       	std	Z+4, r24	; 0x04
 72a:	95 83       	std	Z+5, r25	; 0x05
 72c:	a6 83       	std	Z+6, r26	; 0x06
 72e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 730:	84 e0       	ldi	r24, 0x04	; 4
 732:	91 e0       	ldi	r25, 0x01	; 1
 734:	91 83       	std	Z+1, r25	; 0x01
 736:	80 83       	st	Z, r24
 738:	85 ec       	ldi	r24, 0xC5	; 197
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	95 87       	std	Z+13, r25	; 0x0d
 73e:	84 87       	std	Z+12, r24	; 0x0c
 740:	84 ec       	ldi	r24, 0xC4	; 196
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	97 87       	std	Z+15, r25	; 0x0f
 746:	86 87       	std	Z+14, r24	; 0x0e
 748:	80 ec       	ldi	r24, 0xC0	; 192
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	91 8b       	std	Z+17, r25	; 0x11
 74e:	80 8b       	std	Z+16, r24	; 0x10
 750:	81 ec       	ldi	r24, 0xC1	; 193
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	93 8b       	std	Z+19, r25	; 0x13
 756:	82 8b       	std	Z+18, r24	; 0x12
 758:	82 ec       	ldi	r24, 0xC2	; 194
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	95 8b       	std	Z+21, r25	; 0x15
 75e:	84 8b       	std	Z+20, r24	; 0x14
 760:	86 ec       	ldi	r24, 0xC6	; 198
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	97 8b       	std	Z+23, r25	; 0x17
 766:	86 8b       	std	Z+22, r24	; 0x16
 768:	11 8e       	std	Z+25, r1	; 0x19
 76a:	12 8e       	std	Z+26, r1	; 0x1a
 76c:	13 8e       	std	Z+27, r1	; 0x1b
 76e:	14 8e       	std	Z+28, r1	; 0x1c
 770:	08 95       	ret

00000772 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 772:	08 95       	ret

00000774 <main>:

int main(void)
{
	init();
 774:	0e 94 9f 04 	call	0x93e	; 0x93e <init>

	initVariant();
 778:	0e 94 b9 03 	call	0x772	; 0x772 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 77c:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 780:	cd e2       	ldi	r28, 0x2D	; 45
 782:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 784:	0e 94 fd 01 	call	0x3fa	; 0x3fa <loop>
		if (serialEventRun) serialEventRun();
 788:	20 97       	sbiw	r28, 0x00	; 0
 78a:	e1 f3       	breq	.-8      	; 0x784 <main+0x10>
 78c:	0e 94 2d 02 	call	0x45a	; 0x45a <_Z14serialEventRunv>
 790:	f9 cf       	rjmp	.-14     	; 0x784 <main+0x10>

00000792 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 792:	cf 92       	push	r12
 794:	df 92       	push	r13
 796:	ef 92       	push	r14
 798:	ff 92       	push	r15
 79a:	0f 93       	push	r16
 79c:	1f 93       	push	r17
 79e:	cf 93       	push	r28
 7a0:	df 93       	push	r29
 7a2:	6c 01       	movw	r12, r24
 7a4:	7a 01       	movw	r14, r20
 7a6:	8b 01       	movw	r16, r22
  size_t n = 0;
 7a8:	c0 e0       	ldi	r28, 0x00	; 0
 7aa:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 7ac:	ce 15       	cp	r28, r14
 7ae:	df 05       	cpc	r29, r15
 7b0:	89 f0       	breq	.+34     	; 0x7d4 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 7b2:	d8 01       	movw	r26, r16
 7b4:	6d 91       	ld	r22, X+
 7b6:	8d 01       	movw	r16, r26
 7b8:	d6 01       	movw	r26, r12
 7ba:	ed 91       	ld	r30, X+
 7bc:	fc 91       	ld	r31, X
 7be:	01 90       	ld	r0, Z+
 7c0:	f0 81       	ld	r31, Z
 7c2:	e0 2d       	mov	r30, r0
 7c4:	c6 01       	movw	r24, r12
 7c6:	09 95       	icall
 7c8:	89 2b       	or	r24, r25
 7ca:	11 f4       	brne	.+4      	; 0x7d0 <_ZN5Print5writeEPKhj+0x3e>
 7cc:	7e 01       	movw	r14, r28
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <_ZN5Print5writeEPKhj+0x42>
 7d0:	21 96       	adiw	r28, 0x01	; 1
 7d2:	ec cf       	rjmp	.-40     	; 0x7ac <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 7d4:	c7 01       	movw	r24, r14
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	1f 91       	pop	r17
 7dc:	0f 91       	pop	r16
 7de:	ff 90       	pop	r15
 7e0:	ef 90       	pop	r14
 7e2:	df 90       	pop	r13
 7e4:	cf 90       	pop	r12
 7e6:	08 95       	ret

000007e8 <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7e8:	1f 92       	push	r1
 7ea:	0f 92       	push	r0
 7ec:	0f b6       	in	r0, 0x3f	; 63
 7ee:	0f 92       	push	r0
 7f0:	11 24       	eor	r1, r1
 7f2:	2f 93       	push	r18
 7f4:	3f 93       	push	r19
 7f6:	8f 93       	push	r24
 7f8:	9f 93       	push	r25
 7fa:	af 93       	push	r26
 7fc:	bf 93       	push	r27
 7fe:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <timer0_millis>
 802:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <timer0_millis+0x1>
 806:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <timer0_millis+0x2>
 80a:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <timer0_millis+0x3>
 80e:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <timer0_fract>
 812:	23 e0       	ldi	r18, 0x03	; 3
 814:	23 0f       	add	r18, r19
 816:	2d 37       	cpi	r18, 0x7D	; 125
 818:	20 f4       	brcc	.+8      	; 0x822 <__vector_16+0x3a>
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	a1 1d       	adc	r26, r1
 81e:	b1 1d       	adc	r27, r1
 820:	05 c0       	rjmp	.+10     	; 0x82c <__vector_16+0x44>
 822:	26 e8       	ldi	r18, 0x86	; 134
 824:	23 0f       	add	r18, r19
 826:	02 96       	adiw	r24, 0x02	; 2
 828:	a1 1d       	adc	r26, r1
 82a:	b1 1d       	adc	r27, r1
 82c:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <timer0_fract>
 830:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <timer0_millis>
 834:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <timer0_millis+0x1>
 838:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <timer0_millis+0x2>
 83c:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <timer0_millis+0x3>
 840:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_overflow_count>
 844:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_overflow_count+0x1>
 848:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <timer0_overflow_count+0x2>
 84c:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <timer0_overflow_count+0x3>
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	a1 1d       	adc	r26, r1
 854:	b1 1d       	adc	r27, r1
 856:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <timer0_overflow_count>
 85a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <timer0_overflow_count+0x1>
 85e:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <timer0_overflow_count+0x2>
 862:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <timer0_overflow_count+0x3>
 866:	bf 91       	pop	r27
 868:	af 91       	pop	r26
 86a:	9f 91       	pop	r25
 86c:	8f 91       	pop	r24
 86e:	3f 91       	pop	r19
 870:	2f 91       	pop	r18
 872:	0f 90       	pop	r0
 874:	0f be       	out	0x3f, r0	; 63
 876:	0f 90       	pop	r0
 878:	1f 90       	pop	r1
 87a:	18 95       	reti

0000087c <micros>:
 87c:	3f b7       	in	r19, 0x3f	; 63
 87e:	f8 94       	cli
 880:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_overflow_count>
 884:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_overflow_count+0x1>
 888:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <timer0_overflow_count+0x2>
 88c:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <timer0_overflow_count+0x3>
 890:	26 b5       	in	r18, 0x26	; 38
 892:	a8 9b       	sbis	0x15, 0	; 21
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <micros+0x24>
 896:	2f 3f       	cpi	r18, 0xFF	; 255
 898:	19 f0       	breq	.+6      	; 0x8a0 <micros+0x24>
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	a1 1d       	adc	r26, r1
 89e:	b1 1d       	adc	r27, r1
 8a0:	3f bf       	out	0x3f, r19	; 63
 8a2:	ba 2f       	mov	r27, r26
 8a4:	a9 2f       	mov	r26, r25
 8a6:	98 2f       	mov	r25, r24
 8a8:	88 27       	eor	r24, r24
 8aa:	82 0f       	add	r24, r18
 8ac:	91 1d       	adc	r25, r1
 8ae:	a1 1d       	adc	r26, r1
 8b0:	b1 1d       	adc	r27, r1
 8b2:	bc 01       	movw	r22, r24
 8b4:	cd 01       	movw	r24, r26
 8b6:	42 e0       	ldi	r20, 0x02	; 2
 8b8:	66 0f       	add	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	4a 95       	dec	r20
 8c2:	d1 f7       	brne	.-12     	; 0x8b8 <micros+0x3c>
 8c4:	08 95       	ret

000008c6 <delay>:
 8c6:	8f 92       	push	r8
 8c8:	9f 92       	push	r9
 8ca:	af 92       	push	r10
 8cc:	bf 92       	push	r11
 8ce:	cf 92       	push	r12
 8d0:	df 92       	push	r13
 8d2:	ef 92       	push	r14
 8d4:	ff 92       	push	r15
 8d6:	6b 01       	movw	r12, r22
 8d8:	7c 01       	movw	r14, r24
 8da:	0e 94 3e 04 	call	0x87c	; 0x87c <micros>
 8de:	4b 01       	movw	r8, r22
 8e0:	5c 01       	movw	r10, r24
 8e2:	c1 14       	cp	r12, r1
 8e4:	d1 04       	cpc	r13, r1
 8e6:	e1 04       	cpc	r14, r1
 8e8:	f1 04       	cpc	r15, r1
 8ea:	01 f1       	breq	.+64     	; 0x92c <__stack+0x2d>
 8ec:	0e 94 98 05 	call	0xb30	; 0xb30 <yield>
 8f0:	0e 94 3e 04 	call	0x87c	; 0x87c <micros>
 8f4:	dc 01       	movw	r26, r24
 8f6:	cb 01       	movw	r24, r22
 8f8:	88 19       	sub	r24, r8
 8fa:	99 09       	sbc	r25, r9
 8fc:	aa 09       	sbc	r26, r10
 8fe:	bb 09       	sbc	r27, r11
 900:	88 3e       	cpi	r24, 0xE8	; 232
 902:	93 40       	sbci	r25, 0x03	; 3
 904:	a1 05       	cpc	r26, r1
 906:	b1 05       	cpc	r27, r1
 908:	60 f3       	brcs	.-40     	; 0x8e2 <delay+0x1c>
 90a:	21 e0       	ldi	r18, 0x01	; 1
 90c:	c2 1a       	sub	r12, r18
 90e:	d1 08       	sbc	r13, r1
 910:	e1 08       	sbc	r14, r1
 912:	f1 08       	sbc	r15, r1
 914:	88 ee       	ldi	r24, 0xE8	; 232
 916:	88 0e       	add	r8, r24
 918:	83 e0       	ldi	r24, 0x03	; 3
 91a:	98 1e       	adc	r9, r24
 91c:	a1 1c       	adc	r10, r1
 91e:	b1 1c       	adc	r11, r1
 920:	c1 14       	cp	r12, r1
 922:	d1 04       	cpc	r13, r1
 924:	e1 04       	cpc	r14, r1
 926:	f1 04       	cpc	r15, r1
 928:	19 f7       	brne	.-58     	; 0x8f0 <delay+0x2a>
 92a:	db cf       	rjmp	.-74     	; 0x8e2 <delay+0x1c>
 92c:	ff 90       	pop	r15
 92e:	ef 90       	pop	r14
 930:	df 90       	pop	r13
 932:	cf 90       	pop	r12
 934:	bf 90       	pop	r11
 936:	af 90       	pop	r10
 938:	9f 90       	pop	r9
 93a:	8f 90       	pop	r8
 93c:	08 95       	ret

0000093e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 93e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 940:	84 b5       	in	r24, 0x24	; 36
 942:	82 60       	ori	r24, 0x02	; 2
 944:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 946:	84 b5       	in	r24, 0x24	; 36
 948:	81 60       	ori	r24, 0x01	; 1
 94a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 94c:	85 b5       	in	r24, 0x25	; 37
 94e:	82 60       	ori	r24, 0x02	; 2
 950:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 952:	85 b5       	in	r24, 0x25	; 37
 954:	81 60       	ori	r24, 0x01	; 1
 956:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 958:	ee e6       	ldi	r30, 0x6E	; 110
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	81 60       	ori	r24, 0x01	; 1
 960:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 962:	e1 e8       	ldi	r30, 0x81	; 129
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 968:	80 81       	ld	r24, Z
 96a:	82 60       	ori	r24, 0x02	; 2
 96c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 96e:	80 81       	ld	r24, Z
 970:	81 60       	ori	r24, 0x01	; 1
 972:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 974:	e0 e8       	ldi	r30, 0x80	; 128
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	80 81       	ld	r24, Z
 97a:	81 60       	ori	r24, 0x01	; 1
 97c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 97e:	e1 eb       	ldi	r30, 0xB1	; 177
 980:	f0 e0       	ldi	r31, 0x00	; 0
 982:	80 81       	ld	r24, Z
 984:	84 60       	ori	r24, 0x04	; 4
 986:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 988:	e0 eb       	ldi	r30, 0xB0	; 176
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	80 81       	ld	r24, Z
 98e:	81 60       	ori	r24, 0x01	; 1
 990:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 992:	ea e7       	ldi	r30, 0x7A	; 122
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	84 60       	ori	r24, 0x04	; 4
 99a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 99c:	80 81       	ld	r24, Z
 99e:	82 60       	ori	r24, 0x02	; 2
 9a0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 9a2:	80 81       	ld	r24, Z
 9a4:	81 60       	ori	r24, 0x01	; 1
 9a6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 9a8:	80 81       	ld	r24, Z
 9aa:	80 68       	ori	r24, 0x80	; 128
 9ac:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 9ae:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 9b2:	08 95       	ret

000009b4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 9b4:	83 30       	cpi	r24, 0x03	; 3
 9b6:	81 f0       	breq	.+32     	; 0x9d8 <turnOffPWM+0x24>
 9b8:	28 f4       	brcc	.+10     	; 0x9c4 <turnOffPWM+0x10>
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	99 f0       	breq	.+38     	; 0x9e4 <turnOffPWM+0x30>
 9be:	82 30       	cpi	r24, 0x02	; 2
 9c0:	a1 f0       	breq	.+40     	; 0x9ea <turnOffPWM+0x36>
 9c2:	08 95       	ret
 9c4:	87 30       	cpi	r24, 0x07	; 7
 9c6:	a9 f0       	breq	.+42     	; 0x9f2 <turnOffPWM+0x3e>
 9c8:	88 30       	cpi	r24, 0x08	; 8
 9ca:	b9 f0       	breq	.+46     	; 0x9fa <turnOffPWM+0x46>
 9cc:	84 30       	cpi	r24, 0x04	; 4
 9ce:	d1 f4       	brne	.+52     	; 0xa04 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9d0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9d4:	8f 7d       	andi	r24, 0xDF	; 223
 9d6:	03 c0       	rjmp	.+6      	; 0x9de <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 9d8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9dc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9de:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9e2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 9e4:	84 b5       	in	r24, 0x24	; 36
 9e6:	8f 77       	andi	r24, 0x7F	; 127
 9e8:	02 c0       	rjmp	.+4      	; 0x9ee <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 9ea:	84 b5       	in	r24, 0x24	; 36
 9ec:	8f 7d       	andi	r24, 0xDF	; 223
 9ee:	84 bd       	out	0x24, r24	; 36
 9f0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 9f2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9f6:	8f 77       	andi	r24, 0x7F	; 127
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 9fa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9fe:	8f 7d       	andi	r24, 0xDF	; 223
 a00:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 a04:	08 95       	ret

00000a06 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 a06:	cf 93       	push	r28
 a08:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	fc 01       	movw	r30, r24
 a0e:	e4 58       	subi	r30, 0x84	; 132
 a10:	ff 4f       	sbci	r31, 0xFF	; 255
 a12:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 a14:	fc 01       	movw	r30, r24
 a16:	e0 57       	subi	r30, 0x70	; 112
 a18:	ff 4f       	sbci	r31, 0xFF	; 255
 a1a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a1c:	88 23       	and	r24, r24
 a1e:	61 f1       	breq	.+88     	; 0xa78 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	88 0f       	add	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	fc 01       	movw	r30, r24
 a28:	e8 54       	subi	r30, 0x48	; 72
 a2a:	ff 4f       	sbci	r31, 0xFF	; 255
 a2c:	c5 91       	lpm	r28, Z+
 a2e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a30:	fc 01       	movw	r30, r24
 a32:	e2 55       	subi	r30, 0x52	; 82
 a34:	ff 4f       	sbci	r31, 0xFF	; 255
 a36:	a5 91       	lpm	r26, Z+
 a38:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a3a:	61 11       	cpse	r22, r1
 a3c:	09 c0       	rjmp	.+18     	; 0xa50 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a3e:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a40:	f8 94       	cli
		*reg &= ~bit;
 a42:	88 81       	ld	r24, Y
 a44:	20 95       	com	r18
 a46:	82 23       	and	r24, r18
 a48:	88 83       	st	Y, r24
		*out &= ~bit;
 a4a:	ec 91       	ld	r30, X
 a4c:	2e 23       	and	r18, r30
 a4e:	0b c0       	rjmp	.+22     	; 0xa66 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a50:	62 30       	cpi	r22, 0x02	; 2
 a52:	61 f4       	brne	.+24     	; 0xa6c <pinMode+0x66>
		uint8_t oldSREG = SREG;
 a54:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a56:	f8 94       	cli
		*reg &= ~bit;
 a58:	38 81       	ld	r19, Y
 a5a:	82 2f       	mov	r24, r18
 a5c:	80 95       	com	r24
 a5e:	83 23       	and	r24, r19
 a60:	88 83       	st	Y, r24
		*out |= bit;
 a62:	ec 91       	ld	r30, X
 a64:	2e 2b       	or	r18, r30
 a66:	2c 93       	st	X, r18
		SREG = oldSREG;
 a68:	9f bf       	out	0x3f, r25	; 63
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 a6c:	8f b7       	in	r24, 0x3f	; 63
                cli();
 a6e:	f8 94       	cli
		*reg |= bit;
 a70:	e8 81       	ld	r30, Y
 a72:	2e 2b       	or	r18, r30
 a74:	28 83       	st	Y, r18
		SREG = oldSREG;
 a76:	8f bf       	out	0x3f, r24	; 63
	}
}
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	08 95       	ret

00000a7e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a7e:	1f 93       	push	r17
 a80:	cf 93       	push	r28
 a82:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a84:	28 2f       	mov	r18, r24
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	f9 01       	movw	r30, r18
 a8a:	e8 59       	subi	r30, 0x98	; 152
 a8c:	ff 4f       	sbci	r31, 0xFF	; 255
 a8e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a90:	f9 01       	movw	r30, r18
 a92:	e4 58       	subi	r30, 0x84	; 132
 a94:	ff 4f       	sbci	r31, 0xFF	; 255
 a96:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a98:	f9 01       	movw	r30, r18
 a9a:	e0 57       	subi	r30, 0x70	; 112
 a9c:	ff 4f       	sbci	r31, 0xFF	; 255
 a9e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 aa0:	cc 23       	and	r28, r28
 aa2:	c9 f0       	breq	.+50     	; 0xad6 <digitalWrite+0x58>
 aa4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 aa6:	81 11       	cpse	r24, r1
 aa8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <turnOffPWM>

	out = portOutputRegister(port);
 aac:	ec 2f       	mov	r30, r28
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	e2 55       	subi	r30, 0x52	; 82
 ab6:	ff 4f       	sbci	r31, 0xFF	; 255
 ab8:	a5 91       	lpm	r26, Z+
 aba:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 abc:	8f b7       	in	r24, 0x3f	; 63
	cli();
 abe:	f8 94       	cli

	if (val == LOW) {
 ac0:	11 11       	cpse	r17, r1
 ac2:	05 c0       	rjmp	.+10     	; 0xace <digitalWrite+0x50>
		*out &= ~bit;
 ac4:	9c 91       	ld	r25, X
 ac6:	ed 2f       	mov	r30, r29
 ac8:	e0 95       	com	r30
 aca:	e9 23       	and	r30, r25
 acc:	02 c0       	rjmp	.+4      	; 0xad2 <digitalWrite+0x54>
	} else {
		*out |= bit;
 ace:	ec 91       	ld	r30, X
 ad0:	ed 2b       	or	r30, r29
 ad2:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 ad4:	8f bf       	out	0x3f, r24	; 63
}
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	08 95       	ret

00000ade <digitalRead>:

int digitalRead(uint8_t pin)
{
 ade:	cf 93       	push	r28
 ae0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 ae2:	28 2f       	mov	r18, r24
 ae4:	30 e0       	ldi	r19, 0x00	; 0
 ae6:	f9 01       	movw	r30, r18
 ae8:	e8 59       	subi	r30, 0x98	; 152
 aea:	ff 4f       	sbci	r31, 0xFF	; 255
 aec:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 aee:	f9 01       	movw	r30, r18
 af0:	e4 58       	subi	r30, 0x84	; 132
 af2:	ff 4f       	sbci	r31, 0xFF	; 255
 af4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 af6:	f9 01       	movw	r30, r18
 af8:	e0 57       	subi	r30, 0x70	; 112
 afa:	ff 4f       	sbci	r31, 0xFF	; 255
 afc:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 afe:	cc 23       	and	r28, r28
 b00:	91 f0       	breq	.+36     	; 0xb26 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 b02:	81 11       	cpse	r24, r1
 b04:	0e 94 da 04 	call	0x9b4	; 0x9b4 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 b08:	ec 2f       	mov	r30, r28
 b0a:	f0 e0       	ldi	r31, 0x00	; 0
 b0c:	ee 0f       	add	r30, r30
 b0e:	ff 1f       	adc	r31, r31
 b10:	ec 55       	subi	r30, 0x5C	; 92
 b12:	ff 4f       	sbci	r31, 0xFF	; 255
 b14:	a5 91       	lpm	r26, Z+
 b16:	b4 91       	lpm	r27, Z
 b18:	ec 91       	ld	r30, X
 b1a:	ed 23       	and	r30, r29
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	21 f4       	brne	.+8      	; 0xb2a <digitalRead+0x4c>
 b22:	80 e0       	ldi	r24, 0x00	; 0
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	08 95       	ret

00000b30 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 b30:	08 95       	ret

00000b32 <__udivmodsi4>:
 b32:	a1 e2       	ldi	r26, 0x21	; 33
 b34:	1a 2e       	mov	r1, r26
 b36:	aa 1b       	sub	r26, r26
 b38:	bb 1b       	sub	r27, r27
 b3a:	fd 01       	movw	r30, r26
 b3c:	0d c0       	rjmp	.+26     	; 0xb58 <__udivmodsi4_ep>

00000b3e <__udivmodsi4_loop>:
 b3e:	aa 1f       	adc	r26, r26
 b40:	bb 1f       	adc	r27, r27
 b42:	ee 1f       	adc	r30, r30
 b44:	ff 1f       	adc	r31, r31
 b46:	a2 17       	cp	r26, r18
 b48:	b3 07       	cpc	r27, r19
 b4a:	e4 07       	cpc	r30, r20
 b4c:	f5 07       	cpc	r31, r21
 b4e:	20 f0       	brcs	.+8      	; 0xb58 <__udivmodsi4_ep>
 b50:	a2 1b       	sub	r26, r18
 b52:	b3 0b       	sbc	r27, r19
 b54:	e4 0b       	sbc	r30, r20
 b56:	f5 0b       	sbc	r31, r21

00000b58 <__udivmodsi4_ep>:
 b58:	66 1f       	adc	r22, r22
 b5a:	77 1f       	adc	r23, r23
 b5c:	88 1f       	adc	r24, r24
 b5e:	99 1f       	adc	r25, r25
 b60:	1a 94       	dec	r1
 b62:	69 f7       	brne	.-38     	; 0xb3e <__udivmodsi4_loop>
 b64:	60 95       	com	r22
 b66:	70 95       	com	r23
 b68:	80 95       	com	r24
 b6a:	90 95       	com	r25
 b6c:	9b 01       	movw	r18, r22
 b6e:	ac 01       	movw	r20, r24
 b70:	bd 01       	movw	r22, r26
 b72:	cf 01       	movw	r24, r30
 b74:	08 95       	ret

00000b76 <__tablejump2__>:
 b76:	ee 0f       	add	r30, r30
 b78:	ff 1f       	adc	r31, r31
 b7a:	05 90       	lpm	r0, Z+
 b7c:	f4 91       	lpm	r31, Z
 b7e:	e0 2d       	mov	r30, r0
 b80:	09 94       	ijmp

00000b82 <_exit>:
 b82:	f8 94       	cli

00000b84 <__stop_program>:
 b84:	ff cf       	rjmp	.-2      	; 0xb84 <__stop_program>
