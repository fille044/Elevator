
test_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000b6a  00000bfe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800110  00800110  00000c0e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007d16  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018a2  00000000  00000000  00008c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001870  00000000  00000000  0000a4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ec  00000000  00000000  0000bd60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c60  00000000  00000000  0000c54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000306c  00000000  00000000  0000e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 1c 03 	jmp	0x638	; 0x638 <__vector_18>
  4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <digital_pin_to_bit_mask_PGM>:
  7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
  a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
  ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
  b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <__ctors_start>:
  c2:	7e 03       	fmul	r23, r22

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ea e6       	ldi	r30, 0x6A	; 106
  d8:	fb e0       	ldi	r31, 0x0B	; 11
  da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0
  e0:	a0 31       	cpi	r26, 0x10	; 16
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	a0 e1       	ldi	r26, 0x10	; 16
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a8 3b       	cpi	r26, 0xB8	; 184
  f2:	b2 07       	cpc	r27, r18
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c2 e6       	ldi	r28, 0x62	; 98
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
  fe:	21 97       	sbiw	r28, 0x01	; 1
 100:	fe 01       	movw	r30, r28
 102:	0e 94 ad 05 	call	0xb5a	; 0xb5a <__tablejump2__>
 106:	c1 36       	cpi	r28, 0x61	; 97
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
 10c:	0e 94 ac 03 	call	0x758	; 0x758 <main>
 110:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <setup>:
#define foto_0 A0
#define foto_1 A1
#define foto_2 A2

void setup() {
	pinMode(led_G,OUTPUT);
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
	pinMode(led_R,OUTPUT);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	89 e0       	ldi	r24, 0x09	; 9
 124:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
	pinMode(led_B,OUTPUT);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
	pinMode(button_G, INPUT);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
	pinMode(button_R, INPUT);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
	pinMode(button_B, INPUT);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
	pinMode(button_hiss_G, INPUT);
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
	pinMode(button_hiss_R, INPUT);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	84 e0       	ldi	r24, 0x04	; 4
 154:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
	pinMode(button_hiss_B, INPUT);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	85 e0       	ldi	r24, 0x05	; 5
 15c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 160:	26 e0       	ldi	r18, 0x06	; 6
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	55 e2       	ldi	r21, 0x25	; 37
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	82 e1       	ldi	r24, 0x12	; 18
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0c 94 b7 02 	jmp	0x56e	; 0x56e <_ZN14HardwareSerial5beginEmh>

00000172 <_Z9changeLEDiii>:
void move_to_B(int i);




void changeLED(int  green, int red, int blue){
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	1f 92       	push	r1
 17a:	cd b7       	in	r28, 0x3d	; 61
 17c:	de b7       	in	r29, 0x3e	; 62
 17e:	16 2f       	mov	r17, r22
    digitalWrite(led_G, green);
 180:	68 2f       	mov	r22, r24
 182:	88 e0       	ldi	r24, 0x08	; 8
 184:	49 83       	std	Y+1, r20	; 0x01
 186:	0e 94 31 05 	call	0xa62	; 0xa62 <digitalWrite>
    digitalWrite(led_R, red);
 18a:	61 2f       	mov	r22, r17
 18c:	89 e0       	ldi	r24, 0x09	; 9
 18e:	0e 94 31 05 	call	0xa62	; 0xa62 <digitalWrite>
    digitalWrite(led_B, blue);
 192:	49 81       	ldd	r20, Y+1	; 0x01
 194:	64 2f       	mov	r22, r20
 196:	8a e0       	ldi	r24, 0x0A	; 10
}
 198:	0f 90       	pop	r0
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17


void changeLED(int  green, int red, int blue){
    digitalWrite(led_G, green);
    digitalWrite(led_R, red);
    digitalWrite(led_B, blue);
 1a0:	0c 94 31 05 	jmp	0xa62	; 0xa62 <digitalWrite>

000001a4 <_Z8motorLEDii>:
}
void motorLED(int up, int down){
 1a4:	cf 93       	push	r28
 1a6:	c6 2f       	mov	r28, r22
    digitalWrite(led_up, up);
 1a8:	68 2f       	mov	r22, r24
 1aa:	8c e0       	ldi	r24, 0x0C	; 12
 1ac:	0e 94 31 05 	call	0xa62	; 0xa62 <digitalWrite>
    digitalWrite(led_down, down);
 1b0:	6c 2f       	mov	r22, r28
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
}
 1b4:	cf 91       	pop	r28
    digitalWrite(led_R, red);
    digitalWrite(led_B, blue);
}
void motorLED(int up, int down){
    digitalWrite(led_up, up);
    digitalWrite(led_down, down);
 1b6:	0c 94 31 05 	jmp	0xa62	; 0xa62 <digitalWrite>

000001ba <_Z9move_to_Ri>:
		delay(3000);
		motorLED(0,0);
	}
}

void move_to_R(int i){
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
	changeLED(0,1,0);
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	50 e0       	ldi	r21, 0x00	; 0
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9changeLEDiii>
	if (i == 0){
 1d0:	20 97       	sbiw	r28, 0x00	; 0
 1d2:	29 f4       	brne	.+10     	; 0x1de <_Z9move_to_Ri+0x24>
		motorLED(1,0);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	70 e0       	ldi	r23, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <_Z9move_to_Ri+0x30>
		delay(3000);
		motorLED(0,0);
	}
	else if (i == 2){
 1de:	22 97       	sbiw	r28, 0x02	; 2
 1e0:	a1 f4       	brne	.+40     	; 0x20a <_Z9move_to_Ri+0x50>
		motorLED(0,1);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z8motorLEDii>
		delay(3000);
 1ee:	68 eb       	ldi	r22, 0xB8	; 184
 1f0:	7b e0       	ldi	r23, 0x0B	; 11
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <delay>
		motorLED(0,0);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
	}
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
		motorLED(0,0);
	}
	else if (i == 2){
		motorLED(0,1);
		delay(3000);
		motorLED(0,0);
 206:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_Z8motorLEDii>
	}
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <_Z9move_to_Gi>:
void motorLED(int up, int down){
    digitalWrite(led_up, up);
    digitalWrite(led_down, down);
}

void move_to_G(int i){
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
	if (i == 2){
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	91 05       	cpc	r25, r1
 218:	e9 f5       	brne	.+122    	; 0x294 <_Z9move_to_Gi+0x84>
		changeLED(0,1,0);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	50 e0       	ldi	r21, 0x00	; 0
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9changeLEDiii>
		motorLED(0,1);
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z8motorLEDii>
 236:	c4 e6       	ldi	r28, 0x64	; 100
 238:	d0 e0       	ldi	r29, 0x00	; 0
		for (int jx = 0; jx < 100 ; jx++){
			if (digitalRead(button_R)==0){
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 61 05 	call	0xac2	; 0xac2 <digitalRead>
 240:	89 2b       	or	r24, r25
 242:	21 f4       	brne	.+8      	; 0x24c <_Z9move_to_Gi+0x3c>
				move_to_R(i);
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z9move_to_Ri>
			}
			delay(30);
 24c:	6e e1       	ldi	r22, 0x1E	; 30
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 55 04 	call	0x8aa	; 0x8aa <delay>
 258:	21 97       	sbiw	r28, 0x01	; 1

void move_to_G(int i){
	if (i == 2){
		changeLED(0,1,0);
		motorLED(0,1);
		for (int jx = 0; jx < 100 ; jx++){
 25a:	79 f7       	brne	.-34     	; 0x23a <_Z9move_to_Gi+0x2a>
			if (digitalRead(button_R)==0){
				move_to_R(i);
			}
			delay(30);
		}
		motorLED(0,1);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z8motorLEDii>
		changeLED(1,0,0);
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9changeLEDiii>
		delay(3000);
 278:	68 eb       	ldi	r22, 0xB8	; 184
 27a:	7b e0       	ldi	r23, 0x0B	; 11
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 55 04 	call	0x8aa	; 0x8aa <delay>
		motorLED(0,0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	90 e0       	ldi	r25, 0x00	; 0
		motorLED(0,1);
		changeLED(1,0,0);
		delay(3000);
		motorLED(0,0);
	}
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
			delay(30);
		}
		motorLED(0,1);
		changeLED(1,0,0);
		delay(3000);
		motorLED(0,0);
 290:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_Z8motorLEDii>
	}
	else if (i == 1){
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	11 f3       	breq	.-60     	; 0x25c <_Z9move_to_Gi+0x4c>
		motorLED(0,1);
		changeLED(1,0,0);
		delay(3000);
		motorLED(0,0);
	}
}
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <_Z9move_to_Bi>:
		delay(3000);
		motorLED(0,0);
	}
}

void move_to_B(int i){
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	if (i == 0){
 2a2:	00 97       	sbiw	r24, 0x00	; 0
 2a4:	e9 f5       	brne	.+122    	; 0x320 <_Z9move_to_Bi+0x82>
		changeLED(0,1,0);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9changeLEDiii>
		motorLED(1,0);
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z8motorLEDii>
 2c2:	c4 e6       	ldi	r28, 0x64	; 100
 2c4:	d0 e0       	ldi	r29, 0x00	; 0
		for (int jx = 0; jx < 100 ; jx++){
			if (digitalRead(button_R)==0){
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 61 05 	call	0xac2	; 0xac2 <digitalRead>
 2cc:	89 2b       	or	r24, r25
 2ce:	21 f4       	brne	.+8      	; 0x2d8 <_Z9move_to_Bi+0x3a>
				move_to_R(i);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z9move_to_Ri>
			}
			delay(30);
 2d8:	6e e1       	ldi	r22, 0x1E	; 30
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 55 04 	call	0x8aa	; 0x8aa <delay>
 2e4:	21 97       	sbiw	r28, 0x01	; 1

void move_to_B(int i){
	if (i == 0){
		changeLED(0,1,0);
		motorLED(1,0);
		for (int jx = 0; jx < 100 ; jx++){
 2e6:	79 f7       	brne	.-34     	; 0x2c6 <_Z9move_to_Bi+0x28>
			if (digitalRead(button_R)==0){
				move_to_R(i);
			}
			delay(30);
		}
		motorLED(1,0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z8motorLEDii>
		changeLED(0,0,1);
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9changeLEDiii>
		delay(3000);
 304:	68 eb       	ldi	r22, 0xB8	; 184
 306:	7b e0       	ldi	r23, 0x0B	; 11
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 55 04 	call	0x8aa	; 0x8aa <delay>
		motorLED(0,0);	
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	90 e0       	ldi	r25, 0x00	; 0
		motorLED(1,0);
		changeLED(0,0,1);
		delay(3000);
		motorLED(0,0);
	}
}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
			delay(30);
		}
		motorLED(1,0);
		changeLED(0,0,1);
		delay(3000);
		motorLED(0,0);	
 31c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_Z8motorLEDii>
	}
	else if (i == 1){
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	11 f3       	breq	.-60     	; 0x2e8 <_Z9move_to_Bi+0x4a>
		motorLED(1,0);
		changeLED(0,0,1);
		delay(3000);
		motorLED(0,0);
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <loop>:



void loop() {	
    static int i=0;
	if (i == 0) changeLED(1,0,0);
 32a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 32e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 332:	89 2b       	or	r24, r25
 334:	41 f4       	brne	.+16     	; 0x346 <loop+0x1c>
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	50 e0       	ldi	r21, 0x00	; 0
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9changeLEDiii>
	if (i == 1) changeLED(0,1,0);
 346:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 34a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 34e:	01 97       	sbiw	r24, 0x01	; 1
 350:	41 f4       	brne	.+16     	; 0x362 <loop+0x38>
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9changeLEDiii>
	if (i == 2) changeLED(0,0,1);
 362:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 366:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 36a:	02 97       	sbiw	r24, 0x02	; 2
 36c:	41 f4       	brne	.+16     	; 0x37e <loop+0x54>
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 b9 00 	call	0x172	; 0x172 <_Z9changeLEDiii>
		
	if (digitalRead(button_G)==0){
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 61 05 	call	0xac2	; 0xac2 <digitalRead>
 384:	89 2b       	or	r24, r25
 386:	51 f4       	brne	.+20     	; 0x39c <loop+0x72>
		move_to_G(i);
 388:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 38c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 390:	0e 94 08 01 	call	0x210	; 0x210 <_Z9move_to_Gi>
		i = 0;
 394:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
 398:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>

    }
	if (digitalRead(button_R)==0){
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 61 05 	call	0xac2	; 0xac2 <digitalRead>
 3a2:	89 2b       	or	r24, r25
 3a4:	61 f4       	brne	.+24     	; 0x3be <loop+0x94>
		move_to_R(i);
 3a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3aa:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 3ae:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z9move_to_Ri>
		i = 1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 3ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>

	}
	if (digitalRead(button_B)==0){
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 61 05 	call	0xac2	; 0xac2 <digitalRead>
 3c4:	89 2b       	or	r24, r25
 3c6:	61 f4       	brne	.+24     	; 0x3e0 <loop+0xb6>
		move_to_B(i);
 3c8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3cc:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 3d0:	0e 94 4f 01 	call	0x29e	; 0x29e <_Z9move_to_Bi>
		i = 2;
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 3dc:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 3e0:	08 95       	ret

000003e2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 3e2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 3e4:	91 8d       	ldd	r25, Z+25	; 0x19
 3e6:	22 8d       	ldd	r18, Z+26	; 0x1a
 3e8:	89 2f       	mov	r24, r25
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	80 5c       	subi	r24, 0xC0	; 192
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	82 1b       	sub	r24, r18
 3f2:	91 09       	sbc	r25, r1
}
 3f4:	8f 73       	andi	r24, 0x3F	; 63
 3f6:	99 27       	eor	r25, r25
 3f8:	08 95       	ret

000003fa <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 3fa:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 3fc:	91 8d       	ldd	r25, Z+25	; 0x19
 3fe:	82 8d       	ldd	r24, Z+26	; 0x1a
 400:	98 17       	cp	r25, r24
 402:	31 f0       	breq	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 404:	82 8d       	ldd	r24, Z+26	; 0x1a
 406:	e8 0f       	add	r30, r24
 408:	f1 1d       	adc	r31, r1
 40a:	85 8d       	ldd	r24, Z+29	; 0x1d
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 414:	08 95       	ret

00000416 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 416:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 418:	91 8d       	ldd	r25, Z+25	; 0x19
 41a:	82 8d       	ldd	r24, Z+26	; 0x1a
 41c:	98 17       	cp	r25, r24
 41e:	61 f0       	breq	.+24     	; 0x438 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 420:	82 8d       	ldd	r24, Z+26	; 0x1a
 422:	df 01       	movw	r26, r30
 424:	a8 0f       	add	r26, r24
 426:	b1 1d       	adc	r27, r1
 428:	5d 96       	adiw	r26, 0x1d	; 29
 42a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 42c:	92 8d       	ldd	r25, Z+26	; 0x1a
 42e:	9f 5f       	subi	r25, 0xFF	; 255
 430:	9f 73       	andi	r25, 0x3F	; 63
 432:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 43c:	08 95       	ret

0000043e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 43e:	84 e7       	ldi	r24, 0x74	; 116
 440:	93 e0       	ldi	r25, 0x03	; 3
 442:	89 2b       	or	r24, r25
 444:	49 f0       	breq	.+18     	; 0x458 <_Z14serialEventRunv+0x1a>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	89 2b       	or	r24, r25
 44c:	29 f0       	breq	.+10     	; 0x458 <_Z14serialEventRunv+0x1a>
 44e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_Z17Serial0_availablev>
 452:	81 11       	cpse	r24, r1
 454:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
 458:	08 95       	ret

0000045a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 45a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 45c:	84 8d       	ldd	r24, Z+28	; 0x1c
 45e:	df 01       	movw	r26, r30
 460:	a8 0f       	add	r26, r24
 462:	b1 1d       	adc	r27, r1
 464:	a3 5a       	subi	r26, 0xA3	; 163
 466:	bf 4f       	sbci	r27, 0xFF	; 255
 468:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 46a:	84 8d       	ldd	r24, Z+28	; 0x1c
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	8f 73       	andi	r24, 0x3F	; 63
 472:	99 27       	eor	r25, r25
 474:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 476:	a6 89       	ldd	r26, Z+22	; 0x16
 478:	b7 89       	ldd	r27, Z+23	; 0x17
 47a:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 47c:	a0 89       	ldd	r26, Z+16	; 0x10
 47e:	b1 89       	ldd	r27, Z+17	; 0x11
 480:	8c 91       	ld	r24, X
 482:	80 64       	ori	r24, 0x40	; 64
 484:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 486:	93 8d       	ldd	r25, Z+27	; 0x1b
 488:	84 8d       	ldd	r24, Z+28	; 0x1c
 48a:	98 13       	cpse	r25, r24
 48c:	06 c0       	rjmp	.+12     	; 0x49a <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 48e:	02 88       	ldd	r0, Z+18	; 0x12
 490:	f3 89       	ldd	r31, Z+19	; 0x13
 492:	e0 2d       	mov	r30, r0
 494:	80 81       	ld	r24, Z
 496:	8f 7d       	andi	r24, 0xDF	; 223
 498:	80 83       	st	Z, r24
 49a:	08 95       	ret

0000049c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 4a2:	88 8d       	ldd	r24, Y+24	; 0x18
 4a4:	88 23       	and	r24, r24
 4a6:	c9 f0       	breq	.+50     	; 0x4da <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 4a8:	ea 89       	ldd	r30, Y+18	; 0x12
 4aa:	fb 89       	ldd	r31, Y+19	; 0x13
 4ac:	80 81       	ld	r24, Z
 4ae:	85 fd       	sbrc	r24, 5
 4b0:	05 c0       	rjmp	.+10     	; 0x4bc <_ZN14HardwareSerial5flushEv+0x20>
 4b2:	a8 89       	ldd	r26, Y+16	; 0x10
 4b4:	b9 89       	ldd	r27, Y+17	; 0x11
 4b6:	8c 91       	ld	r24, X
 4b8:	86 fd       	sbrc	r24, 6
 4ba:	0f c0       	rjmp	.+30     	; 0x4da <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 4bc:	0f b6       	in	r0, 0x3f	; 63
 4be:	07 fc       	sbrc	r0, 7
 4c0:	f5 cf       	rjmp	.-22     	; 0x4ac <_ZN14HardwareSerial5flushEv+0x10>
 4c2:	80 81       	ld	r24, Z
 4c4:	85 ff       	sbrs	r24, 5
 4c6:	f2 cf       	rjmp	.-28     	; 0x4ac <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 4c8:	a8 89       	ldd	r26, Y+16	; 0x10
 4ca:	b9 89       	ldd	r27, Y+17	; 0x11
 4cc:	8c 91       	ld	r24, X
 4ce:	85 ff       	sbrs	r24, 5
 4d0:	ed cf       	rjmp	.-38     	; 0x4ac <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
 4d2:	ce 01       	movw	r24, r28
 4d4:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 4d8:	e7 cf       	rjmp	.-50     	; 0x4a8 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	ec 01       	movw	r28, r24
  _written = true;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 4f2:	9b 8d       	ldd	r25, Y+27	; 0x1b
 4f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4f6:	98 13       	cpse	r25, r24
 4f8:	05 c0       	rjmp	.+10     	; 0x504 <_ZN14HardwareSerial5writeEh+0x24>
 4fa:	e8 89       	ldd	r30, Y+16	; 0x10
 4fc:	f9 89       	ldd	r31, Y+17	; 0x11
 4fe:	80 81       	ld	r24, Z
 500:	85 fd       	sbrc	r24, 5
 502:	24 c0       	rjmp	.+72     	; 0x54c <_ZN14HardwareSerial5writeEh+0x6c>
 504:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 506:	0b 8d       	ldd	r16, Y+27	; 0x1b
 508:	10 e0       	ldi	r17, 0x00	; 0
 50a:	0f 5f       	subi	r16, 0xFF	; 255
 50c:	1f 4f       	sbci	r17, 0xFF	; 255
 50e:	0f 73       	andi	r16, 0x3F	; 63
 510:	11 27       	eor	r17, r17
 512:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 514:	8c 8d       	ldd	r24, Y+28	; 0x1c
 516:	e8 12       	cpse	r14, r24
 518:	0c c0       	rjmp	.+24     	; 0x532 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	07 fc       	sbrc	r0, 7
 51e:	fa cf       	rjmp	.-12     	; 0x514 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 520:	e8 89       	ldd	r30, Y+16	; 0x10
 522:	f9 89       	ldd	r31, Y+17	; 0x11
 524:	80 81       	ld	r24, Z
 526:	85 ff       	sbrs	r24, 5
 528:	f5 cf       	rjmp	.-22     	; 0x514 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
 52a:	ce 01       	movw	r24, r28
 52c:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
 530:	f1 cf       	rjmp	.-30     	; 0x514 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 532:	8b 8d       	ldd	r24, Y+27	; 0x1b
 534:	fe 01       	movw	r30, r28
 536:	e8 0f       	add	r30, r24
 538:	f1 1d       	adc	r31, r1
 53a:	e3 5a       	subi	r30, 0xA3	; 163
 53c:	ff 4f       	sbci	r31, 0xFF	; 255
 53e:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
 540:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 542:	ea 89       	ldd	r30, Y+18	; 0x12
 544:	fb 89       	ldd	r31, Y+19	; 0x13
 546:	80 81       	ld	r24, Z
 548:	80 62       	ori	r24, 0x20	; 32
 54a:	07 c0       	rjmp	.+14     	; 0x55a <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 54c:	ee 89       	ldd	r30, Y+22	; 0x16
 54e:	ff 89       	ldd	r31, Y+23	; 0x17
 550:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 552:	e8 89       	ldd	r30, Y+16	; 0x10
 554:	f9 89       	ldd	r31, Y+17	; 0x11
 556:	80 81       	ld	r24, Z
 558:	80 64       	ori	r24, 0x40	; 64
 55a:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	1f 91       	pop	r17
 566:	0f 91       	pop	r16
 568:	ff 90       	pop	r15
 56a:	ef 90       	pop	r14
 56c:	08 95       	ret

0000056e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	ec 01       	movw	r28, r24
 57e:	6a 01       	movw	r12, r20
 580:	7b 01       	movw	r14, r22
 582:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 584:	e8 89       	ldd	r30, Y+16	; 0x10
 586:	f9 89       	ldd	r31, Y+17	; 0x11
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 58c:	41 15       	cp	r20, r1
 58e:	51 4e       	sbci	r21, 0xE1	; 225
 590:	61 05       	cpc	r22, r1
 592:	71 05       	cpc	r23, r1
 594:	b1 f0       	breq	.+44     	; 0x5c2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	79 e0       	ldi	r23, 0x09	; 9
 59a:	8d e3       	ldi	r24, 0x3D	; 61
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	a7 01       	movw	r20, r14
 5a0:	96 01       	movw	r18, r12
 5a2:	0e 94 8b 05 	call	0xb16	; 0xb16 <__udivmodsi4>
 5a6:	da 01       	movw	r26, r20
 5a8:	c9 01       	movw	r24, r18
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	a1 09       	sbc	r26, r1
 5ae:	b1 09       	sbc	r27, r1
 5b0:	b6 95       	lsr	r27
 5b2:	a7 95       	ror	r26
 5b4:	97 95       	ror	r25
 5b6:	87 95       	ror	r24
 5b8:	ac 01       	movw	r20, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 5ba:	41 15       	cp	r20, r1
 5bc:	80 e1       	ldi	r24, 0x10	; 16
 5be:	58 07       	cpc	r21, r24
 5c0:	a8 f0       	brcs	.+42     	; 0x5ec <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
 5c2:	e8 89       	ldd	r30, Y+16	; 0x10
 5c4:	f9 89       	ldd	r31, Y+17	; 0x11
 5c6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 5c8:	60 e8       	ldi	r22, 0x80	; 128
 5ca:	74 e8       	ldi	r23, 0x84	; 132
 5cc:	8e e1       	ldi	r24, 0x1E	; 30
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	a7 01       	movw	r20, r14
 5d2:	96 01       	movw	r18, r12
 5d4:	0e 94 8b 05 	call	0xb16	; 0xb16 <__udivmodsi4>
 5d8:	ba 01       	movw	r22, r20
 5da:	a9 01       	movw	r20, r18
 5dc:	41 50       	subi	r20, 0x01	; 1
 5de:	51 09       	sbc	r21, r1
 5e0:	61 09       	sbc	r22, r1
 5e2:	71 09       	sbc	r23, r1
 5e4:	76 95       	lsr	r23
 5e6:	67 95       	ror	r22
 5e8:	57 95       	ror	r21
 5ea:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 5ec:	ec 85       	ldd	r30, Y+12	; 0x0c
 5ee:	fd 85       	ldd	r31, Y+13	; 0x0d
 5f0:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 5f2:	ee 85       	ldd	r30, Y+14	; 0x0e
 5f4:	ff 85       	ldd	r31, Y+15	; 0x0f
 5f6:	40 83       	st	Z, r20

  _written = false;
 5f8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 5fa:	ec 89       	ldd	r30, Y+20	; 0x14
 5fc:	fd 89       	ldd	r31, Y+21	; 0x15
 5fe:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 600:	ea 89       	ldd	r30, Y+18	; 0x12
 602:	fb 89       	ldd	r31, Y+19	; 0x13
 604:	80 81       	ld	r24, Z
 606:	80 61       	ori	r24, 0x10	; 16
 608:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 60a:	ea 89       	ldd	r30, Y+18	; 0x12
 60c:	fb 89       	ldd	r31, Y+19	; 0x13
 60e:	80 81       	ld	r24, Z
 610:	88 60       	ori	r24, 0x08	; 8
 612:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 614:	ea 89       	ldd	r30, Y+18	; 0x12
 616:	fb 89       	ldd	r31, Y+19	; 0x13
 618:	80 81       	ld	r24, Z
 61a:	80 68       	ori	r24, 0x80	; 128
 61c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 61e:	ea 89       	ldd	r30, Y+18	; 0x12
 620:	fb 89       	ldd	r31, Y+19	; 0x13
 622:	80 81       	ld	r24, Z
 624:	8f 7d       	andi	r24, 0xDF	; 223
 626:	80 83       	st	Z, r24
}
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	ff 90       	pop	r15
 630:	ef 90       	pop	r14
 632:	df 90       	pop	r13
 634:	cf 90       	pop	r12
 636:	08 95       	ret

00000638 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 638:	1f 92       	push	r1
 63a:	0f 92       	push	r0
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	0f 92       	push	r0
 640:	11 24       	eor	r1, r1
 642:	2f 93       	push	r18
 644:	8f 93       	push	r24
 646:	9f 93       	push	r25
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 64c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <Serial+0x10>
 650:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <Serial+0x11>
 654:	80 81       	ld	r24, Z
 656:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <Serial+0x16>
 65a:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <Serial+0x17>
 65e:	82 fd       	sbrc	r24, 2
 660:	12 c0       	rjmp	.+36     	; 0x686 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 662:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 664:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Serial+0x19>
 668:	8f 5f       	subi	r24, 0xFF	; 255
 66a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 66c:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <Serial+0x1a>
 670:	82 17       	cp	r24, r18
 672:	51 f0       	breq	.+20     	; 0x688 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
 674:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <Serial+0x19>
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	ee 5e       	subi	r30, 0xEE	; 238
 67c:	fe 4f       	sbci	r31, 0xFE	; 254
 67e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
 680:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <Serial+0x19>
 684:	01 c0       	rjmp	.+2      	; 0x688 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 686:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 688:	ff 91       	pop	r31
 68a:	ef 91       	pop	r30
 68c:	9f 91       	pop	r25
 68e:	8f 91       	pop	r24
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 69c:	1f 92       	push	r1
 69e:	0f 92       	push	r0
 6a0:	0f b6       	in	r0, 0x3f	; 63
 6a2:	0f 92       	push	r0
 6a4:	11 24       	eor	r1, r1
 6a6:	2f 93       	push	r18
 6a8:	3f 93       	push	r19
 6aa:	4f 93       	push	r20
 6ac:	5f 93       	push	r21
 6ae:	6f 93       	push	r22
 6b0:	7f 93       	push	r23
 6b2:	8f 93       	push	r24
 6b4:	9f 93       	push	r25
 6b6:	af 93       	push	r26
 6b8:	bf 93       	push	r27
 6ba:	ef 93       	push	r30
 6bc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 6be:	82 e1       	ldi	r24, 0x12	; 18
 6c0:	91 e0       	ldi	r25, 0x01	; 1
 6c2:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 6c6:	ff 91       	pop	r31
 6c8:	ef 91       	pop	r30
 6ca:	bf 91       	pop	r27
 6cc:	af 91       	pop	r26
 6ce:	9f 91       	pop	r25
 6d0:	8f 91       	pop	r24
 6d2:	7f 91       	pop	r23
 6d4:	6f 91       	pop	r22
 6d6:	5f 91       	pop	r21
 6d8:	4f 91       	pop	r20
 6da:	3f 91       	pop	r19
 6dc:	2f 91       	pop	r18
 6de:	0f 90       	pop	r0
 6e0:	0f be       	out	0x3f, r0	; 63
 6e2:	0f 90       	pop	r0
 6e4:	1f 90       	pop	r1
 6e6:	18 95       	reti

000006e8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 6e8:	82 e1       	ldi	r24, 0x12	; 18
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <_ZN14HardwareSerial9availableEv>
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	89 2b       	or	r24, r25
 6f4:	09 f4       	brne	.+2      	; 0x6f8 <_Z17Serial0_availablev+0x10>
 6f6:	20 e0       	ldi	r18, 0x00	; 0
}
 6f8:	82 2f       	mov	r24, r18
 6fa:	08 95       	ret

000006fc <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 6fc:	e2 e1       	ldi	r30, 0x12	; 18
 6fe:	f1 e0       	ldi	r31, 0x01	; 1
 700:	13 82       	std	Z+3, r1	; 0x03
 702:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 704:	88 ee       	ldi	r24, 0xE8	; 232
 706:	93 e0       	ldi	r25, 0x03	; 3
 708:	a0 e0       	ldi	r26, 0x00	; 0
 70a:	b0 e0       	ldi	r27, 0x00	; 0
 70c:	84 83       	std	Z+4, r24	; 0x04
 70e:	95 83       	std	Z+5, r25	; 0x05
 710:	a6 83       	std	Z+6, r26	; 0x06
 712:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 714:	84 e0       	ldi	r24, 0x04	; 4
 716:	91 e0       	ldi	r25, 0x01	; 1
 718:	91 83       	std	Z+1, r25	; 0x01
 71a:	80 83       	st	Z, r24
 71c:	85 ec       	ldi	r24, 0xC5	; 197
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	95 87       	std	Z+13, r25	; 0x0d
 722:	84 87       	std	Z+12, r24	; 0x0c
 724:	84 ec       	ldi	r24, 0xC4	; 196
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	97 87       	std	Z+15, r25	; 0x0f
 72a:	86 87       	std	Z+14, r24	; 0x0e
 72c:	80 ec       	ldi	r24, 0xC0	; 192
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	91 8b       	std	Z+17, r25	; 0x11
 732:	80 8b       	std	Z+16, r24	; 0x10
 734:	81 ec       	ldi	r24, 0xC1	; 193
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	93 8b       	std	Z+19, r25	; 0x13
 73a:	82 8b       	std	Z+18, r24	; 0x12
 73c:	82 ec       	ldi	r24, 0xC2	; 194
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	95 8b       	std	Z+21, r25	; 0x15
 742:	84 8b       	std	Z+20, r24	; 0x14
 744:	86 ec       	ldi	r24, 0xC6	; 198
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	97 8b       	std	Z+23, r25	; 0x17
 74a:	86 8b       	std	Z+22, r24	; 0x16
 74c:	11 8e       	std	Z+25, r1	; 0x19
 74e:	12 8e       	std	Z+26, r1	; 0x1a
 750:	13 8e       	std	Z+27, r1	; 0x1b
 752:	14 8e       	std	Z+28, r1	; 0x1c
 754:	08 95       	ret

00000756 <initVariant>:
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }

void setupUSB() __attribute__((weak));
void setupUSB() { }
 756:	08 95       	ret

00000758 <main>:

int main(void)
{
	init();
 758:	0e 94 91 04 	call	0x922	; 0x922 <init>

	initVariant();
 75c:	0e 94 ab 03 	call	0x756	; 0x756 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 760:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 764:	cf e1       	ldi	r28, 0x1F	; 31
 766:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
 768:	0e 94 95 01 	call	0x32a	; 0x32a <loop>
		if (serialEventRun) serialEventRun();
 76c:	20 97       	sbiw	r28, 0x00	; 0
 76e:	e1 f3       	breq	.-8      	; 0x768 <main+0x10>
 770:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z14serialEventRunv>
 774:	f9 cf       	rjmp	.-14     	; 0x768 <main+0x10>

00000776 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 776:	cf 92       	push	r12
 778:	df 92       	push	r13
 77a:	ef 92       	push	r14
 77c:	ff 92       	push	r15
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	6c 01       	movw	r12, r24
 788:	7a 01       	movw	r14, r20
 78a:	8b 01       	movw	r16, r22
  size_t n = 0;
 78c:	c0 e0       	ldi	r28, 0x00	; 0
 78e:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
 790:	ce 15       	cp	r28, r14
 792:	df 05       	cpc	r29, r15
 794:	89 f0       	breq	.+34     	; 0x7b8 <_ZN5Print5writeEPKhj+0x42>
    if (write(*buffer++)) n++;
 796:	d8 01       	movw	r26, r16
 798:	6d 91       	ld	r22, X+
 79a:	8d 01       	movw	r16, r26
 79c:	d6 01       	movw	r26, r12
 79e:	ed 91       	ld	r30, X+
 7a0:	fc 91       	ld	r31, X
 7a2:	01 90       	ld	r0, Z+
 7a4:	f0 81       	ld	r31, Z
 7a6:	e0 2d       	mov	r30, r0
 7a8:	c6 01       	movw	r24, r12
 7aa:	09 95       	icall
 7ac:	89 2b       	or	r24, r25
 7ae:	11 f4       	brne	.+4      	; 0x7b4 <_ZN5Print5writeEPKhj+0x3e>
 7b0:	7e 01       	movw	r14, r28
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <_ZN5Print5writeEPKhj+0x42>
 7b4:	21 96       	adiw	r28, 0x01	; 1
 7b6:	ec cf       	rjmp	.-40     	; 0x790 <_ZN5Print5writeEPKhj+0x1a>
    else break;
  }
  return n;
}
 7b8:	c7 01       	movw	r24, r14
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	1f 91       	pop	r17
 7c0:	0f 91       	pop	r16
 7c2:	ff 90       	pop	r15
 7c4:	ef 90       	pop	r14
 7c6:	df 90       	pop	r13
 7c8:	cf 90       	pop	r12
 7ca:	08 95       	ret

000007cc <__vector_16>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
 7cc:	1f 92       	push	r1
 7ce:	0f 92       	push	r0
 7d0:	0f b6       	in	r0, 0x3f	; 63
 7d2:	0f 92       	push	r0
 7d4:	11 24       	eor	r1, r1
 7d6:	2f 93       	push	r18
 7d8:	3f 93       	push	r19
 7da:	8f 93       	push	r24
 7dc:	9f 93       	push	r25
 7de:	af 93       	push	r26
 7e0:	bf 93       	push	r27
 7e2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <timer0_millis>
 7e6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <timer0_millis+0x1>
 7ea:	a0 91 b2 01 	lds	r26, 0x01B2	; 0x8001b2 <timer0_millis+0x2>
 7ee:	b0 91 b3 01 	lds	r27, 0x01B3	; 0x8001b3 <timer0_millis+0x3>
 7f2:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <timer0_fract>
 7f6:	23 e0       	ldi	r18, 0x03	; 3
 7f8:	23 0f       	add	r18, r19
 7fa:	2d 37       	cpi	r18, 0x7D	; 125
 7fc:	20 f4       	brcc	.+8      	; 0x806 <__vector_16+0x3a>
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	a1 1d       	adc	r26, r1
 802:	b1 1d       	adc	r27, r1
 804:	05 c0       	rjmp	.+10     	; 0x810 <__vector_16+0x44>
 806:	26 e8       	ldi	r18, 0x86	; 134
 808:	23 0f       	add	r18, r19
 80a:	02 96       	adiw	r24, 0x02	; 2
 80c:	a1 1d       	adc	r26, r1
 80e:	b1 1d       	adc	r27, r1
 810:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <timer0_fract>
 814:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <timer0_millis>
 818:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <timer0_millis+0x1>
 81c:	a0 93 b2 01 	sts	0x01B2, r26	; 0x8001b2 <timer0_millis+0x2>
 820:	b0 93 b3 01 	sts	0x01B3, r27	; 0x8001b3 <timer0_millis+0x3>
 824:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_overflow_count>
 828:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_overflow_count+0x1>
 82c:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <timer0_overflow_count+0x2>
 830:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <timer0_overflow_count+0x3>
 834:	01 96       	adiw	r24, 0x01	; 1
 836:	a1 1d       	adc	r26, r1
 838:	b1 1d       	adc	r27, r1
 83a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <timer0_overflow_count>
 83e:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <timer0_overflow_count+0x1>
 842:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <timer0_overflow_count+0x2>
 846:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <timer0_overflow_count+0x3>
 84a:	bf 91       	pop	r27
 84c:	af 91       	pop	r26
 84e:	9f 91       	pop	r25
 850:	8f 91       	pop	r24
 852:	3f 91       	pop	r19
 854:	2f 91       	pop	r18
 856:	0f 90       	pop	r0
 858:	0f be       	out	0x3f, r0	; 63
 85a:	0f 90       	pop	r0
 85c:	1f 90       	pop	r1
 85e:	18 95       	reti

00000860 <micros>:
 860:	3f b7       	in	r19, 0x3f	; 63
 862:	f8 94       	cli
 864:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_overflow_count>
 868:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_overflow_count+0x1>
 86c:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <timer0_overflow_count+0x2>
 870:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <timer0_overflow_count+0x3>
 874:	26 b5       	in	r18, 0x26	; 38
 876:	a8 9b       	sbis	0x15, 0	; 21
 878:	05 c0       	rjmp	.+10     	; 0x884 <micros+0x24>
 87a:	2f 3f       	cpi	r18, 0xFF	; 255
 87c:	19 f0       	breq	.+6      	; 0x884 <micros+0x24>
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	a1 1d       	adc	r26, r1
 882:	b1 1d       	adc	r27, r1
 884:	3f bf       	out	0x3f, r19	; 63
 886:	ba 2f       	mov	r27, r26
 888:	a9 2f       	mov	r26, r25
 88a:	98 2f       	mov	r25, r24
 88c:	88 27       	eor	r24, r24
 88e:	82 0f       	add	r24, r18
 890:	91 1d       	adc	r25, r1
 892:	a1 1d       	adc	r26, r1
 894:	b1 1d       	adc	r27, r1
 896:	bc 01       	movw	r22, r24
 898:	cd 01       	movw	r24, r26
 89a:	42 e0       	ldi	r20, 0x02	; 2
 89c:	66 0f       	add	r22, r22
 89e:	77 1f       	adc	r23, r23
 8a0:	88 1f       	adc	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	4a 95       	dec	r20
 8a6:	d1 f7       	brne	.-12     	; 0x89c <micros+0x3c>
 8a8:	08 95       	ret

000008aa <delay>:
 8aa:	8f 92       	push	r8
 8ac:	9f 92       	push	r9
 8ae:	af 92       	push	r10
 8b0:	bf 92       	push	r11
 8b2:	cf 92       	push	r12
 8b4:	df 92       	push	r13
 8b6:	ef 92       	push	r14
 8b8:	ff 92       	push	r15
 8ba:	6b 01       	movw	r12, r22
 8bc:	7c 01       	movw	r14, r24
 8be:	0e 94 30 04 	call	0x860	; 0x860 <micros>
 8c2:	4b 01       	movw	r8, r22
 8c4:	5c 01       	movw	r10, r24
 8c6:	c1 14       	cp	r12, r1
 8c8:	d1 04       	cpc	r13, r1
 8ca:	e1 04       	cpc	r14, r1
 8cc:	f1 04       	cpc	r15, r1
 8ce:	01 f1       	breq	.+64     	; 0x910 <__stack+0x11>
 8d0:	0e 94 8a 05 	call	0xb14	; 0xb14 <yield>
 8d4:	0e 94 30 04 	call	0x860	; 0x860 <micros>
 8d8:	dc 01       	movw	r26, r24
 8da:	cb 01       	movw	r24, r22
 8dc:	88 19       	sub	r24, r8
 8de:	99 09       	sbc	r25, r9
 8e0:	aa 09       	sbc	r26, r10
 8e2:	bb 09       	sbc	r27, r11
 8e4:	88 3e       	cpi	r24, 0xE8	; 232
 8e6:	93 40       	sbci	r25, 0x03	; 3
 8e8:	a1 05       	cpc	r26, r1
 8ea:	b1 05       	cpc	r27, r1
 8ec:	60 f3       	brcs	.-40     	; 0x8c6 <delay+0x1c>
 8ee:	21 e0       	ldi	r18, 0x01	; 1
 8f0:	c2 1a       	sub	r12, r18
 8f2:	d1 08       	sbc	r13, r1
 8f4:	e1 08       	sbc	r14, r1
 8f6:	f1 08       	sbc	r15, r1
 8f8:	88 ee       	ldi	r24, 0xE8	; 232
 8fa:	88 0e       	add	r8, r24
 8fc:	83 e0       	ldi	r24, 0x03	; 3
 8fe:	98 1e       	adc	r9, r24
 900:	a1 1c       	adc	r10, r1
 902:	b1 1c       	adc	r11, r1
 904:	c1 14       	cp	r12, r1
 906:	d1 04       	cpc	r13, r1
 908:	e1 04       	cpc	r14, r1
 90a:	f1 04       	cpc	r15, r1
 90c:	19 f7       	brne	.-58     	; 0x8d4 <delay+0x2a>
 90e:	db cf       	rjmp	.-74     	; 0x8c6 <delay+0x1c>
 910:	ff 90       	pop	r15
 912:	ef 90       	pop	r14
 914:	df 90       	pop	r13
 916:	cf 90       	pop	r12
 918:	bf 90       	pop	r11
 91a:	af 90       	pop	r10
 91c:	9f 90       	pop	r9
 91e:	8f 90       	pop	r8
 920:	08 95       	ret

00000922 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 922:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 924:	84 b5       	in	r24, 0x24	; 36
 926:	82 60       	ori	r24, 0x02	; 2
 928:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 92a:	84 b5       	in	r24, 0x24	; 36
 92c:	81 60       	ori	r24, 0x01	; 1
 92e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 930:	85 b5       	in	r24, 0x25	; 37
 932:	82 60       	ori	r24, 0x02	; 2
 934:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 936:	85 b5       	in	r24, 0x25	; 37
 938:	81 60       	ori	r24, 0x01	; 1
 93a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 93c:	ee e6       	ldi	r30, 0x6E	; 110
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	81 60       	ori	r24, 0x01	; 1
 944:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 946:	e1 e8       	ldi	r30, 0x81	; 129
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 94c:	80 81       	ld	r24, Z
 94e:	82 60       	ori	r24, 0x02	; 2
 950:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 952:	80 81       	ld	r24, Z
 954:	81 60       	ori	r24, 0x01	; 1
 956:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 958:	e0 e8       	ldi	r30, 0x80	; 128
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	80 81       	ld	r24, Z
 95e:	81 60       	ori	r24, 0x01	; 1
 960:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 962:	e1 eb       	ldi	r30, 0xB1	; 177
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	84 60       	ori	r24, 0x04	; 4
 96a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 96c:	e0 eb       	ldi	r30, 0xB0	; 176
 96e:	f0 e0       	ldi	r31, 0x00	; 0
 970:	80 81       	ld	r24, Z
 972:	81 60       	ori	r24, 0x01	; 1
 974:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 976:	ea e7       	ldi	r30, 0x7A	; 122
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	84 60       	ori	r24, 0x04	; 4
 97e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 980:	80 81       	ld	r24, Z
 982:	82 60       	ori	r24, 0x02	; 2
 984:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 986:	80 81       	ld	r24, Z
 988:	81 60       	ori	r24, 0x01	; 1
 98a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 98c:	80 81       	ld	r24, Z
 98e:	80 68       	ori	r24, 0x80	; 128
 990:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 992:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 996:	08 95       	ret

00000998 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 998:	83 30       	cpi	r24, 0x03	; 3
 99a:	81 f0       	breq	.+32     	; 0x9bc <turnOffPWM+0x24>
 99c:	28 f4       	brcc	.+10     	; 0x9a8 <turnOffPWM+0x10>
 99e:	81 30       	cpi	r24, 0x01	; 1
 9a0:	99 f0       	breq	.+38     	; 0x9c8 <turnOffPWM+0x30>
 9a2:	82 30       	cpi	r24, 0x02	; 2
 9a4:	a1 f0       	breq	.+40     	; 0x9ce <turnOffPWM+0x36>
 9a6:	08 95       	ret
 9a8:	87 30       	cpi	r24, 0x07	; 7
 9aa:	a9 f0       	breq	.+42     	; 0x9d6 <turnOffPWM+0x3e>
 9ac:	88 30       	cpi	r24, 0x08	; 8
 9ae:	b9 f0       	breq	.+46     	; 0x9de <turnOffPWM+0x46>
 9b0:	84 30       	cpi	r24, 0x04	; 4
 9b2:	d1 f4       	brne	.+52     	; 0x9e8 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9b8:	8f 7d       	andi	r24, 0xDF	; 223
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 9bc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9c0:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 9c2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 9c6:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 9c8:	84 b5       	in	r24, 0x24	; 36
 9ca:	8f 77       	andi	r24, 0x7F	; 127
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 9ce:	84 b5       	in	r24, 0x24	; 36
 9d0:	8f 7d       	andi	r24, 0xDF	; 223
 9d2:	84 bd       	out	0x24, r24	; 36
 9d4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 9d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9da:	8f 77       	andi	r24, 0x7F	; 127
 9dc:	03 c0       	rjmp	.+6      	; 0x9e4 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 9de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9e2:	8f 7d       	andi	r24, 0xDF	; 223
 9e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 9e8:	08 95       	ret

000009ea <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	fc 01       	movw	r30, r24
 9f2:	e4 58       	subi	r30, 0x84	; 132
 9f4:	ff 4f       	sbci	r31, 0xFF	; 255
 9f6:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 9f8:	fc 01       	movw	r30, r24
 9fa:	e0 57       	subi	r30, 0x70	; 112
 9fc:	ff 4f       	sbci	r31, 0xFF	; 255
 9fe:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 a00:	88 23       	and	r24, r24
 a02:	61 f1       	breq	.+88     	; 0xa5c <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	88 0f       	add	r24, r24
 a08:	99 1f       	adc	r25, r25
 a0a:	fc 01       	movw	r30, r24
 a0c:	e8 54       	subi	r30, 0x48	; 72
 a0e:	ff 4f       	sbci	r31, 0xFF	; 255
 a10:	c5 91       	lpm	r28, Z+
 a12:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
 a14:	fc 01       	movw	r30, r24
 a16:	e2 55       	subi	r30, 0x52	; 82
 a18:	ff 4f       	sbci	r31, 0xFF	; 255
 a1a:	a5 91       	lpm	r26, Z+
 a1c:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
 a1e:	61 11       	cpse	r22, r1
 a20:	09 c0       	rjmp	.+18     	; 0xa34 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
 a22:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a24:	f8 94       	cli
		*reg &= ~bit;
 a26:	88 81       	ld	r24, Y
 a28:	20 95       	com	r18
 a2a:	82 23       	and	r24, r18
 a2c:	88 83       	st	Y, r24
		*out &= ~bit;
 a2e:	ec 91       	ld	r30, X
 a30:	2e 23       	and	r18, r30
 a32:	0b c0       	rjmp	.+22     	; 0xa4a <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 a34:	62 30       	cpi	r22, 0x02	; 2
 a36:	61 f4       	brne	.+24     	; 0xa50 <pinMode+0x66>
		uint8_t oldSREG = SREG;
 a38:	9f b7       	in	r25, 0x3f	; 63
                cli();
 a3a:	f8 94       	cli
		*reg &= ~bit;
 a3c:	38 81       	ld	r19, Y
 a3e:	82 2f       	mov	r24, r18
 a40:	80 95       	com	r24
 a42:	83 23       	and	r24, r19
 a44:	88 83       	st	Y, r24
		*out |= bit;
 a46:	ec 91       	ld	r30, X
 a48:	2e 2b       	or	r18, r30
 a4a:	2c 93       	st	X, r18
		SREG = oldSREG;
 a4c:	9f bf       	out	0x3f, r25	; 63
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
 a50:	8f b7       	in	r24, 0x3f	; 63
                cli();
 a52:	f8 94       	cli
		*reg |= bit;
 a54:	e8 81       	ld	r30, Y
 a56:	2e 2b       	or	r18, r30
 a58:	28 83       	st	Y, r18
		SREG = oldSREG;
 a5a:	8f bf       	out	0x3f, r24	; 63
	}
}
 a5c:	df 91       	pop	r29
 a5e:	cf 91       	pop	r28
 a60:	08 95       	ret

00000a62 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a62:	1f 93       	push	r17
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 a68:	28 2f       	mov	r18, r24
 a6a:	30 e0       	ldi	r19, 0x00	; 0
 a6c:	f9 01       	movw	r30, r18
 a6e:	e8 59       	subi	r30, 0x98	; 152
 a70:	ff 4f       	sbci	r31, 0xFF	; 255
 a72:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a74:	f9 01       	movw	r30, r18
 a76:	e4 58       	subi	r30, 0x84	; 132
 a78:	ff 4f       	sbci	r31, 0xFF	; 255
 a7a:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 a7c:	f9 01       	movw	r30, r18
 a7e:	e0 57       	subi	r30, 0x70	; 112
 a80:	ff 4f       	sbci	r31, 0xFF	; 255
 a82:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 a84:	cc 23       	and	r28, r28
 a86:	c9 f0       	breq	.+50     	; 0xaba <digitalWrite+0x58>
 a88:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 a8a:	81 11       	cpse	r24, r1
 a8c:	0e 94 cc 04 	call	0x998	; 0x998 <turnOffPWM>

	out = portOutputRegister(port);
 a90:	ec 2f       	mov	r30, r28
 a92:	f0 e0       	ldi	r31, 0x00	; 0
 a94:	ee 0f       	add	r30, r30
 a96:	ff 1f       	adc	r31, r31
 a98:	e2 55       	subi	r30, 0x52	; 82
 a9a:	ff 4f       	sbci	r31, 0xFF	; 255
 a9c:	a5 91       	lpm	r26, Z+
 a9e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 aa0:	8f b7       	in	r24, 0x3f	; 63
	cli();
 aa2:	f8 94       	cli

	if (val == LOW) {
 aa4:	11 11       	cpse	r17, r1
 aa6:	05 c0       	rjmp	.+10     	; 0xab2 <digitalWrite+0x50>
		*out &= ~bit;
 aa8:	9c 91       	ld	r25, X
 aaa:	ed 2f       	mov	r30, r29
 aac:	e0 95       	com	r30
 aae:	e9 23       	and	r30, r25
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <digitalWrite+0x54>
	} else {
		*out |= bit;
 ab2:	ec 91       	ld	r30, X
 ab4:	ed 2b       	or	r30, r29
 ab6:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 ab8:	8f bf       	out	0x3f, r24	; 63
}
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	1f 91       	pop	r17
 ac0:	08 95       	ret

00000ac2 <digitalRead>:

int digitalRead(uint8_t pin)
{
 ac2:	cf 93       	push	r28
 ac4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 ac6:	28 2f       	mov	r18, r24
 ac8:	30 e0       	ldi	r19, 0x00	; 0
 aca:	f9 01       	movw	r30, r18
 acc:	e8 59       	subi	r30, 0x98	; 152
 ace:	ff 4f       	sbci	r31, 0xFF	; 255
 ad0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 ad2:	f9 01       	movw	r30, r18
 ad4:	e4 58       	subi	r30, 0x84	; 132
 ad6:	ff 4f       	sbci	r31, 0xFF	; 255
 ad8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
 ada:	f9 01       	movw	r30, r18
 adc:	e0 57       	subi	r30, 0x70	; 112
 ade:	ff 4f       	sbci	r31, 0xFF	; 255
 ae0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
 ae2:	cc 23       	and	r28, r28
 ae4:	91 f0       	breq	.+36     	; 0xb0a <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 ae6:	81 11       	cpse	r24, r1
 ae8:	0e 94 cc 04 	call	0x998	; 0x998 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
 aec:	ec 2f       	mov	r30, r28
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	ee 0f       	add	r30, r30
 af2:	ff 1f       	adc	r31, r31
 af4:	ec 55       	subi	r30, 0x5C	; 92
 af6:	ff 4f       	sbci	r31, 0xFF	; 255
 af8:	a5 91       	lpm	r26, Z+
 afa:	b4 91       	lpm	r27, Z
 afc:	ec 91       	ld	r30, X
 afe:	ed 23       	and	r30, r29
 b00:	81 e0       	ldi	r24, 0x01	; 1
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	21 f4       	brne	.+8      	; 0xb0e <digitalRead+0x4c>
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <digitalRead+0x4c>
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	08 95       	ret

00000b14 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 b14:	08 95       	ret

00000b16 <__udivmodsi4>:
 b16:	a1 e2       	ldi	r26, 0x21	; 33
 b18:	1a 2e       	mov	r1, r26
 b1a:	aa 1b       	sub	r26, r26
 b1c:	bb 1b       	sub	r27, r27
 b1e:	fd 01       	movw	r30, r26
 b20:	0d c0       	rjmp	.+26     	; 0xb3c <__udivmodsi4_ep>

00000b22 <__udivmodsi4_loop>:
 b22:	aa 1f       	adc	r26, r26
 b24:	bb 1f       	adc	r27, r27
 b26:	ee 1f       	adc	r30, r30
 b28:	ff 1f       	adc	r31, r31
 b2a:	a2 17       	cp	r26, r18
 b2c:	b3 07       	cpc	r27, r19
 b2e:	e4 07       	cpc	r30, r20
 b30:	f5 07       	cpc	r31, r21
 b32:	20 f0       	brcs	.+8      	; 0xb3c <__udivmodsi4_ep>
 b34:	a2 1b       	sub	r26, r18
 b36:	b3 0b       	sbc	r27, r19
 b38:	e4 0b       	sbc	r30, r20
 b3a:	f5 0b       	sbc	r31, r21

00000b3c <__udivmodsi4_ep>:
 b3c:	66 1f       	adc	r22, r22
 b3e:	77 1f       	adc	r23, r23
 b40:	88 1f       	adc	r24, r24
 b42:	99 1f       	adc	r25, r25
 b44:	1a 94       	dec	r1
 b46:	69 f7       	brne	.-38     	; 0xb22 <__udivmodsi4_loop>
 b48:	60 95       	com	r22
 b4a:	70 95       	com	r23
 b4c:	80 95       	com	r24
 b4e:	90 95       	com	r25
 b50:	9b 01       	movw	r18, r22
 b52:	ac 01       	movw	r20, r24
 b54:	bd 01       	movw	r22, r26
 b56:	cf 01       	movw	r24, r30
 b58:	08 95       	ret

00000b5a <__tablejump2__>:
 b5a:	ee 0f       	add	r30, r30
 b5c:	ff 1f       	adc	r31, r31
 b5e:	05 90       	lpm	r0, Z+
 b60:	f4 91       	lpm	r31, Z
 b62:	e0 2d       	mov	r30, r0
 b64:	09 94       	ijmp

00000b66 <_exit>:
 b66:	f8 94       	cli

00000b68 <__stop_program>:
 b68:	ff cf       	rjmp	.-2      	; 0xb68 <__stop_program>
